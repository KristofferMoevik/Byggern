
ATMega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000017c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a14  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000841  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a6  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000042  00000000  00000000  00001d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e7       	ldi	r30, 0x7C	; 124
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 31       	cpi	r26, 0x1C	; 28
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ac e1       	ldi	r26, 0x1C	; 28
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 32       	cpi	r26, 0x22	; 34
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 75 00 	call	0xea	; 0xea <main>
  a6:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <init_UART>:
 */ 

#include "uart.h"


void init_UART(long BAUD_PRESCALE){
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
	/* Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8); //Baudrate reg
  b2:	07 2f       	mov	r16, r23
  b4:	18 2f       	mov	r17, r24
  b6:	29 2f       	mov	r18, r25
  b8:	33 27       	eor	r19, r19
  ba:	27 fd       	sbrc	r18, 7
  bc:	3a 95       	dec	r19
  be:	00 bd       	out	0x20, r16	; 32
	UBRR0L = (unsigned char)BAUD_PRESCALE; //Baudrate reg
  c0:	69 b9       	out	0x09, r22	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
  c6:	8e e8       	ldi	r24, 0x8E	; 142
  c8:	80 bd       	out	0x20, r24	; 32
}
  ca:	1f 91       	pop	r17
  cc:	0f 91       	pop	r16
  ce:	08 95       	ret

000000d0 <flush_UART>:

void flush_UART( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <flush_UART+0x4>
  d2:	8c b1       	in	r24, 0x0c	; 12
  d4:	5f 99       	sbic	0x0b, 7	; 11
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <flush_UART+0x2>
}
  d8:	08 95       	ret

000000da <recieve_char_UART>:

unsigned char recieve_char_UART(){
	while ( !( UCSR0A & (1 << RXC0) ) );/* Wait till data is received */
  da:	5f 9b       	sbis	0x0b, 7	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <recieve_char_UART>
	return(UDR0);			/* Return the byte*/
  de:	8c b1       	in	r24, 0x0c	; 12
}
  e0:	08 95       	ret

000000e2 <transmit_char_UART>:

void transmit_char_UART(char letter){
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <transmit_char_UART>
	UDR0 = letter;
  e6:	8c b9       	out	0x0c, r24	; 12
  e8:	08 95       	ret

000000ea <main>:


int main(void)
{
	long BAUDRATE = 9600;
	init_UART(BAUD_PRESCALE);
  ea:	6f e1       	ldi	r22, 0x1F	; 31
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 57 00 	call	0xae	; 0xae <init_UART>
	flush_UART();
  f6:	0e 94 68 00 	call	0xd0	; 0xd0 <flush_UART>
	while (1)
	{
		char c;
		while(1)
		{
			c=recieve_char_UART();
  fa:	0e 94 6d 00 	call	0xda	; 0xda <recieve_char_UART>
			transmit_char_UART(c);
  fe:	0e 94 71 00 	call	0xe2	; 0xe2 <transmit_char_UART>
			stdout = &mystdout;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x3>
 10a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end+0x2>
			printf("Hello, world!\n");
 10e:	8e e0       	ldi	r24, 0x0E	; 14
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 8c 00 	call	0x118	; 0x118 <puts>
 116:	f1 cf       	rjmp	.-30     	; 0xfa <main+0x10>

00000118 <puts>:
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__data_end+0x2>
 124:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__data_end+0x3>
 128:	23 81       	ldd	r18, Z+3	; 0x03
 12a:	21 ff       	sbrs	r18, 1
 12c:	1b c0       	rjmp	.+54     	; 0x164 <puts+0x4c>
 12e:	8c 01       	movw	r16, r24
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	f8 01       	movw	r30, r16
 136:	81 91       	ld	r24, Z+
 138:	8f 01       	movw	r16, r30
 13a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end+0x2>
 13e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x3>
 142:	db 01       	movw	r26, r22
 144:	18 96       	adiw	r26, 0x08	; 8
 146:	ed 91       	ld	r30, X+
 148:	fc 91       	ld	r31, X
 14a:	19 97       	sbiw	r26, 0x09	; 9
 14c:	88 23       	and	r24, r24
 14e:	31 f0       	breq	.+12     	; 0x15c <puts+0x44>
 150:	09 95       	icall
 152:	89 2b       	or	r24, r25
 154:	79 f3       	breq	.-34     	; 0x134 <puts+0x1c>
 156:	df ef       	ldi	r29, 0xFF	; 255
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	ec cf       	rjmp	.-40     	; 0x134 <puts+0x1c>
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	09 95       	icall
 160:	89 2b       	or	r24, r25
 162:	19 f0       	breq	.+6      	; 0x16a <puts+0x52>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	9f ef       	ldi	r25, 0xFF	; 255
 168:	02 c0       	rjmp	.+4      	; 0x16e <puts+0x56>
 16a:	8d 2f       	mov	r24, r29
 16c:	9c 2f       	mov	r25, r28
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
