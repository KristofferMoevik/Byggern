
ATMega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e4  00800100  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002e4  008002e4  000007f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025c9  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000edf  00000000  00000000  00002ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001163  00000000  00000000  00003ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  00005038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000922  00000000  00000000  00005528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001078  00000000  00000000  00005e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00006ec2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 5f       	subi	r16, 0xF0	; 240
  78:	00 00       	nop
  7a:	00 07       	cpc	r16, r16
  7c:	00 07       	cpc	r16, r16
  7e:	00 14       	cp	r0, r0
  80:	7f 14       	cp	r7, r15
  82:	7f 14       	cp	r7, r15
  84:	24 2a       	or	r2, r20
  86:	7f 2a       	or	r7, r31
  88:	12 23       	and	r17, r18
  8a:	13 08       	sbc	r1, r3
  8c:	64 62       	ori	r22, 0x24	; 36
  8e:	36 49       	sbci	r19, 0x96	; 150
  90:	55 22       	and	r5, r21
  92:	50 00       	.word	0x0050	; ????
  94:	05 03       	mulsu	r16, r21
  96:	00 00       	nop
  98:	00 1c       	adc	r0, r0
  9a:	22 41       	sbci	r18, 0x12	; 18
  9c:	00 00       	nop
  9e:	41 22       	and	r4, r17
  a0:	1c 00       	.word	0x001c	; ????
  a2:	08 2a       	or	r0, r24
  a4:	1c 2a       	or	r1, r28
  a6:	08 08       	sbc	r0, r8
  a8:	08 3e       	cpi	r16, 0xE8	; 232
  aa:	08 08       	sbc	r0, r8
  ac:	00 50       	subi	r16, 0x00	; 0
  ae:	30 00       	.word	0x0030	; ????
  b0:	00 08       	sbc	r0, r0
  b2:	08 08       	sbc	r0, r8
  b4:	08 08       	sbc	r0, r8
  b6:	00 60       	ori	r16, 0x00	; 0
  b8:	60 00       	.word	0x0060	; ????
  ba:	00 20       	and	r0, r0
  bc:	10 08       	sbc	r1, r0
  be:	04 02       	muls	r16, r20
  c0:	3e 51       	subi	r19, 0x1E	; 30
  c2:	49 45       	sbci	r20, 0x59	; 89
  c4:	3e 00       	.word	0x003e	; ????
  c6:	42 7f       	andi	r20, 0xF2	; 242
  c8:	40 00       	.word	0x0040	; ????
  ca:	42 61       	ori	r20, 0x12	; 18
  cc:	51 49       	sbci	r21, 0x91	; 145
  ce:	46 21       	and	r20, r6
  d0:	41 45       	sbci	r20, 0x51	; 81
  d2:	4b 31       	cpi	r20, 0x1B	; 27
  d4:	18 14       	cp	r1, r8
  d6:	12 7f       	andi	r17, 0xF2	; 242
  d8:	10 27       	eor	r17, r16
  da:	45 45       	sbci	r20, 0x55	; 85
  dc:	45 39       	cpi	r20, 0x95	; 149
  de:	3c 4a       	sbci	r19, 0xAC	; 172
  e0:	49 49       	sbci	r20, 0x99	; 153
  e2:	30 01       	movw	r6, r0
  e4:	71 09       	sbc	r23, r1
  e6:	05 03       	mulsu	r16, r21
  e8:	36 49       	sbci	r19, 0x96	; 150
  ea:	49 49       	sbci	r20, 0x99	; 153
  ec:	36 06       	cpc	r3, r22
  ee:	49 49       	sbci	r20, 0x99	; 153
  f0:	29 1e       	adc	r2, r25
  f2:	00 36       	cpi	r16, 0x60	; 96
  f4:	36 00       	.word	0x0036	; ????
  f6:	00 00       	nop
  f8:	56 36       	cpi	r21, 0x66	; 102
  fa:	00 00       	nop
  fc:	00 08       	sbc	r0, r0
  fe:	14 22       	and	r1, r20
 100:	41 14       	cp	r4, r1
 102:	14 14       	cp	r1, r4
 104:	14 14       	cp	r1, r4
 106:	41 22       	and	r4, r17
 108:	14 08       	sbc	r1, r4
 10a:	00 02       	muls	r16, r16
 10c:	01 51       	subi	r16, 0x11	; 17
 10e:	09 06       	cpc	r0, r25
 110:	32 49       	sbci	r19, 0x92	; 146
 112:	79 41       	sbci	r23, 0x19	; 25
 114:	3e 7e       	andi	r19, 0xEE	; 238
 116:	11 11       	cpse	r17, r1
 118:	11 7e       	andi	r17, 0xE1	; 225
 11a:	7f 49       	sbci	r23, 0x9F	; 159
 11c:	49 49       	sbci	r20, 0x99	; 153
 11e:	36 3e       	cpi	r19, 0xE6	; 230
 120:	41 41       	sbci	r20, 0x11	; 17
 122:	41 22       	and	r4, r17
 124:	7f 41       	sbci	r23, 0x1F	; 31
 126:	41 22       	and	r4, r17
 128:	1c 7f       	andi	r17, 0xFC	; 252
 12a:	49 49       	sbci	r20, 0x99	; 153
 12c:	49 41       	sbci	r20, 0x19	; 25
 12e:	7f 09       	sbc	r23, r15
 130:	09 01       	movw	r0, r18
 132:	01 3e       	cpi	r16, 0xE1	; 225
 134:	41 41       	sbci	r20, 0x11	; 17
 136:	51 32       	cpi	r21, 0x21	; 33
 138:	7f 08       	sbc	r7, r15
 13a:	08 08       	sbc	r0, r8
 13c:	7f 00       	.word	0x007f	; ????
 13e:	41 7f       	andi	r20, 0xF1	; 241
 140:	41 00       	.word	0x0041	; ????
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	41 3f       	cpi	r20, 0xF1	; 241
 146:	01 7f       	andi	r16, 0xF1	; 241
 148:	08 14       	cp	r0, r8
 14a:	22 41       	sbci	r18, 0x12	; 18
 14c:	7f 40       	sbci	r23, 0x0F	; 15
 14e:	40 40       	sbci	r20, 0x00	; 0
 150:	40 7f       	andi	r20, 0xF0	; 240
 152:	02 04       	cpc	r0, r2
 154:	02 7f       	andi	r16, 0xF2	; 242
 156:	7f 04       	cpc	r7, r15
 158:	08 10       	cpse	r0, r8
 15a:	7f 3e       	cpi	r23, 0xEF	; 239
 15c:	41 41       	sbci	r20, 0x11	; 17
 15e:	41 3e       	cpi	r20, 0xE1	; 225
 160:	7f 09       	sbc	r23, r15
 162:	09 09       	sbc	r16, r9
 164:	06 3e       	cpi	r16, 0xE6	; 230
 166:	41 51       	subi	r20, 0x11	; 17
 168:	21 5e       	subi	r18, 0xE1	; 225
 16a:	7f 09       	sbc	r23, r15
 16c:	19 29       	or	r17, r9
 16e:	46 46       	sbci	r20, 0x66	; 102
 170:	49 49       	sbci	r20, 0x99	; 153
 172:	49 31       	cpi	r20, 0x19	; 25
 174:	01 01       	movw	r0, r2
 176:	7f 01       	movw	r14, r30
 178:	01 3f       	cpi	r16, 0xF1	; 241
 17a:	40 40       	sbci	r20, 0x00	; 0
 17c:	40 3f       	cpi	r20, 0xF0	; 240
 17e:	1f 20       	and	r1, r15
 180:	40 20       	and	r4, r0
 182:	1f 7f       	andi	r17, 0xFF	; 255
 184:	20 18       	sub	r2, r0
 186:	20 7f       	andi	r18, 0xF0	; 240
 188:	63 14       	cp	r6, r3
 18a:	08 14       	cp	r0, r8
 18c:	63 03       	mulsu	r22, r19
 18e:	04 78       	andi	r16, 0x84	; 132
 190:	04 03       	mulsu	r16, r20
 192:	61 51       	subi	r22, 0x11	; 17
 194:	49 45       	sbci	r20, 0x59	; 89
 196:	43 00       	.word	0x0043	; ????
 198:	00 7f       	andi	r16, 0xF0	; 240
 19a:	41 41       	sbci	r20, 0x11	; 17
 19c:	02 04       	cpc	r0, r2
 19e:	08 10       	cpse	r0, r8
 1a0:	20 41       	sbci	r18, 0x10	; 16
 1a2:	41 7f       	andi	r20, 0xF1	; 241
 1a4:	00 00       	nop
 1a6:	04 02       	muls	r16, r20
 1a8:	01 02       	muls	r16, r17
 1aa:	04 40       	sbci	r16, 0x04	; 4
 1ac:	40 40       	sbci	r20, 0x00	; 0
 1ae:	40 40       	sbci	r20, 0x00	; 0
 1b0:	00 01       	movw	r0, r0
 1b2:	02 04       	cpc	r0, r2
 1b4:	00 20       	and	r0, r0
 1b6:	54 54       	subi	r21, 0x44	; 68
 1b8:	54 78       	andi	r21, 0x84	; 132
 1ba:	7f 48       	sbci	r23, 0x8F	; 143
 1bc:	44 44       	sbci	r20, 0x44	; 68
 1be:	38 38       	cpi	r19, 0x88	; 136
 1c0:	44 44       	sbci	r20, 0x44	; 68
 1c2:	44 20       	and	r4, r4
 1c4:	38 44       	sbci	r19, 0x48	; 72
 1c6:	44 48       	sbci	r20, 0x84	; 132
 1c8:	7f 38       	cpi	r23, 0x8F	; 143
 1ca:	54 54       	subi	r21, 0x44	; 68
 1cc:	54 18       	sub	r5, r4
 1ce:	08 7e       	andi	r16, 0xE8	; 232
 1d0:	09 01       	movw	r0, r18
 1d2:	02 08       	sbc	r0, r2
 1d4:	14 54       	subi	r17, 0x44	; 68
 1d6:	54 3c       	cpi	r21, 0xC4	; 196
 1d8:	7f 08       	sbc	r7, r15
 1da:	04 04       	cpc	r0, r4
 1dc:	78 00       	.word	0x0078	; ????
 1de:	44 7d       	andi	r20, 0xD4	; 212
 1e0:	40 00       	.word	0x0040	; ????
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	44 3d       	cpi	r20, 0xD4	; 212
 1e6:	00 00       	nop
 1e8:	7f 10       	cpse	r7, r15
 1ea:	28 44       	sbci	r18, 0x48	; 72
 1ec:	00 41       	sbci	r16, 0x10	; 16
 1ee:	7f 40       	sbci	r23, 0x0F	; 15
 1f0:	00 7c       	andi	r16, 0xC0	; 192
 1f2:	04 18       	sub	r0, r4
 1f4:	04 78       	andi	r16, 0x84	; 132
 1f6:	7c 08       	sbc	r7, r12
 1f8:	04 04       	cpc	r0, r4
 1fa:	78 38       	cpi	r23, 0x88	; 136
 1fc:	44 44       	sbci	r20, 0x44	; 68
 1fe:	44 38       	cpi	r20, 0x84	; 132
 200:	7c 14       	cp	r7, r12
 202:	14 14       	cp	r1, r4
 204:	08 08       	sbc	r0, r8
 206:	14 14       	cp	r1, r4
 208:	18 7c       	andi	r17, 0xC8	; 200
 20a:	7c 08       	sbc	r7, r12
 20c:	04 04       	cpc	r0, r4
 20e:	08 48       	sbci	r16, 0x88	; 136
 210:	54 54       	subi	r21, 0x44	; 68
 212:	54 20       	and	r5, r4
 214:	04 3f       	cpi	r16, 0xF4	; 244
 216:	44 40       	sbci	r20, 0x04	; 4
 218:	20 3c       	cpi	r18, 0xC0	; 192
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	20 7c       	andi	r18, 0xC0	; 192
 21e:	1c 20       	and	r1, r12
 220:	40 20       	and	r4, r0
 222:	1c 3c       	cpi	r17, 0xCC	; 204
 224:	40 30       	cpi	r20, 0x00	; 0
 226:	40 3c       	cpi	r20, 0xC0	; 192
 228:	44 28       	or	r4, r4
 22a:	10 28       	or	r1, r0
 22c:	44 0c       	add	r4, r4
 22e:	50 50       	subi	r21, 0x00	; 0
 230:	50 3c       	cpi	r21, 0xC0	; 192
 232:	44 64       	ori	r20, 0x44	; 68
 234:	54 4c       	sbci	r21, 0xC4	; 196
 236:	44 00       	.word	0x0044	; ????
 238:	08 36       	cpi	r16, 0x68	; 104
 23a:	41 00       	.word	0x0041	; ????
 23c:	00 00       	nop
 23e:	7f 00       	.word	0x007f	; ????
 240:	00 00       	nop
 242:	41 36       	cpi	r20, 0x61	; 97
 244:	08 00       	.word	0x0008	; ????
 246:	02 01       	movw	r0, r4
 248:	03 02       	muls	r16, r19
 24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
 24c:	11 24       	eor	r1, r1
 24e:	1f be       	out	0x3f, r1	; 63
 250:	cf ef       	ldi	r28, 0xFF	; 255
 252:	d4 e0       	ldi	r29, 0x04	; 4
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
 258:	12 e0       	ldi	r17, 0x02	; 2
 25a:	a0 e0       	ldi	r26, 0x00	; 0
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	ee e7       	ldi	r30, 0x7E	; 126
 260:	f5 e0       	ldi	r31, 0x05	; 5
 262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
 264:	05 90       	lpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	a4 3e       	cpi	r26, 0xE4	; 228
 26a:	b1 07       	cpc	r27, r17
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
 26e:	22 e0       	ldi	r18, 0x02	; 2
 270:	a4 ee       	ldi	r26, 0xE4	; 228
 272:	b2 e0       	ldi	r27, 0x02	; 2
 274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
 276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
 278:	aa 3e       	cpi	r26, 0xEA	; 234
 27a:	b2 07       	cpc	r27, r18
 27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
 27e:	0e 94 aa 02 	call	0x554	; 0x554 <main>
 282:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

00000286 <__bad_interrupt>:
 286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <init_clock_adc>:
 */ 
#include "adc.h"
#include "../header/addresses.h"

void init_clock_adc() {
    DDRD |= (1 << PD4);
 28a:	81 b3       	in	r24, 0x11	; 17
 28c:	80 61       	ori	r24, 0x10	; 16
 28e:	81 bb       	out	0x11, r24	; 17
	
	TCCR3A = (1 << COM3A0) | (1 << WGM30) | (1 << WGM31) & ~(1 << COM3A1) & ~(1 << FOC3A);
 290:	83 e4       	ldi	r24, 0x43	; 67
 292:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
    TCCR3B = (1 << WGM33) | (1 << WGM32) | (1 << CS30) & ~(1 << CS31) & ~(1 << CS32);
 296:	89 e1       	ldi	r24, 0x19	; 25
 298:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
		
	OCR3AH = 0x0;
 29c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
	OCR3AL = 0x1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
 2a6:	08 95       	ret

000002a8 <send_command>:
#pragma once
#include "oled.h"
#include <avr/pgmspace.h>

void send_command(uint8_t cmd){
	OLED_CONTROL = cmd; 
 2a8:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd16>
 2ac:	08 95       	ret

000002ae <send_data>:
}

void send_data(uint8_t data){
	OLED_DATA = data; 
 2ae:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf16>
 2b2:	08 95       	ret

000002b4 <oled_init>:
}


void oled_init() {
    
	send_command(0xAE);  // display off
 2b4:	8e ea       	ldi	r24, 0xAE	; 174
 2b6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0xA1);  // segment remap
 2ba:	81 ea       	ldi	r24, 0xA1	; 161
 2bc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0xDA);  // common pads hardware: alternative
 2c0:	8a ed       	ldi	r24, 0xDA	; 218
 2c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0x12);  // send alternative pad configuration
 2c6:	82 e1       	ldi	r24, 0x12	; 18
 2c8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0xC8);  // common output scan direction: com63~com0
 2cc:	88 ec       	ldi	r24, 0xC8	; 200
 2ce:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    
	send_command(0xA8);  // multiplex ratio mode: 63
 2d2:	88 ea       	ldi	r24, 0xA8	; 168
 2d4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0x3F);  // ratio value
 2d8:	8f e3       	ldi	r24, 0x3F	; 63
 2da:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    
	send_command(0xD5);  // display divide ratio/oscillator frequency mode
 2de:	85 ed       	ldi	r24, 0xD5	; 213
 2e0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0x80);  // frequency value
 2e4:	80 e8       	ldi	r24, 0x80	; 128
 2e6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
	
    send_command(0x81);  // contrast control
 2ea:	81 e8       	ldi	r24, 0x81	; 129
 2ec:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0x50);  // contrast value
 2f0:	80 e5       	ldi	r24, 0x50	; 80
 2f2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
	
    send_command(0xD9);  // set pre-charge period
 2f6:	89 ed       	ldi	r24, 0xD9	; 217
 2f8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0x21);  // pre-charge value
 2fc:	81 e2       	ldi	r24, 0x21	; 33
 2fe:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
	
    send_command(0x20);  // Set Memory Addressing Mode
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0x02);  // set to page addressing mode
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
	
    send_command(0xDB);  // VCOM deselect level mode
 30e:	8b ed       	ldi	r24, 0xDB	; 219
 310:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0x30);  // deselect level value
 314:	80 e3       	ldi	r24, 0x30	; 48
 316:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
	
    send_command(0xAD);  // master configuration
 31a:	8d ea       	ldi	r24, 0xAD	; 173
 31c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0x00);  // master config value
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
	
    send_command(0xA4);  // output follows RAM content
 326:	84 ea       	ldi	r24, 0xA4	; 164
 328:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0xA6);  // set normal display
 32c:	86 ea       	ldi	r24, 0xA6	; 166
 32e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
    send_command(0xAF);  // display on
 332:	8f ea       	ldi	r24, 0xAF	; 175
 334:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
 338:	08 95       	ret

0000033a <oled_goto_pos>:
		send_data(0x0);	
	}
	
}

void oled_goto_pos(int page_start, int segment){
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	eb 01       	movw	r28, r22
	send_command(page_start	| 0xB0); // Set page
 340:	80 6b       	ori	r24, 0xB0	; 176
 342:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
	send_command(segment & 0x0F);
 346:	8c 2f       	mov	r24, r28
 348:	8f 70       	andi	r24, 0x0F	; 15
 34a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
	send_command(((segment & 0xF0) >> 4) | (0x10));
 34e:	ce 01       	movw	r24, r28
 350:	80 7f       	andi	r24, 0xF0	; 240
 352:	99 27       	eor	r25, r25
 354:	95 95       	asr	r25
 356:	87 95       	ror	r24
 358:	95 95       	asr	r25
 35a:	87 95       	ror	r24
 35c:	95 95       	asr	r25
 35e:	87 95       	ror	r24
 360:	95 95       	asr	r25
 362:	87 95       	ror	r24
 364:	80 61       	ori	r24, 0x10	; 16
 366:	0e 94 54 01 	call	0x2a8	; 0x2a8 <send_command>
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <oled_clear_screen>:
    send_command(0xAF);  // display on
	
}


void oled_clear_screen(){
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
	oled_goto_pos(0,0);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 9d 01 	call	0x33a	; 0x33a <oled_goto_pos>
	int pages = 8;
	int coloums = 128;
	for (int i = 0; i < pages; i++){
 384:	00 e0       	ldi	r16, 0x00	; 0
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	11 c0       	rjmp	.+34     	; 0x3ac <oled_clear_screen+0x3c>
		oled_goto_pos(i,0);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	c8 01       	movw	r24, r16
 390:	0e 94 9d 01 	call	0x33a	; 0x33a <oled_goto_pos>
		for (int ii = 0; ii < coloums; ii++){
 394:	c0 e0       	ldi	r28, 0x00	; 0
 396:	d0 e0       	ldi	r29, 0x00	; 0
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <oled_clear_screen+0x32>
			send_data(0x0);	
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 57 01 	call	0x2ae	; 0x2ae <send_data>
	oled_goto_pos(0,0);
	int pages = 8;
	int coloums = 128;
	for (int i = 0; i < pages; i++){
		oled_goto_pos(i,0);
		for (int ii = 0; ii < coloums; ii++){
 3a0:	21 96       	adiw	r28, 0x01	; 1
 3a2:	c0 38       	cpi	r28, 0x80	; 128
 3a4:	d1 05       	cpc	r29, r1
 3a6:	cc f3       	brlt	.-14     	; 0x39a <oled_clear_screen+0x2a>

void oled_clear_screen(){
	oled_goto_pos(0,0);
	int pages = 8;
	int coloums = 128;
	for (int i = 0; i < pages; i++){
 3a8:	0f 5f       	subi	r16, 0xFF	; 255
 3aa:	1f 4f       	sbci	r17, 0xFF	; 255
 3ac:	08 30       	cpi	r16, 0x08	; 8
 3ae:	11 05       	cpc	r17, r1
 3b0:	64 f3       	brlt	.-40     	; 0x38a <oled_clear_screen+0x1a>
		oled_goto_pos(i,0);
		for (int ii = 0; ii < coloums; ii++){
			send_data(0x0);	
		}
	}
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <oled_clear_line>:

void oled_clear_line(int line){
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
	oled_goto_pos(line,0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	0e 94 9d 01 	call	0x33a	; 0x33a <oled_goto_pos>
	int coloums = 128;	
	for (int ii = 0; ii < coloums; ii++){
 3c8:	c0 e0       	ldi	r28, 0x00	; 0
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <oled_clear_line+0x1a>
		send_data(0x0);	
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 57 01 	call	0x2ae	; 0x2ae <send_data>
}

void oled_clear_line(int line){
	oled_goto_pos(line,0);
	int coloums = 128;	
	for (int ii = 0; ii < coloums; ii++){
 3d4:	21 96       	adiw	r28, 0x01	; 1
 3d6:	c0 38       	cpi	r28, 0x80	; 128
 3d8:	d1 05       	cpc	r29, r1
 3da:	cc f3       	brlt	.-14     	; 0x3ce <oled_clear_line+0x12>
		send_data(0x0);	
	}
	
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <send_char>:
	send_command(page_start	| 0xB0); // Set page
	send_command(segment & 0x0F);
	send_command(((segment & 0xF0) >> 4) | (0x10));
}

void send_char(char c){
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	18 2f       	mov	r17, r24
	for (int i = 0; i < font_size; i++){
 3ea:	c0 e0       	ldi	r28, 0x00	; 0
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
 3ee:	12 c0       	rjmp	.+36     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
		char letter_byte = pgm_read_byte(&font5[c - 32][i]);
 3f0:	81 2f       	mov	r24, r17
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	80 97       	sbiw	r24, 0x20	; 32
 3f6:	fc 01       	movw	r30, r24
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	e8 0f       	add	r30, r24
 402:	f9 1f       	adc	r31, r25
 404:	ec 0f       	add	r30, r28
 406:	fd 1f       	adc	r31, r29
 408:	e0 59       	subi	r30, 0x90	; 144
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	84 91       	lpm	r24, Z
		send_data(letter_byte);
 40e:	0e 94 57 01 	call	0x2ae	; 0x2ae <send_data>
	send_command(segment & 0x0F);
	send_command(((segment & 0xF0) >> 4) | (0x10));
}

void send_char(char c){
	for (int i = 0; i < font_size; i++){
 412:	21 96       	adiw	r28, 0x01	; 1
 414:	c5 30       	cpi	r28, 0x05	; 5
 416:	d1 05       	cpc	r29, r1
 418:	5c f3       	brlt	.-42     	; 0x3f0 <send_char+0xe>
		char letter_byte = pgm_read_byte(&font5[c - 32][i]);
		send_data(letter_byte);
	}
	
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	08 95       	ret

00000422 <oled_print_string>:

void oled_print_string(char str[], int line, int pos){
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	8c 01       	movw	r16, r24
 42c:	cb 01       	movw	r24, r22
	oled_goto_pos(line, pos);
 42e:	ba 01       	movw	r22, r20
 430:	0e 94 9d 01 	call	0x33a	; 0x33a <oled_goto_pos>
	for (int i = 0; i < strlen(str); i++){
 434:	c0 e0       	ldi	r28, 0x00	; 0
 436:	d0 e0       	ldi	r29, 0x00	; 0
 438:	07 c0       	rjmp	.+14     	; 0x448 <oled_print_string+0x26>
		send_char(str[i]);
 43a:	f8 01       	movw	r30, r16
 43c:	ec 0f       	add	r30, r28
 43e:	fd 1f       	adc	r31, r29
 440:	80 81       	ld	r24, Z
 442:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <send_char>
	
}

void oled_print_string(char str[], int line, int pos){
	oled_goto_pos(line, pos);
	for (int i = 0; i < strlen(str); i++){
 446:	21 96       	adiw	r28, 0x01	; 1
 448:	f8 01       	movw	r30, r16
 44a:	01 90       	ld	r0, Z+
 44c:	00 20       	and	r0, r0
 44e:	e9 f7       	brne	.-6      	; 0x44a <oled_print_string+0x28>
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	e0 1b       	sub	r30, r16
 454:	f1 0b       	sbc	r31, r17
 456:	ce 17       	cp	r28, r30
 458:	df 07       	cpc	r29, r31
 45a:	78 f3       	brcs	.-34     	; 0x43a <oled_print_string+0x18>
		send_char(str[i]);
	}
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <oled_show_main_menu>:

void oled_show_main_menu() {
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	28 97       	sbiw	r28, 0x08	; 8
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
	oled_clear_screen();
 47e:	0e 94 b8 01 	call	0x370	; 0x370 <oled_clear_screen>
	const char *menu_items[] = {"New Game", "Instructions", "Scoreboard", "Set Duration"};
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	ee e0       	ldi	r30, 0x0E	; 14
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	de 01       	movw	r26, r28
 48a:	11 96       	adiw	r26, 0x01	; 1
 48c:	01 90       	ld	r0, Z+
 48e:	0d 92       	st	X+, r0
 490:	8a 95       	dec	r24
 492:	e1 f7       	brne	.-8      	; 0x48c <oled_show_main_menu+0x26>
    int num_items = sizeof(menu_items) / sizeof(menu_items[0]);

	//oled_goto_pos(1,20);
	oled_print_string("Main Menu", 1, 35);
 494:	43 e2       	ldi	r20, 0x23	; 35
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	86 e1       	ldi	r24, 0x16	; 22
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 11 02 	call	0x422	; 0x422 <oled_print_string>

    for (int i = 2; i < num_items+2; i++) {
 4a4:	02 e0       	ldi	r16, 0x02	; 2
 4a6:	10 e0       	ldi	r17, 0x00	; 0
 4a8:	18 c0       	rjmp	.+48     	; 0x4da <oled_show_main_menu+0x74>
        oled_goto_pos(i, 0); // One item per page
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	c8 01       	movw	r24, r16
 4b0:	0e 94 9d 01 	call	0x33a	; 0x33a <oled_goto_pos>
		//oled_print_string(" ",i); 
		oled_print_string(menu_items[i-2],i,0);
 4b4:	f8 01       	movw	r30, r16
 4b6:	32 97       	sbiw	r30, 0x02	; 2
 4b8:	ee 0f       	add	r30, r30
 4ba:	ff 1f       	adc	r31, r31
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	8c 0f       	add	r24, r28
 4c2:	9d 1f       	adc	r25, r29
 4c4:	e8 0f       	add	r30, r24
 4c6:	f9 1f       	adc	r31, r25
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	b8 01       	movw	r22, r16
 4ce:	80 81       	ld	r24, Z
 4d0:	91 81       	ldd	r25, Z+1	; 0x01
 4d2:	0e 94 11 02 	call	0x422	; 0x422 <oled_print_string>
    int num_items = sizeof(menu_items) / sizeof(menu_items[0]);

	//oled_goto_pos(1,20);
	oled_print_string("Main Menu", 1, 35);

    for (int i = 2; i < num_items+2; i++) {
 4d6:	0f 5f       	subi	r16, 0xFF	; 255
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
 4da:	06 30       	cpi	r16, 0x06	; 6
 4dc:	11 05       	cpc	r17, r1
 4de:	2c f3       	brlt	.-54     	; 0x4aa <oled_show_main_menu+0x44>
        oled_goto_pos(i, 0); // One item per page
		//oled_print_string(" ",i); 
		oled_print_string(menu_items[i-2],i,0);
    }
}
 4e0:	28 96       	adiw	r28, 0x08	; 8
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret

000004f6 <recieve_char_UART>:
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
}

unsigned char recieve_char_UART(){
	while ( !( UCSR0A & (1 << RXC0) ) );/* Wait till data is received */
 4f6:	5f 9b       	sbis	0x0b, 7	; 11
 4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <recieve_char_UART>
	return(UDR0);			/* Return the byte*/
 4fa:	8c b1       	in	r24, 0x0c	; 12
}
 4fc:	08 95       	ret

000004fe <transmit_char_UART>:

void transmit_char_UART(char letter){
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
 4fe:	5d 9b       	sbis	0x0b, 5	; 11
 500:	fe cf       	rjmp	.-4      	; 0x4fe <transmit_char_UART>
	UDR0 = letter;
 502:	8c b9       	out	0x0c, r24	; 12
 504:	08 95       	ret

00000506 <init_UART>:
#include "uart.h"


void init_UART(){
	/* Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8); //Baudrate reg
 506:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)BAUD_PRESCALE; //Baudrate reg
 508:	8f e1       	ldi	r24, 0x1F	; 31
 50a:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 50c:	88 e1       	ldi	r24, 0x18	; 24
 50e:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 510:	8e e8       	ldi	r24, 0x8E	; 142
 512:	80 bd       	out	0x20, r24	; 32
 514:	08 95       	ret

00000516 <flush_UART>:
}

void flush_UART( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
 516:	01 c0       	rjmp	.+2      	; 0x51a <flush_UART+0x4>
 518:	8c b1       	in	r24, 0x0c	; 12
 51a:	5f 99       	sbic	0x0b, 7	; 11
 51c:	fd cf       	rjmp	.-6      	; 0x518 <flush_UART+0x2>
}
 51e:	08 95       	ret

00000520 <init_external_memory_bus>:
	msg_send.data[3] = slider_value;
	
	//printf("joystick sent x %i , y %i , shoot_button: %i, slider: %i \n\r", joystick_x_value, joystick_y_value, shoot_button, slider_value);
	
	can_send_message(msg_send);
}
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	85 bf       	out	0x35, r24	; 53
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	86 bf       	out	0x36, r24	; 54
 528:	80 e2       	ldi	r24, 0x20	; 32
 52a:	80 bf       	out	0x30, r24	; 48
 52c:	08 95       	ret

0000052e <test_oled>:
 52e:	0e 94 90 02 	call	0x520	; 0x520 <init_external_memory_bus>
 532:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <oled_init>
 536:	0e 94 33 02 	call	0x466	; 0x466 <oled_show_main_menu>
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 de 01 	call	0x3bc	; 0x3bc <oled_clear_line>
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	62 e0       	ldi	r22, 0x02	; 2
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	85 e2       	ldi	r24, 0x25	; 37
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	0e 94 11 02 	call	0x422	; 0x422 <oled_print_string>
 552:	08 95       	ret

00000554 <main>:



int main(void){	
	
	init_external_memory_bus();
 554:	0e 94 90 02 	call	0x520	; 0x520 <init_external_memory_bus>
	init_UART();
 558:	0e 94 83 02 	call	0x506	; 0x506 <init_UART>
	flush_UART();
 55c:	0e 94 8b 02 	call	0x516	; 0x516 <flush_UART>
	init_clock_adc();
 560:	0e 94 45 01 	call	0x28a	; 0x28a <init_clock_adc>
	//fsm_main();
	test_oled(); 
 564:	0e 94 97 02 	call	0x52e	; 0x52e <test_oled>
	stdout = &uart_out;
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <__data_end+0x3>
 570:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <__data_end+0x2>
	while (1) {
		send_commands_to_node_2_can();
		can_recieve_message(recieved_message);
		//can_print_msg(*recieved_message);
	}*/
}
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
