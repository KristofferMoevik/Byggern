
ATMega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000104  00800100  000009ba  00000a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800204  00800204  00000b52  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d80  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a53  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000622  00000000  00000000  0000244f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  00002bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ae  00000000  00000000  00003049  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000032f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea eb       	ldi	r30, 0xBA	; 186
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 30       	cpi	r26, 0x0A	; 10
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  a6:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <SRAM_test>:
    }
    return rev;
}


void SRAM_test(void){
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
    uint16_t ext_ram_size = 0x800;
    uint16_t write_errors = 0;
    uint16_t retrieval_errors = 0;
    printf("Starting SRAM test...\n");
  ba:	82 e1       	ldi	r24, 0x12	; 18
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 80 01 	call	0x300	; 0x300 <puts>
    // rand() stores some internal state, so calling this function in a loop will
    // yield different seeds each time (unless srand() is called before this function)
    uint16_t seed = rand();
  c2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <rand>
  c6:	7c 01       	movw	r14, r24
    // Write phase: Immediately check that the correct value was stored
    srand(seed);
  c8:	0e 94 5f 01 	call	0x2be	; 0x2be <srand>
    for (uint16_t i = 0; i < ext_ram_size; i++) {
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0


void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
    uint16_t ext_ram_size = 0x800;
    uint16_t write_errors = 0;
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	10 e0       	ldi	r17, 0x00	; 0
    // rand() stores some internal state, so calling this function in a loop will
    // yield different seeds each time (unless srand() is called before this function)
    uint16_t seed = rand();
    // Write phase: Immediately check that the correct value was stored
    srand(seed);
    for (uint16_t i = 0; i < ext_ram_size; i++) {
  d4:	20 c0       	rjmp	.+64     	; 0x116 <SRAM_test+0x68>
        uint8_t some_value = rand();
  d6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <rand>
        ext_ram[i] = some_value;
  da:	fe 01       	movw	r30, r28
  dc:	f8 5e       	subi	r31, 0xE8	; 232
  de:	80 83       	st	Z, r24
        uint8_t retreived_value = ext_ram[i];
  e0:	20 81       	ld	r18, Z
        if (retreived_value != some_value) {
  e2:	28 17       	cp	r18, r24
  e4:	b9 f0       	breq	.+46     	; 0x114 <SRAM_test+0x66>
            printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
  e6:	99 27       	eor	r25, r25
  e8:	9f 93       	push	r25
  ea:	8f 93       	push	r24
  ec:	1f 92       	push	r1
  ee:	2f 93       	push	r18
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	88 e2       	ldi	r24, 0x28	; 40
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	9f 93       	push	r25
  fa:	8f 93       	push	r24
  fc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <printf>
            write_errors++;
 100:	0f 5f       	subi	r16, 0xFF	; 255
 102:	1f 4f       	sbci	r17, 0xFF	; 255
 104:	8d b7       	in	r24, 0x3d	; 61
 106:	9e b7       	in	r25, 0x3e	; 62
 108:	08 96       	adiw	r24, 0x08	; 8
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	9e bf       	out	0x3e, r25	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	8d bf       	out	0x3d, r24	; 61
    // rand() stores some internal state, so calling this function in a loop will
    // yield different seeds each time (unless srand() is called before this function)
    uint16_t seed = rand();
    // Write phase: Immediately check that the correct value was stored
    srand(seed);
    for (uint16_t i = 0; i < ext_ram_size; i++) {
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c1 15       	cp	r28, r1
 118:	98 e0       	ldi	r25, 0x08	; 8
 11a:	d9 07       	cpc	r29, r25
 11c:	e0 f2       	brcs	.-72     	; 0xd6 <SRAM_test+0x28>
            printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
            write_errors++;
        }
    }
    // Retrieval phase: Check that no values were changed during or after the write phase
    srand(seed);
 11e:	c7 01       	movw	r24, r14
 120:	0e 94 5f 01 	call	0x2be	; 0x2be <srand>
    // reset the PRNG to the state it had before the write phase
    for (uint16_t i = 0; i < ext_ram_size; i++) {
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
    uint16_t ext_ram_size = 0x800;
    uint16_t write_errors = 0;
    uint16_t retrieval_errors = 0;
 128:	e1 2c       	mov	r14, r1
 12a:	f1 2c       	mov	r15, r1
        }
    }
    // Retrieval phase: Check that no values were changed during or after the write phase
    srand(seed);
    // reset the PRNG to the state it had before the write phase
    for (uint16_t i = 0; i < ext_ram_size; i++) {
 12c:	20 c0       	rjmp	.+64     	; 0x16e <SRAM_test+0xc0>
        uint8_t some_value = rand();
 12e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <rand>
        uint8_t retreived_value = ext_ram[i];
 132:	fe 01       	movw	r30, r28
 134:	f8 5e       	subi	r31, 0xE8	; 232
 136:	20 81       	ld	r18, Z
        if (retreived_value != some_value) {
 138:	28 17       	cp	r18, r24
 13a:	c1 f0       	breq	.+48     	; 0x16c <SRAM_test+0xbe>
            printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 13c:	99 27       	eor	r25, r25
 13e:	9f 93       	push	r25
 140:	8f 93       	push	r24
 142:	1f 92       	push	r1
 144:	2f 93       	push	r18
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	81 e6       	ldi	r24, 0x61	; 97
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	9f 93       	push	r25
 150:	8f 93       	push	r24
 152:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <printf>
            retrieval_errors++;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	e8 1a       	sub	r14, r24
 15a:	f8 0a       	sbc	r15, r24
 15c:	8d b7       	in	r24, 0x3d	; 61
 15e:	9e b7       	in	r25, 0x3e	; 62
 160:	08 96       	adiw	r24, 0x08	; 8
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	9e bf       	out	0x3e, r25	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	8d bf       	out	0x3d, r24	; 61
        }
    }
    // Retrieval phase: Check that no values were changed during or after the write phase
    srand(seed);
    // reset the PRNG to the state it had before the write phase
    for (uint16_t i = 0; i < ext_ram_size; i++) {
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	c1 15       	cp	r28, r1
 170:	98 e0       	ldi	r25, 0x08	; 8
 172:	d9 07       	cpc	r29, r25
 174:	e0 f2       	brcs	.-72     	; 0x12e <SRAM_test+0x80>
        if (retreived_value != some_value) {
            printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
            retrieval_errors++;
        }
    }
    printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 176:	ff 92       	push	r15
 178:	ef 92       	push	r14
 17a:	1f 93       	push	r17
 17c:	0f 93       	push	r16
 17e:	8e e9       	ldi	r24, 0x9E	; 158
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	9f 93       	push	r25
 184:	8f 93       	push	r24
 186:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <printf>
}
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <recieve_char_UART>:
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
}

unsigned char recieve_char_UART(){
	while ( !( UCSR0A & (1 << RXC0) ) );/* Wait till data is received */
 1a4:	5f 9b       	sbis	0x0b, 7	; 11
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <recieve_char_UART>
	return(UDR0);			/* Return the byte*/
 1a8:	8c b1       	in	r24, 0x0c	; 12
}
 1aa:	08 95       	ret

000001ac <transmit_char_UART>:

void transmit_char_UART(char letter){
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
 1ac:	5d 9b       	sbis	0x0b, 5	; 11
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <transmit_char_UART>
	UDR0 = letter;
 1b0:	8c b9       	out	0x0c, r24	; 12
 1b2:	08 95       	ret

000001b4 <init_UART>:
 */ 

#include "uart.h"


void init_UART(long BAUD_PRESCALE){
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
	/* Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8); //Baudrate reg
 1b8:	07 2f       	mov	r16, r23
 1ba:	18 2f       	mov	r17, r24
 1bc:	29 2f       	mov	r18, r25
 1be:	33 27       	eor	r19, r19
 1c0:	27 fd       	sbrc	r18, 7
 1c2:	3a 95       	dec	r19
 1c4:	00 bd       	out	0x20, r16	; 32
	UBRR0L = (unsigned char)BAUD_PRESCALE; //Baudrate reg
 1c6:	69 b9       	out	0x09, r22	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1c8:	88 e1       	ldi	r24, 0x18	; 24
 1ca:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 1cc:	8e e8       	ldi	r24, 0x8E	; 142
 1ce:	80 bd       	out	0x20, r24	; 32
}
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <flush_UART>:

void flush_UART( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <flush_UART+0x4>
 1d8:	8c b1       	in	r24, 0x0c	; 12
 1da:	5f 99       	sbic	0x0b, 7	; 11
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <flush_UART+0x2>
}
 1de:	08 95       	ret

000001e0 <main>:


int main(void)
{

	MCUCR |= (1 << SRE);  // Enable external SRAM
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	85 bf       	out	0x35, r24	; 53
	init_UART(BAUD_PRESCALE);
 1e6:	6f e1       	ldi	r22, 0x1F	; 31
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <init_UART>
	flush_UART();
 1f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <flush_UART>
	stdout = &mystdout;
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x3>
 1fe:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end+0x2>
	printf("allahu akbar");
 202:	87 ef       	ldi	r24, 0xF7	; 247
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	9f 93       	push	r25
 208:	8f 93       	push	r24
 20a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <printf>
	SRAM_test();
 20e:	0e 94 57 00 	call	0xae	; 0xae <SRAM_test>
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
	
	
	
}
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	08 95       	ret

0000021c <do_rand>:
 21c:	8f 92       	push	r8
 21e:	9f 92       	push	r9
 220:	af 92       	push	r10
 222:	bf 92       	push	r11
 224:	cf 92       	push	r12
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
 232:	68 81       	ld	r22, Y
 234:	79 81       	ldd	r23, Y+1	; 0x01
 236:	8a 81       	ldd	r24, Y+2	; 0x02
 238:	9b 81       	ldd	r25, Y+3	; 0x03
 23a:	61 15       	cp	r22, r1
 23c:	71 05       	cpc	r23, r1
 23e:	81 05       	cpc	r24, r1
 240:	91 05       	cpc	r25, r1
 242:	21 f4       	brne	.+8      	; 0x24c <do_rand+0x30>
 244:	64 e2       	ldi	r22, 0x24	; 36
 246:	79 ed       	ldi	r23, 0xD9	; 217
 248:	8b e5       	ldi	r24, 0x5B	; 91
 24a:	97 e0       	ldi	r25, 0x07	; 7
 24c:	2d e1       	ldi	r18, 0x1D	; 29
 24e:	33 ef       	ldi	r19, 0xF3	; 243
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	0e 94 41 04 	call	0x882	; 0x882 <__divmodsi4>
 258:	49 01       	movw	r8, r18
 25a:	5a 01       	movw	r10, r20
 25c:	9b 01       	movw	r18, r22
 25e:	ac 01       	movw	r20, r24
 260:	a7 ea       	ldi	r26, 0xA7	; 167
 262:	b1 e4       	ldi	r27, 0x41	; 65
 264:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__muluhisi3>
 268:	6b 01       	movw	r12, r22
 26a:	7c 01       	movw	r14, r24
 26c:	ac ee       	ldi	r26, 0xEC	; 236
 26e:	b4 ef       	ldi	r27, 0xF4	; 244
 270:	a5 01       	movw	r20, r10
 272:	94 01       	movw	r18, r8
 274:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__mulohisi3>
 278:	dc 01       	movw	r26, r24
 27a:	cb 01       	movw	r24, r22
 27c:	8c 0d       	add	r24, r12
 27e:	9d 1d       	adc	r25, r13
 280:	ae 1d       	adc	r26, r14
 282:	bf 1d       	adc	r27, r15
 284:	b7 ff       	sbrs	r27, 7
 286:	03 c0       	rjmp	.+6      	; 0x28e <do_rand+0x72>
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	a1 09       	sbc	r26, r1
 28c:	b0 48       	sbci	r27, 0x80	; 128
 28e:	88 83       	st	Y, r24
 290:	99 83       	std	Y+1, r25	; 0x01
 292:	aa 83       	std	Y+2, r26	; 0x02
 294:	bb 83       	std	Y+3, r27	; 0x03
 296:	9f 77       	andi	r25, 0x7F	; 127
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	bf 90       	pop	r11
 2a6:	af 90       	pop	r10
 2a8:	9f 90       	pop	r9
 2aa:	8f 90       	pop	r8
 2ac:	08 95       	ret

000002ae <rand_r>:
 2ae:	0e 94 0e 01 	call	0x21c	; 0x21c <do_rand>
 2b2:	08 95       	ret

000002b4 <rand>:
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 0e 01 	call	0x21c	; 0x21c <do_rand>
 2bc:	08 95       	ret

000002be <srand>:
 2be:	a0 e0       	ldi	r26, 0x00	; 0
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ca:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2ce:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2d2:	08 95       	ret

000002d4 <printf>:
 2d4:	a0 e0       	ldi	r26, 0x00	; 0
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e0 e7       	ldi	r30, 0x70	; 112
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	0c 94 83 04 	jmp	0x906	; 0x906 <__prologue_saves__+0x20>
 2e0:	ae 01       	movw	r20, r28
 2e2:	4b 5f       	subi	r20, 0xFB	; 251
 2e4:	5f 4f       	sbci	r21, 0xFF	; 255
 2e6:	fa 01       	movw	r30, r20
 2e8:	61 91       	ld	r22, Z+
 2ea:	71 91       	ld	r23, Z+
 2ec:	af 01       	movw	r20, r30
 2ee:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end+0x2>
 2f2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x3>
 2f6:	0e 94 b0 01 	call	0x360	; 0x360 <vfprintf>
 2fa:	e2 e0       	ldi	r30, 0x02	; 2
 2fc:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__epilogue_restores__+0x20>

00000300 <puts>:
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end+0x2>
 30c:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x3>
 310:	23 81       	ldd	r18, Z+3	; 0x03
 312:	21 ff       	sbrs	r18, 1
 314:	1b c0       	rjmp	.+54     	; 0x34c <puts+0x4c>
 316:	8c 01       	movw	r16, r24
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	c0 e0       	ldi	r28, 0x00	; 0
 31c:	f8 01       	movw	r30, r16
 31e:	81 91       	ld	r24, Z+
 320:	8f 01       	movw	r16, r30
 322:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
 326:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
 32a:	db 01       	movw	r26, r22
 32c:	18 96       	adiw	r26, 0x08	; 8
 32e:	ed 91       	ld	r30, X+
 330:	fc 91       	ld	r31, X
 332:	19 97       	sbiw	r26, 0x09	; 9
 334:	88 23       	and	r24, r24
 336:	31 f0       	breq	.+12     	; 0x344 <puts+0x44>
 338:	09 95       	icall
 33a:	89 2b       	or	r24, r25
 33c:	79 f3       	breq	.-34     	; 0x31c <puts+0x1c>
 33e:	df ef       	ldi	r29, 0xFF	; 255
 340:	cf ef       	ldi	r28, 0xFF	; 255
 342:	ec cf       	rjmp	.-40     	; 0x31c <puts+0x1c>
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	09 95       	icall
 348:	89 2b       	or	r24, r25
 34a:	19 f0       	breq	.+6      	; 0x352 <puts+0x52>
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	9f ef       	ldi	r25, 0xFF	; 255
 350:	02 c0       	rjmp	.+4      	; 0x356 <puts+0x56>
 352:	8d 2f       	mov	r24, r29
 354:	9c 2f       	mov	r25, r28
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <vfprintf>:
 360:	ab e0       	ldi	r26, 0x0B	; 11
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	e6 eb       	ldi	r30, 0xB6	; 182
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__prologue_saves__>
 36c:	6c 01       	movw	r12, r24
 36e:	7b 01       	movw	r14, r22
 370:	8a 01       	movw	r16, r20
 372:	fc 01       	movw	r30, r24
 374:	17 82       	std	Z+7, r1	; 0x07
 376:	16 82       	std	Z+6, r1	; 0x06
 378:	83 81       	ldd	r24, Z+3	; 0x03
 37a:	81 ff       	sbrs	r24, 1
 37c:	cc c1       	rjmp	.+920    	; 0x716 <__stack+0x217>
 37e:	ce 01       	movw	r24, r28
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	3c 01       	movw	r6, r24
 384:	f6 01       	movw	r30, r12
 386:	93 81       	ldd	r25, Z+3	; 0x03
 388:	f7 01       	movw	r30, r14
 38a:	93 fd       	sbrc	r25, 3
 38c:	85 91       	lpm	r24, Z+
 38e:	93 ff       	sbrs	r25, 3
 390:	81 91       	ld	r24, Z+
 392:	7f 01       	movw	r14, r30
 394:	88 23       	and	r24, r24
 396:	09 f4       	brne	.+2      	; 0x39a <vfprintf+0x3a>
 398:	ba c1       	rjmp	.+884    	; 0x70e <__stack+0x20f>
 39a:	85 32       	cpi	r24, 0x25	; 37
 39c:	39 f4       	brne	.+14     	; 0x3ac <vfprintf+0x4c>
 39e:	93 fd       	sbrc	r25, 3
 3a0:	85 91       	lpm	r24, Z+
 3a2:	93 ff       	sbrs	r25, 3
 3a4:	81 91       	ld	r24, Z+
 3a6:	7f 01       	movw	r14, r30
 3a8:	85 32       	cpi	r24, 0x25	; 37
 3aa:	29 f4       	brne	.+10     	; 0x3b6 <vfprintf+0x56>
 3ac:	b6 01       	movw	r22, r12
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 a7 03 	call	0x74e	; 0x74e <fputc>
 3b4:	e7 cf       	rjmp	.-50     	; 0x384 <vfprintf+0x24>
 3b6:	91 2c       	mov	r9, r1
 3b8:	21 2c       	mov	r2, r1
 3ba:	31 2c       	mov	r3, r1
 3bc:	ff e1       	ldi	r31, 0x1F	; 31
 3be:	f3 15       	cp	r31, r3
 3c0:	d8 f0       	brcs	.+54     	; 0x3f8 <vfprintf+0x98>
 3c2:	8b 32       	cpi	r24, 0x2B	; 43
 3c4:	79 f0       	breq	.+30     	; 0x3e4 <vfprintf+0x84>
 3c6:	38 f4       	brcc	.+14     	; 0x3d6 <vfprintf+0x76>
 3c8:	80 32       	cpi	r24, 0x20	; 32
 3ca:	79 f0       	breq	.+30     	; 0x3ea <vfprintf+0x8a>
 3cc:	83 32       	cpi	r24, 0x23	; 35
 3ce:	a1 f4       	brne	.+40     	; 0x3f8 <vfprintf+0x98>
 3d0:	23 2d       	mov	r18, r3
 3d2:	20 61       	ori	r18, 0x10	; 16
 3d4:	1d c0       	rjmp	.+58     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 3d6:	8d 32       	cpi	r24, 0x2D	; 45
 3d8:	61 f0       	breq	.+24     	; 0x3f2 <vfprintf+0x92>
 3da:	80 33       	cpi	r24, 0x30	; 48
 3dc:	69 f4       	brne	.+26     	; 0x3f8 <vfprintf+0x98>
 3de:	23 2d       	mov	r18, r3
 3e0:	21 60       	ori	r18, 0x01	; 1
 3e2:	16 c0       	rjmp	.+44     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 3e4:	83 2d       	mov	r24, r3
 3e6:	82 60       	ori	r24, 0x02	; 2
 3e8:	38 2e       	mov	r3, r24
 3ea:	e3 2d       	mov	r30, r3
 3ec:	e4 60       	ori	r30, 0x04	; 4
 3ee:	3e 2e       	mov	r3, r30
 3f0:	2a c0       	rjmp	.+84     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 3f2:	f3 2d       	mov	r31, r3
 3f4:	f8 60       	ori	r31, 0x08	; 8
 3f6:	1d c0       	rjmp	.+58     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 3f8:	37 fc       	sbrc	r3, 7
 3fa:	2d c0       	rjmp	.+90     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 3fc:	20 ed       	ldi	r18, 0xD0	; 208
 3fe:	28 0f       	add	r18, r24
 400:	2a 30       	cpi	r18, 0x0A	; 10
 402:	40 f0       	brcs	.+16     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 404:	8e 32       	cpi	r24, 0x2E	; 46
 406:	b9 f4       	brne	.+46     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 408:	36 fc       	sbrc	r3, 6
 40a:	81 c1       	rjmp	.+770    	; 0x70e <__stack+0x20f>
 40c:	23 2d       	mov	r18, r3
 40e:	20 64       	ori	r18, 0x40	; 64
 410:	32 2e       	mov	r3, r18
 412:	19 c0       	rjmp	.+50     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 414:	36 fe       	sbrs	r3, 6
 416:	06 c0       	rjmp	.+12     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	98 9e       	mul	r9, r24
 41c:	20 0d       	add	r18, r0
 41e:	11 24       	eor	r1, r1
 420:	92 2e       	mov	r9, r18
 422:	11 c0       	rjmp	.+34     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 424:	ea e0       	ldi	r30, 0x0A	; 10
 426:	2e 9e       	mul	r2, r30
 428:	20 0d       	add	r18, r0
 42a:	11 24       	eor	r1, r1
 42c:	22 2e       	mov	r2, r18
 42e:	f3 2d       	mov	r31, r3
 430:	f0 62       	ori	r31, 0x20	; 32
 432:	3f 2e       	mov	r3, r31
 434:	08 c0       	rjmp	.+16     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 436:	8c 36       	cpi	r24, 0x6C	; 108
 438:	21 f4       	brne	.+8      	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 43a:	83 2d       	mov	r24, r3
 43c:	80 68       	ori	r24, 0x80	; 128
 43e:	38 2e       	mov	r3, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 442:	88 36       	cpi	r24, 0x68	; 104
 444:	41 f4       	brne	.+16     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 446:	f7 01       	movw	r30, r14
 448:	93 fd       	sbrc	r25, 3
 44a:	85 91       	lpm	r24, Z+
 44c:	93 ff       	sbrs	r25, 3
 44e:	81 91       	ld	r24, Z+
 450:	7f 01       	movw	r14, r30
 452:	81 11       	cpse	r24, r1
 454:	b3 cf       	rjmp	.-154    	; 0x3bc <vfprintf+0x5c>
 456:	98 2f       	mov	r25, r24
 458:	9f 7d       	andi	r25, 0xDF	; 223
 45a:	95 54       	subi	r25, 0x45	; 69
 45c:	93 30       	cpi	r25, 0x03	; 3
 45e:	28 f4       	brcc	.+10     	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
 460:	0c 5f       	subi	r16, 0xFC	; 252
 462:	1f 4f       	sbci	r17, 0xFF	; 255
 464:	9f e3       	ldi	r25, 0x3F	; 63
 466:	99 83       	std	Y+1, r25	; 0x01
 468:	0d c0       	rjmp	.+26     	; 0x484 <__DATA_REGION_LENGTH__+0x84>
 46a:	83 36       	cpi	r24, 0x63	; 99
 46c:	31 f0       	breq	.+12     	; 0x47a <__DATA_REGION_LENGTH__+0x7a>
 46e:	83 37       	cpi	r24, 0x73	; 115
 470:	71 f0       	breq	.+28     	; 0x48e <__DATA_REGION_LENGTH__+0x8e>
 472:	83 35       	cpi	r24, 0x53	; 83
 474:	09 f0       	breq	.+2      	; 0x478 <__DATA_REGION_LENGTH__+0x78>
 476:	59 c0       	rjmp	.+178    	; 0x52a <__stack+0x2b>
 478:	21 c0       	rjmp	.+66     	; 0x4bc <__DATA_REGION_LENGTH__+0xbc>
 47a:	f8 01       	movw	r30, r16
 47c:	80 81       	ld	r24, Z
 47e:	89 83       	std	Y+1, r24	; 0x01
 480:	0e 5f       	subi	r16, 0xFE	; 254
 482:	1f 4f       	sbci	r17, 0xFF	; 255
 484:	88 24       	eor	r8, r8
 486:	83 94       	inc	r8
 488:	91 2c       	mov	r9, r1
 48a:	53 01       	movw	r10, r6
 48c:	13 c0       	rjmp	.+38     	; 0x4b4 <__DATA_REGION_LENGTH__+0xb4>
 48e:	28 01       	movw	r4, r16
 490:	f2 e0       	ldi	r31, 0x02	; 2
 492:	4f 0e       	add	r4, r31
 494:	51 1c       	adc	r5, r1
 496:	f8 01       	movw	r30, r16
 498:	a0 80       	ld	r10, Z
 49a:	b1 80       	ldd	r11, Z+1	; 0x01
 49c:	36 fe       	sbrs	r3, 6
 49e:	03 c0       	rjmp	.+6      	; 0x4a6 <__DATA_REGION_LENGTH__+0xa6>
 4a0:	69 2d       	mov	r22, r9
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
 4a6:	6f ef       	ldi	r22, 0xFF	; 255
 4a8:	7f ef       	ldi	r23, 0xFF	; 255
 4aa:	c5 01       	movw	r24, r10
 4ac:	0e 94 9c 03 	call	0x738	; 0x738 <strnlen>
 4b0:	4c 01       	movw	r8, r24
 4b2:	82 01       	movw	r16, r4
 4b4:	f3 2d       	mov	r31, r3
 4b6:	ff 77       	andi	r31, 0x7F	; 127
 4b8:	3f 2e       	mov	r3, r31
 4ba:	16 c0       	rjmp	.+44     	; 0x4e8 <__DATA_REGION_LENGTH__+0xe8>
 4bc:	28 01       	movw	r4, r16
 4be:	22 e0       	ldi	r18, 0x02	; 2
 4c0:	42 0e       	add	r4, r18
 4c2:	51 1c       	adc	r5, r1
 4c4:	f8 01       	movw	r30, r16
 4c6:	a0 80       	ld	r10, Z
 4c8:	b1 80       	ldd	r11, Z+1	; 0x01
 4ca:	36 fe       	sbrs	r3, 6
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <__DATA_REGION_LENGTH__+0xd4>
 4ce:	69 2d       	mov	r22, r9
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__DATA_REGION_LENGTH__+0xd8>
 4d4:	6f ef       	ldi	r22, 0xFF	; 255
 4d6:	7f ef       	ldi	r23, 0xFF	; 255
 4d8:	c5 01       	movw	r24, r10
 4da:	0e 94 91 03 	call	0x722	; 0x722 <strnlen_P>
 4de:	4c 01       	movw	r8, r24
 4e0:	f3 2d       	mov	r31, r3
 4e2:	f0 68       	ori	r31, 0x80	; 128
 4e4:	3f 2e       	mov	r3, r31
 4e6:	82 01       	movw	r16, r4
 4e8:	33 fc       	sbrc	r3, 3
 4ea:	1b c0       	rjmp	.+54     	; 0x522 <__stack+0x23>
 4ec:	82 2d       	mov	r24, r2
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	88 16       	cp	r8, r24
 4f2:	99 06       	cpc	r9, r25
 4f4:	b0 f4       	brcc	.+44     	; 0x522 <__stack+0x23>
 4f6:	b6 01       	movw	r22, r12
 4f8:	80 e2       	ldi	r24, 0x20	; 32
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 a7 03 	call	0x74e	; 0x74e <fputc>
 500:	2a 94       	dec	r2
 502:	f4 cf       	rjmp	.-24     	; 0x4ec <__DATA_REGION_LENGTH__+0xec>
 504:	f5 01       	movw	r30, r10
 506:	37 fc       	sbrc	r3, 7
 508:	85 91       	lpm	r24, Z+
 50a:	37 fe       	sbrs	r3, 7
 50c:	81 91       	ld	r24, Z+
 50e:	5f 01       	movw	r10, r30
 510:	b6 01       	movw	r22, r12
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 a7 03 	call	0x74e	; 0x74e <fputc>
 518:	21 10       	cpse	r2, r1
 51a:	2a 94       	dec	r2
 51c:	21 e0       	ldi	r18, 0x01	; 1
 51e:	82 1a       	sub	r8, r18
 520:	91 08       	sbc	r9, r1
 522:	81 14       	cp	r8, r1
 524:	91 04       	cpc	r9, r1
 526:	71 f7       	brne	.-36     	; 0x504 <__stack+0x5>
 528:	e8 c0       	rjmp	.+464    	; 0x6fa <__stack+0x1fb>
 52a:	84 36       	cpi	r24, 0x64	; 100
 52c:	11 f0       	breq	.+4      	; 0x532 <__stack+0x33>
 52e:	89 36       	cpi	r24, 0x69	; 105
 530:	41 f5       	brne	.+80     	; 0x582 <__stack+0x83>
 532:	f8 01       	movw	r30, r16
 534:	37 fe       	sbrs	r3, 7
 536:	07 c0       	rjmp	.+14     	; 0x546 <__stack+0x47>
 538:	60 81       	ld	r22, Z
 53a:	71 81       	ldd	r23, Z+1	; 0x01
 53c:	82 81       	ldd	r24, Z+2	; 0x02
 53e:	93 81       	ldd	r25, Z+3	; 0x03
 540:	0c 5f       	subi	r16, 0xFC	; 252
 542:	1f 4f       	sbci	r17, 0xFF	; 255
 544:	08 c0       	rjmp	.+16     	; 0x556 <__stack+0x57>
 546:	60 81       	ld	r22, Z
 548:	71 81       	ldd	r23, Z+1	; 0x01
 54a:	07 2e       	mov	r0, r23
 54c:	00 0c       	add	r0, r0
 54e:	88 0b       	sbc	r24, r24
 550:	99 0b       	sbc	r25, r25
 552:	0e 5f       	subi	r16, 0xFE	; 254
 554:	1f 4f       	sbci	r17, 0xFF	; 255
 556:	f3 2d       	mov	r31, r3
 558:	ff 76       	andi	r31, 0x6F	; 111
 55a:	3f 2e       	mov	r3, r31
 55c:	97 ff       	sbrs	r25, 7
 55e:	09 c0       	rjmp	.+18     	; 0x572 <__stack+0x73>
 560:	90 95       	com	r25
 562:	80 95       	com	r24
 564:	70 95       	com	r23
 566:	61 95       	neg	r22
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	8f 4f       	sbci	r24, 0xFF	; 255
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	f0 68       	ori	r31, 0x80	; 128
 570:	3f 2e       	mov	r3, r31
 572:	2a e0       	ldi	r18, 0x0A	; 10
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	a3 01       	movw	r20, r6
 578:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__ultoa_invert>
 57c:	88 2e       	mov	r8, r24
 57e:	86 18       	sub	r8, r6
 580:	45 c0       	rjmp	.+138    	; 0x60c <__stack+0x10d>
 582:	85 37       	cpi	r24, 0x75	; 117
 584:	31 f4       	brne	.+12     	; 0x592 <__stack+0x93>
 586:	23 2d       	mov	r18, r3
 588:	2f 7e       	andi	r18, 0xEF	; 239
 58a:	b2 2e       	mov	r11, r18
 58c:	2a e0       	ldi	r18, 0x0A	; 10
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	25 c0       	rjmp	.+74     	; 0x5dc <__stack+0xdd>
 592:	93 2d       	mov	r25, r3
 594:	99 7f       	andi	r25, 0xF9	; 249
 596:	b9 2e       	mov	r11, r25
 598:	8f 36       	cpi	r24, 0x6F	; 111
 59a:	c1 f0       	breq	.+48     	; 0x5cc <__stack+0xcd>
 59c:	18 f4       	brcc	.+6      	; 0x5a4 <__stack+0xa5>
 59e:	88 35       	cpi	r24, 0x58	; 88
 5a0:	79 f0       	breq	.+30     	; 0x5c0 <__stack+0xc1>
 5a2:	b5 c0       	rjmp	.+362    	; 0x70e <__stack+0x20f>
 5a4:	80 37       	cpi	r24, 0x70	; 112
 5a6:	19 f0       	breq	.+6      	; 0x5ae <__stack+0xaf>
 5a8:	88 37       	cpi	r24, 0x78	; 120
 5aa:	21 f0       	breq	.+8      	; 0x5b4 <__stack+0xb5>
 5ac:	b0 c0       	rjmp	.+352    	; 0x70e <__stack+0x20f>
 5ae:	e9 2f       	mov	r30, r25
 5b0:	e0 61       	ori	r30, 0x10	; 16
 5b2:	be 2e       	mov	r11, r30
 5b4:	b4 fe       	sbrs	r11, 4
 5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <__stack+0xd3>
 5b8:	fb 2d       	mov	r31, r11
 5ba:	f4 60       	ori	r31, 0x04	; 4
 5bc:	bf 2e       	mov	r11, r31
 5be:	09 c0       	rjmp	.+18     	; 0x5d2 <__stack+0xd3>
 5c0:	34 fe       	sbrs	r3, 4
 5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <__stack+0xd9>
 5c4:	29 2f       	mov	r18, r25
 5c6:	26 60       	ori	r18, 0x06	; 6
 5c8:	b2 2e       	mov	r11, r18
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <__stack+0xd9>
 5cc:	28 e0       	ldi	r18, 0x08	; 8
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <__stack+0xdd>
 5d2:	20 e1       	ldi	r18, 0x10	; 16
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__stack+0xdd>
 5d8:	20 e1       	ldi	r18, 0x10	; 16
 5da:	32 e0       	ldi	r19, 0x02	; 2
 5dc:	f8 01       	movw	r30, r16
 5de:	b7 fe       	sbrs	r11, 7
 5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <__stack+0xf1>
 5e2:	60 81       	ld	r22, Z
 5e4:	71 81       	ldd	r23, Z+1	; 0x01
 5e6:	82 81       	ldd	r24, Z+2	; 0x02
 5e8:	93 81       	ldd	r25, Z+3	; 0x03
 5ea:	0c 5f       	subi	r16, 0xFC	; 252
 5ec:	1f 4f       	sbci	r17, 0xFF	; 255
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <__stack+0xfd>
 5f0:	60 81       	ld	r22, Z
 5f2:	71 81       	ldd	r23, Z+1	; 0x01
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 5f       	subi	r16, 0xFE	; 254
 5fa:	1f 4f       	sbci	r17, 0xFF	; 255
 5fc:	a3 01       	movw	r20, r6
 5fe:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__ultoa_invert>
 602:	88 2e       	mov	r8, r24
 604:	86 18       	sub	r8, r6
 606:	fb 2d       	mov	r31, r11
 608:	ff 77       	andi	r31, 0x7F	; 127
 60a:	3f 2e       	mov	r3, r31
 60c:	36 fe       	sbrs	r3, 6
 60e:	0d c0       	rjmp	.+26     	; 0x62a <__stack+0x12b>
 610:	23 2d       	mov	r18, r3
 612:	2e 7f       	andi	r18, 0xFE	; 254
 614:	a2 2e       	mov	r10, r18
 616:	89 14       	cp	r8, r9
 618:	58 f4       	brcc	.+22     	; 0x630 <__stack+0x131>
 61a:	34 fe       	sbrs	r3, 4
 61c:	0b c0       	rjmp	.+22     	; 0x634 <__stack+0x135>
 61e:	32 fc       	sbrc	r3, 2
 620:	09 c0       	rjmp	.+18     	; 0x634 <__stack+0x135>
 622:	83 2d       	mov	r24, r3
 624:	8e 7e       	andi	r24, 0xEE	; 238
 626:	a8 2e       	mov	r10, r24
 628:	05 c0       	rjmp	.+10     	; 0x634 <__stack+0x135>
 62a:	b8 2c       	mov	r11, r8
 62c:	a3 2c       	mov	r10, r3
 62e:	03 c0       	rjmp	.+6      	; 0x636 <__stack+0x137>
 630:	b8 2c       	mov	r11, r8
 632:	01 c0       	rjmp	.+2      	; 0x636 <__stack+0x137>
 634:	b9 2c       	mov	r11, r9
 636:	a4 fe       	sbrs	r10, 4
 638:	0f c0       	rjmp	.+30     	; 0x658 <__stack+0x159>
 63a:	fe 01       	movw	r30, r28
 63c:	e8 0d       	add	r30, r8
 63e:	f1 1d       	adc	r31, r1
 640:	80 81       	ld	r24, Z
 642:	80 33       	cpi	r24, 0x30	; 48
 644:	21 f4       	brne	.+8      	; 0x64e <__stack+0x14f>
 646:	9a 2d       	mov	r25, r10
 648:	99 7e       	andi	r25, 0xE9	; 233
 64a:	a9 2e       	mov	r10, r25
 64c:	09 c0       	rjmp	.+18     	; 0x660 <__stack+0x161>
 64e:	a2 fe       	sbrs	r10, 2
 650:	06 c0       	rjmp	.+12     	; 0x65e <__stack+0x15f>
 652:	b3 94       	inc	r11
 654:	b3 94       	inc	r11
 656:	04 c0       	rjmp	.+8      	; 0x660 <__stack+0x161>
 658:	8a 2d       	mov	r24, r10
 65a:	86 78       	andi	r24, 0x86	; 134
 65c:	09 f0       	breq	.+2      	; 0x660 <__stack+0x161>
 65e:	b3 94       	inc	r11
 660:	a3 fc       	sbrc	r10, 3
 662:	11 c0       	rjmp	.+34     	; 0x686 <__stack+0x187>
 664:	a0 fe       	sbrs	r10, 0
 666:	06 c0       	rjmp	.+12     	; 0x674 <__stack+0x175>
 668:	b2 14       	cp	r11, r2
 66a:	88 f4       	brcc	.+34     	; 0x68e <__stack+0x18f>
 66c:	28 0c       	add	r2, r8
 66e:	92 2c       	mov	r9, r2
 670:	9b 18       	sub	r9, r11
 672:	0e c0       	rjmp	.+28     	; 0x690 <__stack+0x191>
 674:	b2 14       	cp	r11, r2
 676:	60 f4       	brcc	.+24     	; 0x690 <__stack+0x191>
 678:	b6 01       	movw	r22, r12
 67a:	80 e2       	ldi	r24, 0x20	; 32
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 a7 03 	call	0x74e	; 0x74e <fputc>
 682:	b3 94       	inc	r11
 684:	f7 cf       	rjmp	.-18     	; 0x674 <__stack+0x175>
 686:	b2 14       	cp	r11, r2
 688:	18 f4       	brcc	.+6      	; 0x690 <__stack+0x191>
 68a:	2b 18       	sub	r2, r11
 68c:	02 c0       	rjmp	.+4      	; 0x692 <__stack+0x193>
 68e:	98 2c       	mov	r9, r8
 690:	21 2c       	mov	r2, r1
 692:	a4 fe       	sbrs	r10, 4
 694:	10 c0       	rjmp	.+32     	; 0x6b6 <__stack+0x1b7>
 696:	b6 01       	movw	r22, r12
 698:	80 e3       	ldi	r24, 0x30	; 48
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 a7 03 	call	0x74e	; 0x74e <fputc>
 6a0:	a2 fe       	sbrs	r10, 2
 6a2:	17 c0       	rjmp	.+46     	; 0x6d2 <__stack+0x1d3>
 6a4:	a1 fc       	sbrc	r10, 1
 6a6:	03 c0       	rjmp	.+6      	; 0x6ae <__stack+0x1af>
 6a8:	88 e7       	ldi	r24, 0x78	; 120
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <__stack+0x1b3>
 6ae:	88 e5       	ldi	r24, 0x58	; 88
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	b6 01       	movw	r22, r12
 6b4:	0c c0       	rjmp	.+24     	; 0x6ce <__stack+0x1cf>
 6b6:	8a 2d       	mov	r24, r10
 6b8:	86 78       	andi	r24, 0x86	; 134
 6ba:	59 f0       	breq	.+22     	; 0x6d2 <__stack+0x1d3>
 6bc:	a1 fe       	sbrs	r10, 1
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__stack+0x1c5>
 6c0:	8b e2       	ldi	r24, 0x2B	; 43
 6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <__stack+0x1c7>
 6c4:	80 e2       	ldi	r24, 0x20	; 32
 6c6:	a7 fc       	sbrc	r10, 7
 6c8:	8d e2       	ldi	r24, 0x2D	; 45
 6ca:	b6 01       	movw	r22, r12
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 a7 03 	call	0x74e	; 0x74e <fputc>
 6d2:	89 14       	cp	r8, r9
 6d4:	38 f4       	brcc	.+14     	; 0x6e4 <__stack+0x1e5>
 6d6:	b6 01       	movw	r22, r12
 6d8:	80 e3       	ldi	r24, 0x30	; 48
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 a7 03 	call	0x74e	; 0x74e <fputc>
 6e0:	9a 94       	dec	r9
 6e2:	f7 cf       	rjmp	.-18     	; 0x6d2 <__stack+0x1d3>
 6e4:	8a 94       	dec	r8
 6e6:	f3 01       	movw	r30, r6
 6e8:	e8 0d       	add	r30, r8
 6ea:	f1 1d       	adc	r31, r1
 6ec:	80 81       	ld	r24, Z
 6ee:	b6 01       	movw	r22, r12
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 a7 03 	call	0x74e	; 0x74e <fputc>
 6f6:	81 10       	cpse	r8, r1
 6f8:	f5 cf       	rjmp	.-22     	; 0x6e4 <__stack+0x1e5>
 6fa:	22 20       	and	r2, r2
 6fc:	09 f4       	brne	.+2      	; 0x700 <__stack+0x201>
 6fe:	42 ce       	rjmp	.-892    	; 0x384 <vfprintf+0x24>
 700:	b6 01       	movw	r22, r12
 702:	80 e2       	ldi	r24, 0x20	; 32
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 a7 03 	call	0x74e	; 0x74e <fputc>
 70a:	2a 94       	dec	r2
 70c:	f6 cf       	rjmp	.-20     	; 0x6fa <__stack+0x1fb>
 70e:	f6 01       	movw	r30, r12
 710:	86 81       	ldd	r24, Z+6	; 0x06
 712:	97 81       	ldd	r25, Z+7	; 0x07
 714:	02 c0       	rjmp	.+4      	; 0x71a <__stack+0x21b>
 716:	8f ef       	ldi	r24, 0xFF	; 255
 718:	9f ef       	ldi	r25, 0xFF	; 255
 71a:	2b 96       	adiw	r28, 0x0b	; 11
 71c:	e2 e1       	ldi	r30, 0x12	; 18
 71e:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__epilogue_restores__>

00000722 <strnlen_P>:
 722:	fc 01       	movw	r30, r24
 724:	05 90       	lpm	r0, Z+
 726:	61 50       	subi	r22, 0x01	; 1
 728:	70 40       	sbci	r23, 0x00	; 0
 72a:	01 10       	cpse	r0, r1
 72c:	d8 f7       	brcc	.-10     	; 0x724 <strnlen_P+0x2>
 72e:	80 95       	com	r24
 730:	90 95       	com	r25
 732:	8e 0f       	add	r24, r30
 734:	9f 1f       	adc	r25, r31
 736:	08 95       	ret

00000738 <strnlen>:
 738:	fc 01       	movw	r30, r24
 73a:	61 50       	subi	r22, 0x01	; 1
 73c:	70 40       	sbci	r23, 0x00	; 0
 73e:	01 90       	ld	r0, Z+
 740:	01 10       	cpse	r0, r1
 742:	d8 f7       	brcc	.-10     	; 0x73a <strnlen+0x2>
 744:	80 95       	com	r24
 746:	90 95       	com	r25
 748:	8e 0f       	add	r24, r30
 74a:	9f 1f       	adc	r25, r31
 74c:	08 95       	ret

0000074e <fputc>:
 74e:	0f 93       	push	r16
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	fb 01       	movw	r30, r22
 758:	23 81       	ldd	r18, Z+3	; 0x03
 75a:	21 fd       	sbrc	r18, 1
 75c:	03 c0       	rjmp	.+6      	; 0x764 <fputc+0x16>
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	9f ef       	ldi	r25, 0xFF	; 255
 762:	2c c0       	rjmp	.+88     	; 0x7bc <fputc+0x6e>
 764:	22 ff       	sbrs	r18, 2
 766:	16 c0       	rjmp	.+44     	; 0x794 <fputc+0x46>
 768:	46 81       	ldd	r20, Z+6	; 0x06
 76a:	57 81       	ldd	r21, Z+7	; 0x07
 76c:	24 81       	ldd	r18, Z+4	; 0x04
 76e:	35 81       	ldd	r19, Z+5	; 0x05
 770:	42 17       	cp	r20, r18
 772:	53 07       	cpc	r21, r19
 774:	44 f4       	brge	.+16     	; 0x786 <fputc+0x38>
 776:	a0 81       	ld	r26, Z
 778:	b1 81       	ldd	r27, Z+1	; 0x01
 77a:	9d 01       	movw	r18, r26
 77c:	2f 5f       	subi	r18, 0xFF	; 255
 77e:	3f 4f       	sbci	r19, 0xFF	; 255
 780:	31 83       	std	Z+1, r19	; 0x01
 782:	20 83       	st	Z, r18
 784:	8c 93       	st	X, r24
 786:	26 81       	ldd	r18, Z+6	; 0x06
 788:	37 81       	ldd	r19, Z+7	; 0x07
 78a:	2f 5f       	subi	r18, 0xFF	; 255
 78c:	3f 4f       	sbci	r19, 0xFF	; 255
 78e:	37 83       	std	Z+7, r19	; 0x07
 790:	26 83       	std	Z+6, r18	; 0x06
 792:	14 c0       	rjmp	.+40     	; 0x7bc <fputc+0x6e>
 794:	8b 01       	movw	r16, r22
 796:	ec 01       	movw	r28, r24
 798:	fb 01       	movw	r30, r22
 79a:	00 84       	ldd	r0, Z+8	; 0x08
 79c:	f1 85       	ldd	r31, Z+9	; 0x09
 79e:	e0 2d       	mov	r30, r0
 7a0:	09 95       	icall
 7a2:	89 2b       	or	r24, r25
 7a4:	e1 f6       	brne	.-72     	; 0x75e <fputc+0x10>
 7a6:	d8 01       	movw	r26, r16
 7a8:	16 96       	adiw	r26, 0x06	; 6
 7aa:	8d 91       	ld	r24, X+
 7ac:	9c 91       	ld	r25, X
 7ae:	17 97       	sbiw	r26, 0x07	; 7
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	17 96       	adiw	r26, 0x07	; 7
 7b4:	9c 93       	st	X, r25
 7b6:	8e 93       	st	-X, r24
 7b8:	16 97       	sbiw	r26, 0x06	; 6
 7ba:	ce 01       	movw	r24, r28
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	1f 91       	pop	r17
 7c2:	0f 91       	pop	r16
 7c4:	08 95       	ret

000007c6 <__ultoa_invert>:
 7c6:	fa 01       	movw	r30, r20
 7c8:	aa 27       	eor	r26, r26
 7ca:	28 30       	cpi	r18, 0x08	; 8
 7cc:	51 f1       	breq	.+84     	; 0x822 <__ultoa_invert+0x5c>
 7ce:	20 31       	cpi	r18, 0x10	; 16
 7d0:	81 f1       	breq	.+96     	; 0x832 <__ultoa_invert+0x6c>
 7d2:	e8 94       	clt
 7d4:	6f 93       	push	r22
 7d6:	6e 7f       	andi	r22, 0xFE	; 254
 7d8:	6e 5f       	subi	r22, 0xFE	; 254
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	af 4f       	sbci	r26, 0xFF	; 255
 7e2:	b1 e0       	ldi	r27, 0x01	; 1
 7e4:	3e d0       	rcall	.+124    	; 0x862 <__ultoa_invert+0x9c>
 7e6:	b4 e0       	ldi	r27, 0x04	; 4
 7e8:	3c d0       	rcall	.+120    	; 0x862 <__ultoa_invert+0x9c>
 7ea:	67 0f       	add	r22, r23
 7ec:	78 1f       	adc	r23, r24
 7ee:	89 1f       	adc	r24, r25
 7f0:	9a 1f       	adc	r25, r26
 7f2:	a1 1d       	adc	r26, r1
 7f4:	68 0f       	add	r22, r24
 7f6:	79 1f       	adc	r23, r25
 7f8:	8a 1f       	adc	r24, r26
 7fa:	91 1d       	adc	r25, r1
 7fc:	a1 1d       	adc	r26, r1
 7fe:	6a 0f       	add	r22, r26
 800:	71 1d       	adc	r23, r1
 802:	81 1d       	adc	r24, r1
 804:	91 1d       	adc	r25, r1
 806:	a1 1d       	adc	r26, r1
 808:	20 d0       	rcall	.+64     	; 0x84a <__ultoa_invert+0x84>
 80a:	09 f4       	brne	.+2      	; 0x80e <__ultoa_invert+0x48>
 80c:	68 94       	set
 80e:	3f 91       	pop	r19
 810:	2a e0       	ldi	r18, 0x0A	; 10
 812:	26 9f       	mul	r18, r22
 814:	11 24       	eor	r1, r1
 816:	30 19       	sub	r19, r0
 818:	30 5d       	subi	r19, 0xD0	; 208
 81a:	31 93       	st	Z+, r19
 81c:	de f6       	brtc	.-74     	; 0x7d4 <__ultoa_invert+0xe>
 81e:	cf 01       	movw	r24, r30
 820:	08 95       	ret
 822:	46 2f       	mov	r20, r22
 824:	47 70       	andi	r20, 0x07	; 7
 826:	40 5d       	subi	r20, 0xD0	; 208
 828:	41 93       	st	Z+, r20
 82a:	b3 e0       	ldi	r27, 0x03	; 3
 82c:	0f d0       	rcall	.+30     	; 0x84c <__ultoa_invert+0x86>
 82e:	c9 f7       	brne	.-14     	; 0x822 <__ultoa_invert+0x5c>
 830:	f6 cf       	rjmp	.-20     	; 0x81e <__ultoa_invert+0x58>
 832:	46 2f       	mov	r20, r22
 834:	4f 70       	andi	r20, 0x0F	; 15
 836:	40 5d       	subi	r20, 0xD0	; 208
 838:	4a 33       	cpi	r20, 0x3A	; 58
 83a:	18 f0       	brcs	.+6      	; 0x842 <__ultoa_invert+0x7c>
 83c:	49 5d       	subi	r20, 0xD9	; 217
 83e:	31 fd       	sbrc	r19, 1
 840:	40 52       	subi	r20, 0x20	; 32
 842:	41 93       	st	Z+, r20
 844:	02 d0       	rcall	.+4      	; 0x84a <__ultoa_invert+0x84>
 846:	a9 f7       	brne	.-22     	; 0x832 <__ultoa_invert+0x6c>
 848:	ea cf       	rjmp	.-44     	; 0x81e <__ultoa_invert+0x58>
 84a:	b4 e0       	ldi	r27, 0x04	; 4
 84c:	a6 95       	lsr	r26
 84e:	97 95       	ror	r25
 850:	87 95       	ror	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	ba 95       	dec	r27
 858:	c9 f7       	brne	.-14     	; 0x84c <__ultoa_invert+0x86>
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	61 05       	cpc	r22, r1
 85e:	71 05       	cpc	r23, r1
 860:	08 95       	ret
 862:	9b 01       	movw	r18, r22
 864:	ac 01       	movw	r20, r24
 866:	0a 2e       	mov	r0, r26
 868:	06 94       	lsr	r0
 86a:	57 95       	ror	r21
 86c:	47 95       	ror	r20
 86e:	37 95       	ror	r19
 870:	27 95       	ror	r18
 872:	ba 95       	dec	r27
 874:	c9 f7       	brne	.-14     	; 0x868 <__ultoa_invert+0xa2>
 876:	62 0f       	add	r22, r18
 878:	73 1f       	adc	r23, r19
 87a:	84 1f       	adc	r24, r20
 87c:	95 1f       	adc	r25, r21
 87e:	a0 1d       	adc	r26, r0
 880:	08 95       	ret

00000882 <__divmodsi4>:
 882:	05 2e       	mov	r0, r21
 884:	97 fb       	bst	r25, 7
 886:	1e f4       	brtc	.+6      	; 0x88e <__divmodsi4+0xc>
 888:	00 94       	com	r0
 88a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__negsi2>
 88e:	57 fd       	sbrc	r21, 7
 890:	07 d0       	rcall	.+14     	; 0x8a0 <__divmodsi4_neg2>
 892:	0e 94 aa 04 	call	0x954	; 0x954 <__udivmodsi4>
 896:	07 fc       	sbrc	r0, 7
 898:	03 d0       	rcall	.+6      	; 0x8a0 <__divmodsi4_neg2>
 89a:	4e f4       	brtc	.+18     	; 0x8ae <__divmodsi4_exit>
 89c:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__negsi2>

000008a0 <__divmodsi4_neg2>:
 8a0:	50 95       	com	r21
 8a2:	40 95       	com	r20
 8a4:	30 95       	com	r19
 8a6:	21 95       	neg	r18
 8a8:	3f 4f       	sbci	r19, 0xFF	; 255
 8aa:	4f 4f       	sbci	r20, 0xFF	; 255
 8ac:	5f 4f       	sbci	r21, 0xFF	; 255

000008ae <__divmodsi4_exit>:
 8ae:	08 95       	ret

000008b0 <__negsi2>:
 8b0:	90 95       	com	r25
 8b2:	80 95       	com	r24
 8b4:	70 95       	com	r23
 8b6:	61 95       	neg	r22
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	08 95       	ret

000008c0 <__muluhisi3>:
 8c0:	0e 94 cc 04 	call	0x998	; 0x998 <__umulhisi3>
 8c4:	a5 9f       	mul	r26, r21
 8c6:	90 0d       	add	r25, r0
 8c8:	b4 9f       	mul	r27, r20
 8ca:	90 0d       	add	r25, r0
 8cc:	a4 9f       	mul	r26, r20
 8ce:	80 0d       	add	r24, r0
 8d0:	91 1d       	adc	r25, r1
 8d2:	11 24       	eor	r1, r1
 8d4:	08 95       	ret

000008d6 <__mulshisi3>:
 8d6:	b7 ff       	sbrs	r27, 7
 8d8:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__muluhisi3>

000008dc <__mulohisi3>:
 8dc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__muluhisi3>
 8e0:	82 1b       	sub	r24, r18
 8e2:	93 0b       	sbc	r25, r19
 8e4:	08 95       	ret

000008e6 <__prologue_saves__>:
 8e6:	2f 92       	push	r2
 8e8:	3f 92       	push	r3
 8ea:	4f 92       	push	r4
 8ec:	5f 92       	push	r5
 8ee:	6f 92       	push	r6
 8f0:	7f 92       	push	r7
 8f2:	8f 92       	push	r8
 8f4:	9f 92       	push	r9
 8f6:	af 92       	push	r10
 8f8:	bf 92       	push	r11
 8fa:	cf 92       	push	r12
 8fc:	df 92       	push	r13
 8fe:	ef 92       	push	r14
 900:	ff 92       	push	r15
 902:	0f 93       	push	r16
 904:	1f 93       	push	r17
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
 90e:	ca 1b       	sub	r28, r26
 910:	db 0b       	sbc	r29, r27
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	f8 94       	cli
 916:	de bf       	out	0x3e, r29	; 62
 918:	0f be       	out	0x3f, r0	; 63
 91a:	cd bf       	out	0x3d, r28	; 61
 91c:	09 94       	ijmp

0000091e <__epilogue_restores__>:
 91e:	2a 88       	ldd	r2, Y+18	; 0x12
 920:	39 88       	ldd	r3, Y+17	; 0x11
 922:	48 88       	ldd	r4, Y+16	; 0x10
 924:	5f 84       	ldd	r5, Y+15	; 0x0f
 926:	6e 84       	ldd	r6, Y+14	; 0x0e
 928:	7d 84       	ldd	r7, Y+13	; 0x0d
 92a:	8c 84       	ldd	r8, Y+12	; 0x0c
 92c:	9b 84       	ldd	r9, Y+11	; 0x0b
 92e:	aa 84       	ldd	r10, Y+10	; 0x0a
 930:	b9 84       	ldd	r11, Y+9	; 0x09
 932:	c8 84       	ldd	r12, Y+8	; 0x08
 934:	df 80       	ldd	r13, Y+7	; 0x07
 936:	ee 80       	ldd	r14, Y+6	; 0x06
 938:	fd 80       	ldd	r15, Y+5	; 0x05
 93a:	0c 81       	ldd	r16, Y+4	; 0x04
 93c:	1b 81       	ldd	r17, Y+3	; 0x03
 93e:	aa 81       	ldd	r26, Y+2	; 0x02
 940:	b9 81       	ldd	r27, Y+1	; 0x01
 942:	ce 0f       	add	r28, r30
 944:	d1 1d       	adc	r29, r1
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	f8 94       	cli
 94a:	de bf       	out	0x3e, r29	; 62
 94c:	0f be       	out	0x3f, r0	; 63
 94e:	cd bf       	out	0x3d, r28	; 61
 950:	ed 01       	movw	r28, r26
 952:	08 95       	ret

00000954 <__udivmodsi4>:
 954:	a1 e2       	ldi	r26, 0x21	; 33
 956:	1a 2e       	mov	r1, r26
 958:	aa 1b       	sub	r26, r26
 95a:	bb 1b       	sub	r27, r27
 95c:	fd 01       	movw	r30, r26
 95e:	0d c0       	rjmp	.+26     	; 0x97a <__udivmodsi4_ep>

00000960 <__udivmodsi4_loop>:
 960:	aa 1f       	adc	r26, r26
 962:	bb 1f       	adc	r27, r27
 964:	ee 1f       	adc	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	a2 17       	cp	r26, r18
 96a:	b3 07       	cpc	r27, r19
 96c:	e4 07       	cpc	r30, r20
 96e:	f5 07       	cpc	r31, r21
 970:	20 f0       	brcs	.+8      	; 0x97a <__udivmodsi4_ep>
 972:	a2 1b       	sub	r26, r18
 974:	b3 0b       	sbc	r27, r19
 976:	e4 0b       	sbc	r30, r20
 978:	f5 0b       	sbc	r31, r21

0000097a <__udivmodsi4_ep>:
 97a:	66 1f       	adc	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	1a 94       	dec	r1
 984:	69 f7       	brne	.-38     	; 0x960 <__udivmodsi4_loop>
 986:	60 95       	com	r22
 988:	70 95       	com	r23
 98a:	80 95       	com	r24
 98c:	90 95       	com	r25
 98e:	9b 01       	movw	r18, r22
 990:	ac 01       	movw	r20, r24
 992:	bd 01       	movw	r22, r26
 994:	cf 01       	movw	r24, r30
 996:	08 95       	ret

00000998 <__umulhisi3>:
 998:	a2 9f       	mul	r26, r18
 99a:	b0 01       	movw	r22, r0
 99c:	b3 9f       	mul	r27, r19
 99e:	c0 01       	movw	r24, r0
 9a0:	a3 9f       	mul	r26, r19
 9a2:	70 0d       	add	r23, r0
 9a4:	81 1d       	adc	r24, r1
 9a6:	11 24       	eor	r1, r1
 9a8:	91 1d       	adc	r25, r1
 9aa:	b2 9f       	mul	r27, r18
 9ac:	70 0d       	add	r23, r0
 9ae:	81 1d       	adc	r24, r1
 9b0:	11 24       	eor	r1, r1
 9b2:	91 1d       	adc	r25, r1
 9b4:	08 95       	ret

000009b6 <_exit>:
 9b6:	f8 94       	cli

000009b8 <__stop_program>:
 9b8:	ff cf       	rjmp	.-2      	; 0x9b8 <__stop_program>
