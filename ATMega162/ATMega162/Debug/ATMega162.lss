
ATMega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000104  00800100  000009ec  00000a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800204  00800204  00000b84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9a  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a53  00000000  00000000  00001a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062e  00000000  00000000  00002499  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000494  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bb  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000336b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ee       	ldi	r30, 0xEC	; 236
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 30       	cpi	r26, 0x0A	; 10
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 09 01 	call	0x212	; 0x212 <main>
  a6:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <reverse_bits>:
 */ 

#include "sram.h"

// Function to reverse bits in a 8-bit value
uint8_t reverse_bits(uint8_t num) {
  ae:	28 2f       	mov	r18, r24
    uint8_t rev = 0;
    for (uint8_t i = 0; i < 8; i++) {
  b0:	90 e0       	ldi	r25, 0x00	; 0

#include "sram.h"

// Function to reverse bits in a 8-bit value
uint8_t reverse_bits(uint8_t num) {
    uint8_t rev = 0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++) {
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <reverse_bits+0x14>
        rev <<= 1;
  b6:	88 0f       	add	r24, r24
        rev |= (num & 1);
  b8:	32 2f       	mov	r19, r18
  ba:	31 70       	andi	r19, 0x01	; 1
  bc:	83 2b       	or	r24, r19
        num >>= 1;
  be:	26 95       	lsr	r18
#include "sram.h"

// Function to reverse bits in a 8-bit value
uint8_t reverse_bits(uint8_t num) {
    uint8_t rev = 0;
    for (uint8_t i = 0; i < 8; i++) {
  c0:	9f 5f       	subi	r25, 0xFF	; 255
  c2:	98 30       	cpi	r25, 0x08	; 8
  c4:	c0 f3       	brcs	.-16     	; 0xb6 <reverse_bits+0x8>
        rev <<= 1;
        rev |= (num & 1);
        num >>= 1;
    }
    return rev;
}
  c6:	08 95       	ret

000000c8 <SRAM_test>:


void SRAM_test(void) {
  c8:	df 92       	push	r13
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
    volatile char *ext_ram = (char *) 0x1800;  // Start address for the SRAM
    uint16_t ext_ram_size = 0x800;
    uint16_t write_errors = 0;
    uint16_t retrieval_errors = 0;
    printf("Starting SRAM test...\n");
  d6:	82 e1       	ldi	r24, 0x12	; 18
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 99 01 	call	0x332	; 0x332 <puts>

    uint16_t seed = rand();
  de:	0e 94 73 01 	call	0x2e6	; 0x2e6 <rand>
  e2:	7c 01       	movw	r14, r24
    srand(seed);
  e4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <srand>

    // Write phase: immediately check that the correct value was stored
    for (uint16_t i = 0; i < ext_ram_size; i++) {
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	d0 e0       	ldi	r29, 0x00	; 0


void SRAM_test(void) {
    volatile char *ext_ram = (char *) 0x1800;  // Start address for the SRAM
    uint16_t ext_ram_size = 0x800;
    uint16_t write_errors = 0;
  ec:	00 e0       	ldi	r16, 0x00	; 0
  ee:	10 e0       	ldi	r17, 0x00	; 0

    uint16_t seed = rand();
    srand(seed);

    // Write phase: immediately check that the correct value was stored
    for (uint16_t i = 0; i < ext_ram_size; i++) {
  f0:	25 c0       	rjmp	.+74     	; 0x13c <SRAM_test+0x74>
        uint8_t reversed_index = reverse_bits(i);  // Reverse the address bits
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 57 00 	call	0xae	; 0xae <reverse_bits>
  f8:	d8 2e       	mov	r13, r24
        uint8_t some_value = rand();
  fa:	0e 94 73 01 	call	0x2e6	; 0x2e6 <rand>
        ext_ram[reversed_index] = some_value;
  fe:	ed 2d       	mov	r30, r13
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	f8 5e       	subi	r31, 0xE8	; 232
 104:	80 83       	st	Z, r24
        uint8_t retreived_value = ext_ram[reversed_index];
 106:	20 81       	ld	r18, Z
        if (retreived_value != some_value) {
 108:	28 17       	cp	r18, r24
 10a:	b9 f0       	breq	.+46     	; 0x13a <SRAM_test+0x72>
            printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", reversed_index, retreived_value, some_value);
 10c:	99 27       	eor	r25, r25
 10e:	9f 93       	push	r25
 110:	8f 93       	push	r24
 112:	1f 92       	push	r1
 114:	2f 93       	push	r18
 116:	1f 92       	push	r1
 118:	df 92       	push	r13
 11a:	88 e2       	ldi	r24, 0x28	; 40
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	9f 93       	push	r25
 120:	8f 93       	push	r24
 122:	0e 94 83 01 	call	0x306	; 0x306 <printf>
            write_errors++;
 126:	0f 5f       	subi	r16, 0xFF	; 255
 128:	1f 4f       	sbci	r17, 0xFF	; 255
 12a:	8d b7       	in	r24, 0x3d	; 61
 12c:	9e b7       	in	r25, 0x3e	; 62
 12e:	08 96       	adiw	r24, 0x08	; 8
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	9e bf       	out	0x3e, r25	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	8d bf       	out	0x3d, r24	; 61

    uint16_t seed = rand();
    srand(seed);

    // Write phase: immediately check that the correct value was stored
    for (uint16_t i = 0; i < ext_ram_size; i++) {
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	c1 15       	cp	r28, r1
 13e:	98 e0       	ldi	r25, 0x08	; 8
 140:	d9 07       	cpc	r29, r25
 142:	b8 f2       	brcs	.-82     	; 0xf2 <SRAM_test+0x2a>
            write_errors++;
        }
    }

    // Retrieval phase: check that no values were changed
    srand(seed);  // Reset the PRNG to the state it had before the write phase
 144:	c7 01       	movw	r24, r14
 146:	0e 94 78 01 	call	0x2f0	; 0x2f0 <srand>
    for (uint16_t i = 0; i < ext_ram_size; i++) {
 14a:	c0 e0       	ldi	r28, 0x00	; 0
 14c:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
    volatile char *ext_ram = (char *) 0x1800;  // Start address for the SRAM
    uint16_t ext_ram_size = 0x800;
    uint16_t write_errors = 0;
    uint16_t retrieval_errors = 0;
 14e:	e1 2c       	mov	r14, r1
 150:	f1 2c       	mov	r15, r1
        }
    }

    // Retrieval phase: check that no values were changed
    srand(seed);  // Reset the PRNG to the state it had before the write phase
    for (uint16_t i = 0; i < ext_ram_size; i++) {
 152:	25 c0       	rjmp	.+74     	; 0x19e <SRAM_test+0xd6>
        uint8_t reversed_index = reverse_bits(i);  // Reverse the address bits
 154:	8c 2f       	mov	r24, r28
 156:	0e 94 57 00 	call	0xae	; 0xae <reverse_bits>
 15a:	d8 2e       	mov	r13, r24
        uint8_t some_value = rand();
 15c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <rand>
        uint8_t retreived_value = ext_ram[reversed_index];
 160:	ed 2d       	mov	r30, r13
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	f8 5e       	subi	r31, 0xE8	; 232
 166:	20 81       	ld	r18, Z
        if (retreived_value != some_value) {
 168:	28 17       	cp	r18, r24
 16a:	c1 f0       	breq	.+48     	; 0x19c <SRAM_test+0xd4>
            printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", reversed_index, retreived_value, some_value);
 16c:	99 27       	eor	r25, r25
 16e:	9f 93       	push	r25
 170:	8f 93       	push	r24
 172:	1f 92       	push	r1
 174:	2f 93       	push	r18
 176:	1f 92       	push	r1
 178:	df 92       	push	r13
 17a:	81 e6       	ldi	r24, 0x61	; 97
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	9f 93       	push	r25
 180:	8f 93       	push	r24
 182:	0e 94 83 01 	call	0x306	; 0x306 <printf>
            retrieval_errors++;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	e8 1a       	sub	r14, r24
 18a:	f8 0a       	sbc	r15, r24
 18c:	8d b7       	in	r24, 0x3d	; 61
 18e:	9e b7       	in	r25, 0x3e	; 62
 190:	08 96       	adiw	r24, 0x08	; 8
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	9e bf       	out	0x3e, r25	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	8d bf       	out	0x3d, r24	; 61
        }
    }

    // Retrieval phase: check that no values were changed
    srand(seed);  // Reset the PRNG to the state it had before the write phase
    for (uint16_t i = 0; i < ext_ram_size; i++) {
 19c:	21 96       	adiw	r28, 0x01	; 1
 19e:	c1 15       	cp	r28, r1
 1a0:	98 e0       	ldi	r25, 0x08	; 8
 1a2:	d9 07       	cpc	r29, r25
 1a4:	b8 f2       	brcs	.-82     	; 0x154 <SRAM_test+0x8c>
            printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", reversed_index, retreived_value, some_value);
            retrieval_errors++;
        }
    }

    printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 1a6:	ff 92       	push	r15
 1a8:	ef 92       	push	r14
 1aa:	1f 93       	push	r17
 1ac:	0f 93       	push	r16
 1ae:	8e e9       	ldi	r24, 0x9E	; 158
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	9f 93       	push	r25
 1b4:	8f 93       	push	r24
 1b6:	0e 94 83 01 	call	0x306	; 0x306 <printf>
}
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	08 95       	ret

000001d6 <recieve_char_UART>:
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
}

unsigned char recieve_char_UART(){
	while ( !( UCSR0A & (1 << RXC0) ) );/* Wait till data is received */
 1d6:	5f 9b       	sbis	0x0b, 7	; 11
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <recieve_char_UART>
	return(UDR0);			/* Return the byte*/
 1da:	8c b1       	in	r24, 0x0c	; 12
}
 1dc:	08 95       	ret

000001de <transmit_char_UART>:

void transmit_char_UART(char letter){
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
 1de:	5d 9b       	sbis	0x0b, 5	; 11
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <transmit_char_UART>
	UDR0 = letter;
 1e2:	8c b9       	out	0x0c, r24	; 12
 1e4:	08 95       	ret

000001e6 <init_UART>:
 */ 

#include "uart.h"


void init_UART(long BAUD_PRESCALE){
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
	/* Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8); //Baudrate reg
 1ea:	07 2f       	mov	r16, r23
 1ec:	18 2f       	mov	r17, r24
 1ee:	29 2f       	mov	r18, r25
 1f0:	33 27       	eor	r19, r19
 1f2:	27 fd       	sbrc	r18, 7
 1f4:	3a 95       	dec	r19
 1f6:	00 bd       	out	0x20, r16	; 32
	UBRR0L = (unsigned char)BAUD_PRESCALE; //Baudrate reg
 1f8:	69 b9       	out	0x09, r22	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1fa:	88 e1       	ldi	r24, 0x18	; 24
 1fc:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 1fe:	8e e8       	ldi	r24, 0x8E	; 142
 200:	80 bd       	out	0x20, r24	; 32
}
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <flush_UART>:

void flush_UART( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
 208:	01 c0       	rjmp	.+2      	; 0x20c <flush_UART+0x4>
 20a:	8c b1       	in	r24, 0x0c	; 12
 20c:	5f 99       	sbic	0x0b, 7	; 11
 20e:	fd cf       	rjmp	.-6      	; 0x20a <flush_UART+0x2>
}
 210:	08 95       	ret

00000212 <main>:


int main(void)
{

	MCUCR |= (1 << SRE);  // Enable external SRAM
 212:	85 b7       	in	r24, 0x35	; 53
 214:	80 68       	ori	r24, 0x80	; 128
 216:	85 bf       	out	0x35, r24	; 53
	init_UART(BAUD_PRESCALE);
 218:	6f e1       	ldi	r22, 0x1F	; 31
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <init_UART>
	flush_UART();
 224:	0e 94 04 01 	call	0x208	; 0x208 <flush_UART>
	stdout = &mystdout;
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x3>
 230:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end+0x2>
	printf("allahu akbar");
 234:	87 ef       	ldi	r24, 0xF7	; 247
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	9f 93       	push	r25
 23a:	8f 93       	push	r24
 23c:	0e 94 83 01 	call	0x306	; 0x306 <printf>
	SRAM_test();
 240:	0e 94 64 00 	call	0xc8	; 0xc8 <SRAM_test>
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
	
	
	
}
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	08 95       	ret

0000024e <do_rand>:
 24e:	8f 92       	push	r8
 250:	9f 92       	push	r9
 252:	af 92       	push	r10
 254:	bf 92       	push	r11
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
 264:	68 81       	ld	r22, Y
 266:	79 81       	ldd	r23, Y+1	; 0x01
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	9b 81       	ldd	r25, Y+3	; 0x03
 26c:	61 15       	cp	r22, r1
 26e:	71 05       	cpc	r23, r1
 270:	81 05       	cpc	r24, r1
 272:	91 05       	cpc	r25, r1
 274:	21 f4       	brne	.+8      	; 0x27e <do_rand+0x30>
 276:	64 e2       	ldi	r22, 0x24	; 36
 278:	79 ed       	ldi	r23, 0xD9	; 217
 27a:	8b e5       	ldi	r24, 0x5B	; 91
 27c:	97 e0       	ldi	r25, 0x07	; 7
 27e:	2d e1       	ldi	r18, 0x1D	; 29
 280:	33 ef       	ldi	r19, 0xF3	; 243
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodsi4>
 28a:	49 01       	movw	r8, r18
 28c:	5a 01       	movw	r10, r20
 28e:	9b 01       	movw	r18, r22
 290:	ac 01       	movw	r20, r24
 292:	a7 ea       	ldi	r26, 0xA7	; 167
 294:	b1 e4       	ldi	r27, 0x41	; 65
 296:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__muluhisi3>
 29a:	6b 01       	movw	r12, r22
 29c:	7c 01       	movw	r14, r24
 29e:	ac ee       	ldi	r26, 0xEC	; 236
 2a0:	b4 ef       	ldi	r27, 0xF4	; 244
 2a2:	a5 01       	movw	r20, r10
 2a4:	94 01       	movw	r18, r8
 2a6:	0e 94 87 04 	call	0x90e	; 0x90e <__mulohisi3>
 2aa:	dc 01       	movw	r26, r24
 2ac:	cb 01       	movw	r24, r22
 2ae:	8c 0d       	add	r24, r12
 2b0:	9d 1d       	adc	r25, r13
 2b2:	ae 1d       	adc	r26, r14
 2b4:	bf 1d       	adc	r27, r15
 2b6:	b7 ff       	sbrs	r27, 7
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <do_rand+0x72>
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	a1 09       	sbc	r26, r1
 2be:	b0 48       	sbci	r27, 0x80	; 128
 2c0:	88 83       	st	Y, r24
 2c2:	99 83       	std	Y+1, r25	; 0x01
 2c4:	aa 83       	std	Y+2, r26	; 0x02
 2c6:	bb 83       	std	Y+3, r27	; 0x03
 2c8:	9f 77       	andi	r25, 0x7F	; 127
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	bf 90       	pop	r11
 2d8:	af 90       	pop	r10
 2da:	9f 90       	pop	r9
 2dc:	8f 90       	pop	r8
 2de:	08 95       	ret

000002e0 <rand_r>:
 2e0:	0e 94 27 01 	call	0x24e	; 0x24e <do_rand>
 2e4:	08 95       	ret

000002e6 <rand>:
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 27 01 	call	0x24e	; 0x24e <do_rand>
 2ee:	08 95       	ret

000002f0 <srand>:
 2f0:	a0 e0       	ldi	r26, 0x00	; 0
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2fc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 300:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 304:	08 95       	ret

00000306 <printf>:
 306:	a0 e0       	ldi	r26, 0x00	; 0
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e9 e8       	ldi	r30, 0x89	; 137
 30c:	f1 e0       	ldi	r31, 0x01	; 1
 30e:	0c 94 9c 04 	jmp	0x938	; 0x938 <__prologue_saves__+0x20>
 312:	ae 01       	movw	r20, r28
 314:	4b 5f       	subi	r20, 0xFB	; 251
 316:	5f 4f       	sbci	r21, 0xFF	; 255
 318:	fa 01       	movw	r30, r20
 31a:	61 91       	ld	r22, Z+
 31c:	71 91       	ld	r23, Z+
 31e:	af 01       	movw	r20, r30
 320:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end+0x2>
 324:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x3>
 328:	0e 94 c9 01 	call	0x392	; 0x392 <vfprintf>
 32c:	e2 e0       	ldi	r30, 0x02	; 2
 32e:	0c 94 b8 04 	jmp	0x970	; 0x970 <__epilogue_restores__+0x20>

00000332 <puts>:
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end+0x2>
 33e:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x3>
 342:	23 81       	ldd	r18, Z+3	; 0x03
 344:	21 ff       	sbrs	r18, 1
 346:	1b c0       	rjmp	.+54     	; 0x37e <puts+0x4c>
 348:	8c 01       	movw	r16, r24
 34a:	d0 e0       	ldi	r29, 0x00	; 0
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	f8 01       	movw	r30, r16
 350:	81 91       	ld	r24, Z+
 352:	8f 01       	movw	r16, r30
 354:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
 358:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
 35c:	db 01       	movw	r26, r22
 35e:	18 96       	adiw	r26, 0x08	; 8
 360:	ed 91       	ld	r30, X+
 362:	fc 91       	ld	r31, X
 364:	19 97       	sbiw	r26, 0x09	; 9
 366:	88 23       	and	r24, r24
 368:	31 f0       	breq	.+12     	; 0x376 <puts+0x44>
 36a:	09 95       	icall
 36c:	89 2b       	or	r24, r25
 36e:	79 f3       	breq	.-34     	; 0x34e <puts+0x1c>
 370:	df ef       	ldi	r29, 0xFF	; 255
 372:	cf ef       	ldi	r28, 0xFF	; 255
 374:	ec cf       	rjmp	.-40     	; 0x34e <puts+0x1c>
 376:	8a e0       	ldi	r24, 0x0A	; 10
 378:	09 95       	icall
 37a:	89 2b       	or	r24, r25
 37c:	19 f0       	breq	.+6      	; 0x384 <puts+0x52>
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	9f ef       	ldi	r25, 0xFF	; 255
 382:	02 c0       	rjmp	.+4      	; 0x388 <puts+0x56>
 384:	8d 2f       	mov	r24, r29
 386:	9c 2f       	mov	r25, r28
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <vfprintf>:
 392:	ab e0       	ldi	r26, 0x0B	; 11
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	ef ec       	ldi	r30, 0xCF	; 207
 398:	f1 e0       	ldi	r31, 0x01	; 1
 39a:	0c 94 8c 04 	jmp	0x918	; 0x918 <__prologue_saves__>
 39e:	6c 01       	movw	r12, r24
 3a0:	7b 01       	movw	r14, r22
 3a2:	8a 01       	movw	r16, r20
 3a4:	fc 01       	movw	r30, r24
 3a6:	17 82       	std	Z+7, r1	; 0x07
 3a8:	16 82       	std	Z+6, r1	; 0x06
 3aa:	83 81       	ldd	r24, Z+3	; 0x03
 3ac:	81 ff       	sbrs	r24, 1
 3ae:	cc c1       	rjmp	.+920    	; 0x748 <__stack+0x249>
 3b0:	ce 01       	movw	r24, r28
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	3c 01       	movw	r6, r24
 3b6:	f6 01       	movw	r30, r12
 3b8:	93 81       	ldd	r25, Z+3	; 0x03
 3ba:	f7 01       	movw	r30, r14
 3bc:	93 fd       	sbrc	r25, 3
 3be:	85 91       	lpm	r24, Z+
 3c0:	93 ff       	sbrs	r25, 3
 3c2:	81 91       	ld	r24, Z+
 3c4:	7f 01       	movw	r14, r30
 3c6:	88 23       	and	r24, r24
 3c8:	09 f4       	brne	.+2      	; 0x3cc <vfprintf+0x3a>
 3ca:	ba c1       	rjmp	.+884    	; 0x740 <__stack+0x241>
 3cc:	85 32       	cpi	r24, 0x25	; 37
 3ce:	39 f4       	brne	.+14     	; 0x3de <vfprintf+0x4c>
 3d0:	93 fd       	sbrc	r25, 3
 3d2:	85 91       	lpm	r24, Z+
 3d4:	93 ff       	sbrs	r25, 3
 3d6:	81 91       	ld	r24, Z+
 3d8:	7f 01       	movw	r14, r30
 3da:	85 32       	cpi	r24, 0x25	; 37
 3dc:	29 f4       	brne	.+10     	; 0x3e8 <vfprintf+0x56>
 3de:	b6 01       	movw	r22, r12
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 3e6:	e7 cf       	rjmp	.-50     	; 0x3b6 <vfprintf+0x24>
 3e8:	91 2c       	mov	r9, r1
 3ea:	21 2c       	mov	r2, r1
 3ec:	31 2c       	mov	r3, r1
 3ee:	ff e1       	ldi	r31, 0x1F	; 31
 3f0:	f3 15       	cp	r31, r3
 3f2:	d8 f0       	brcs	.+54     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
 3f4:	8b 32       	cpi	r24, 0x2B	; 43
 3f6:	79 f0       	breq	.+30     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 3f8:	38 f4       	brcc	.+14     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 3fa:	80 32       	cpi	r24, 0x20	; 32
 3fc:	79 f0       	breq	.+30     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
 3fe:	83 32       	cpi	r24, 0x23	; 35
 400:	a1 f4       	brne	.+40     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
 402:	23 2d       	mov	r18, r3
 404:	20 61       	ori	r18, 0x10	; 16
 406:	1d c0       	rjmp	.+58     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 408:	8d 32       	cpi	r24, 0x2D	; 45
 40a:	61 f0       	breq	.+24     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 40c:	80 33       	cpi	r24, 0x30	; 48
 40e:	69 f4       	brne	.+26     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
 410:	23 2d       	mov	r18, r3
 412:	21 60       	ori	r18, 0x01	; 1
 414:	16 c0       	rjmp	.+44     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 416:	83 2d       	mov	r24, r3
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	38 2e       	mov	r3, r24
 41c:	e3 2d       	mov	r30, r3
 41e:	e4 60       	ori	r30, 0x04	; 4
 420:	3e 2e       	mov	r3, r30
 422:	2a c0       	rjmp	.+84     	; 0x478 <__DATA_REGION_LENGTH__+0x78>
 424:	f3 2d       	mov	r31, r3
 426:	f8 60       	ori	r31, 0x08	; 8
 428:	1d c0       	rjmp	.+58     	; 0x464 <__DATA_REGION_LENGTH__+0x64>
 42a:	37 fc       	sbrc	r3, 7
 42c:	2d c0       	rjmp	.+90     	; 0x488 <__DATA_REGION_LENGTH__+0x88>
 42e:	20 ed       	ldi	r18, 0xD0	; 208
 430:	28 0f       	add	r18, r24
 432:	2a 30       	cpi	r18, 0x0A	; 10
 434:	40 f0       	brcs	.+16     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 436:	8e 32       	cpi	r24, 0x2E	; 46
 438:	b9 f4       	brne	.+46     	; 0x468 <__DATA_REGION_LENGTH__+0x68>
 43a:	36 fc       	sbrc	r3, 6
 43c:	81 c1       	rjmp	.+770    	; 0x740 <__stack+0x241>
 43e:	23 2d       	mov	r18, r3
 440:	20 64       	ori	r18, 0x40	; 64
 442:	32 2e       	mov	r3, r18
 444:	19 c0       	rjmp	.+50     	; 0x478 <__DATA_REGION_LENGTH__+0x78>
 446:	36 fe       	sbrs	r3, 6
 448:	06 c0       	rjmp	.+12     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 44a:	8a e0       	ldi	r24, 0x0A	; 10
 44c:	98 9e       	mul	r9, r24
 44e:	20 0d       	add	r18, r0
 450:	11 24       	eor	r1, r1
 452:	92 2e       	mov	r9, r18
 454:	11 c0       	rjmp	.+34     	; 0x478 <__DATA_REGION_LENGTH__+0x78>
 456:	ea e0       	ldi	r30, 0x0A	; 10
 458:	2e 9e       	mul	r2, r30
 45a:	20 0d       	add	r18, r0
 45c:	11 24       	eor	r1, r1
 45e:	22 2e       	mov	r2, r18
 460:	f3 2d       	mov	r31, r3
 462:	f0 62       	ori	r31, 0x20	; 32
 464:	3f 2e       	mov	r3, r31
 466:	08 c0       	rjmp	.+16     	; 0x478 <__DATA_REGION_LENGTH__+0x78>
 468:	8c 36       	cpi	r24, 0x6C	; 108
 46a:	21 f4       	brne	.+8      	; 0x474 <__DATA_REGION_LENGTH__+0x74>
 46c:	83 2d       	mov	r24, r3
 46e:	80 68       	ori	r24, 0x80	; 128
 470:	38 2e       	mov	r3, r24
 472:	02 c0       	rjmp	.+4      	; 0x478 <__DATA_REGION_LENGTH__+0x78>
 474:	88 36       	cpi	r24, 0x68	; 104
 476:	41 f4       	brne	.+16     	; 0x488 <__DATA_REGION_LENGTH__+0x88>
 478:	f7 01       	movw	r30, r14
 47a:	93 fd       	sbrc	r25, 3
 47c:	85 91       	lpm	r24, Z+
 47e:	93 ff       	sbrs	r25, 3
 480:	81 91       	ld	r24, Z+
 482:	7f 01       	movw	r14, r30
 484:	81 11       	cpse	r24, r1
 486:	b3 cf       	rjmp	.-154    	; 0x3ee <vfprintf+0x5c>
 488:	98 2f       	mov	r25, r24
 48a:	9f 7d       	andi	r25, 0xDF	; 223
 48c:	95 54       	subi	r25, 0x45	; 69
 48e:	93 30       	cpi	r25, 0x03	; 3
 490:	28 f4       	brcc	.+10     	; 0x49c <__DATA_REGION_LENGTH__+0x9c>
 492:	0c 5f       	subi	r16, 0xFC	; 252
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	9f e3       	ldi	r25, 0x3F	; 63
 498:	99 83       	std	Y+1, r25	; 0x01
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <__DATA_REGION_LENGTH__+0xb6>
 49c:	83 36       	cpi	r24, 0x63	; 99
 49e:	31 f0       	breq	.+12     	; 0x4ac <__DATA_REGION_LENGTH__+0xac>
 4a0:	83 37       	cpi	r24, 0x73	; 115
 4a2:	71 f0       	breq	.+28     	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
 4a4:	83 35       	cpi	r24, 0x53	; 83
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
 4a8:	59 c0       	rjmp	.+178    	; 0x55c <__stack+0x5d>
 4aa:	21 c0       	rjmp	.+66     	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
 4ac:	f8 01       	movw	r30, r16
 4ae:	80 81       	ld	r24, Z
 4b0:	89 83       	std	Y+1, r24	; 0x01
 4b2:	0e 5f       	subi	r16, 0xFE	; 254
 4b4:	1f 4f       	sbci	r17, 0xFF	; 255
 4b6:	88 24       	eor	r8, r8
 4b8:	83 94       	inc	r8
 4ba:	91 2c       	mov	r9, r1
 4bc:	53 01       	movw	r10, r6
 4be:	13 c0       	rjmp	.+38     	; 0x4e6 <__DATA_REGION_LENGTH__+0xe6>
 4c0:	28 01       	movw	r4, r16
 4c2:	f2 e0       	ldi	r31, 0x02	; 2
 4c4:	4f 0e       	add	r4, r31
 4c6:	51 1c       	adc	r5, r1
 4c8:	f8 01       	movw	r30, r16
 4ca:	a0 80       	ld	r10, Z
 4cc:	b1 80       	ldd	r11, Z+1	; 0x01
 4ce:	36 fe       	sbrs	r3, 6
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <__DATA_REGION_LENGTH__+0xd8>
 4d2:	69 2d       	mov	r22, r9
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__DATA_REGION_LENGTH__+0xdc>
 4d8:	6f ef       	ldi	r22, 0xFF	; 255
 4da:	7f ef       	ldi	r23, 0xFF	; 255
 4dc:	c5 01       	movw	r24, r10
 4de:	0e 94 b5 03 	call	0x76a	; 0x76a <strnlen>
 4e2:	4c 01       	movw	r8, r24
 4e4:	82 01       	movw	r16, r4
 4e6:	f3 2d       	mov	r31, r3
 4e8:	ff 77       	andi	r31, 0x7F	; 127
 4ea:	3f 2e       	mov	r3, r31
 4ec:	16 c0       	rjmp	.+44     	; 0x51a <__stack+0x1b>
 4ee:	28 01       	movw	r4, r16
 4f0:	22 e0       	ldi	r18, 0x02	; 2
 4f2:	42 0e       	add	r4, r18
 4f4:	51 1c       	adc	r5, r1
 4f6:	f8 01       	movw	r30, r16
 4f8:	a0 80       	ld	r10, Z
 4fa:	b1 80       	ldd	r11, Z+1	; 0x01
 4fc:	36 fe       	sbrs	r3, 6
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <__stack+0x7>
 500:	69 2d       	mov	r22, r9
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <__stack+0xb>
 506:	6f ef       	ldi	r22, 0xFF	; 255
 508:	7f ef       	ldi	r23, 0xFF	; 255
 50a:	c5 01       	movw	r24, r10
 50c:	0e 94 aa 03 	call	0x754	; 0x754 <strnlen_P>
 510:	4c 01       	movw	r8, r24
 512:	f3 2d       	mov	r31, r3
 514:	f0 68       	ori	r31, 0x80	; 128
 516:	3f 2e       	mov	r3, r31
 518:	82 01       	movw	r16, r4
 51a:	33 fc       	sbrc	r3, 3
 51c:	1b c0       	rjmp	.+54     	; 0x554 <__stack+0x55>
 51e:	82 2d       	mov	r24, r2
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	88 16       	cp	r8, r24
 524:	99 06       	cpc	r9, r25
 526:	b0 f4       	brcc	.+44     	; 0x554 <__stack+0x55>
 528:	b6 01       	movw	r22, r12
 52a:	80 e2       	ldi	r24, 0x20	; 32
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 532:	2a 94       	dec	r2
 534:	f4 cf       	rjmp	.-24     	; 0x51e <__stack+0x1f>
 536:	f5 01       	movw	r30, r10
 538:	37 fc       	sbrc	r3, 7
 53a:	85 91       	lpm	r24, Z+
 53c:	37 fe       	sbrs	r3, 7
 53e:	81 91       	ld	r24, Z+
 540:	5f 01       	movw	r10, r30
 542:	b6 01       	movw	r22, r12
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 54a:	21 10       	cpse	r2, r1
 54c:	2a 94       	dec	r2
 54e:	21 e0       	ldi	r18, 0x01	; 1
 550:	82 1a       	sub	r8, r18
 552:	91 08       	sbc	r9, r1
 554:	81 14       	cp	r8, r1
 556:	91 04       	cpc	r9, r1
 558:	71 f7       	brne	.-36     	; 0x536 <__stack+0x37>
 55a:	e8 c0       	rjmp	.+464    	; 0x72c <__stack+0x22d>
 55c:	84 36       	cpi	r24, 0x64	; 100
 55e:	11 f0       	breq	.+4      	; 0x564 <__stack+0x65>
 560:	89 36       	cpi	r24, 0x69	; 105
 562:	41 f5       	brne	.+80     	; 0x5b4 <__stack+0xb5>
 564:	f8 01       	movw	r30, r16
 566:	37 fe       	sbrs	r3, 7
 568:	07 c0       	rjmp	.+14     	; 0x578 <__stack+0x79>
 56a:	60 81       	ld	r22, Z
 56c:	71 81       	ldd	r23, Z+1	; 0x01
 56e:	82 81       	ldd	r24, Z+2	; 0x02
 570:	93 81       	ldd	r25, Z+3	; 0x03
 572:	0c 5f       	subi	r16, 0xFC	; 252
 574:	1f 4f       	sbci	r17, 0xFF	; 255
 576:	08 c0       	rjmp	.+16     	; 0x588 <__stack+0x89>
 578:	60 81       	ld	r22, Z
 57a:	71 81       	ldd	r23, Z+1	; 0x01
 57c:	07 2e       	mov	r0, r23
 57e:	00 0c       	add	r0, r0
 580:	88 0b       	sbc	r24, r24
 582:	99 0b       	sbc	r25, r25
 584:	0e 5f       	subi	r16, 0xFE	; 254
 586:	1f 4f       	sbci	r17, 0xFF	; 255
 588:	f3 2d       	mov	r31, r3
 58a:	ff 76       	andi	r31, 0x6F	; 111
 58c:	3f 2e       	mov	r3, r31
 58e:	97 ff       	sbrs	r25, 7
 590:	09 c0       	rjmp	.+18     	; 0x5a4 <__stack+0xa5>
 592:	90 95       	com	r25
 594:	80 95       	com	r24
 596:	70 95       	com	r23
 598:	61 95       	neg	r22
 59a:	7f 4f       	sbci	r23, 0xFF	; 255
 59c:	8f 4f       	sbci	r24, 0xFF	; 255
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	f0 68       	ori	r31, 0x80	; 128
 5a2:	3f 2e       	mov	r3, r31
 5a4:	2a e0       	ldi	r18, 0x0A	; 10
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	a3 01       	movw	r20, r6
 5aa:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__ultoa_invert>
 5ae:	88 2e       	mov	r8, r24
 5b0:	86 18       	sub	r8, r6
 5b2:	45 c0       	rjmp	.+138    	; 0x63e <__stack+0x13f>
 5b4:	85 37       	cpi	r24, 0x75	; 117
 5b6:	31 f4       	brne	.+12     	; 0x5c4 <__stack+0xc5>
 5b8:	23 2d       	mov	r18, r3
 5ba:	2f 7e       	andi	r18, 0xEF	; 239
 5bc:	b2 2e       	mov	r11, r18
 5be:	2a e0       	ldi	r18, 0x0A	; 10
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	25 c0       	rjmp	.+74     	; 0x60e <__stack+0x10f>
 5c4:	93 2d       	mov	r25, r3
 5c6:	99 7f       	andi	r25, 0xF9	; 249
 5c8:	b9 2e       	mov	r11, r25
 5ca:	8f 36       	cpi	r24, 0x6F	; 111
 5cc:	c1 f0       	breq	.+48     	; 0x5fe <__stack+0xff>
 5ce:	18 f4       	brcc	.+6      	; 0x5d6 <__stack+0xd7>
 5d0:	88 35       	cpi	r24, 0x58	; 88
 5d2:	79 f0       	breq	.+30     	; 0x5f2 <__stack+0xf3>
 5d4:	b5 c0       	rjmp	.+362    	; 0x740 <__stack+0x241>
 5d6:	80 37       	cpi	r24, 0x70	; 112
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <__stack+0xe1>
 5da:	88 37       	cpi	r24, 0x78	; 120
 5dc:	21 f0       	breq	.+8      	; 0x5e6 <__stack+0xe7>
 5de:	b0 c0       	rjmp	.+352    	; 0x740 <__stack+0x241>
 5e0:	e9 2f       	mov	r30, r25
 5e2:	e0 61       	ori	r30, 0x10	; 16
 5e4:	be 2e       	mov	r11, r30
 5e6:	b4 fe       	sbrs	r11, 4
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <__stack+0x105>
 5ea:	fb 2d       	mov	r31, r11
 5ec:	f4 60       	ori	r31, 0x04	; 4
 5ee:	bf 2e       	mov	r11, r31
 5f0:	09 c0       	rjmp	.+18     	; 0x604 <__stack+0x105>
 5f2:	34 fe       	sbrs	r3, 4
 5f4:	0a c0       	rjmp	.+20     	; 0x60a <__stack+0x10b>
 5f6:	29 2f       	mov	r18, r25
 5f8:	26 60       	ori	r18, 0x06	; 6
 5fa:	b2 2e       	mov	r11, r18
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <__stack+0x10b>
 5fe:	28 e0       	ldi	r18, 0x08	; 8
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	05 c0       	rjmp	.+10     	; 0x60e <__stack+0x10f>
 604:	20 e1       	ldi	r18, 0x10	; 16
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <__stack+0x10f>
 60a:	20 e1       	ldi	r18, 0x10	; 16
 60c:	32 e0       	ldi	r19, 0x02	; 2
 60e:	f8 01       	movw	r30, r16
 610:	b7 fe       	sbrs	r11, 7
 612:	07 c0       	rjmp	.+14     	; 0x622 <__stack+0x123>
 614:	60 81       	ld	r22, Z
 616:	71 81       	ldd	r23, Z+1	; 0x01
 618:	82 81       	ldd	r24, Z+2	; 0x02
 61a:	93 81       	ldd	r25, Z+3	; 0x03
 61c:	0c 5f       	subi	r16, 0xFC	; 252
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	06 c0       	rjmp	.+12     	; 0x62e <__stack+0x12f>
 622:	60 81       	ld	r22, Z
 624:	71 81       	ldd	r23, Z+1	; 0x01
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 5f       	subi	r16, 0xFE	; 254
 62c:	1f 4f       	sbci	r17, 0xFF	; 255
 62e:	a3 01       	movw	r20, r6
 630:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__ultoa_invert>
 634:	88 2e       	mov	r8, r24
 636:	86 18       	sub	r8, r6
 638:	fb 2d       	mov	r31, r11
 63a:	ff 77       	andi	r31, 0x7F	; 127
 63c:	3f 2e       	mov	r3, r31
 63e:	36 fe       	sbrs	r3, 6
 640:	0d c0       	rjmp	.+26     	; 0x65c <__stack+0x15d>
 642:	23 2d       	mov	r18, r3
 644:	2e 7f       	andi	r18, 0xFE	; 254
 646:	a2 2e       	mov	r10, r18
 648:	89 14       	cp	r8, r9
 64a:	58 f4       	brcc	.+22     	; 0x662 <__stack+0x163>
 64c:	34 fe       	sbrs	r3, 4
 64e:	0b c0       	rjmp	.+22     	; 0x666 <__stack+0x167>
 650:	32 fc       	sbrc	r3, 2
 652:	09 c0       	rjmp	.+18     	; 0x666 <__stack+0x167>
 654:	83 2d       	mov	r24, r3
 656:	8e 7e       	andi	r24, 0xEE	; 238
 658:	a8 2e       	mov	r10, r24
 65a:	05 c0       	rjmp	.+10     	; 0x666 <__stack+0x167>
 65c:	b8 2c       	mov	r11, r8
 65e:	a3 2c       	mov	r10, r3
 660:	03 c0       	rjmp	.+6      	; 0x668 <__stack+0x169>
 662:	b8 2c       	mov	r11, r8
 664:	01 c0       	rjmp	.+2      	; 0x668 <__stack+0x169>
 666:	b9 2c       	mov	r11, r9
 668:	a4 fe       	sbrs	r10, 4
 66a:	0f c0       	rjmp	.+30     	; 0x68a <__stack+0x18b>
 66c:	fe 01       	movw	r30, r28
 66e:	e8 0d       	add	r30, r8
 670:	f1 1d       	adc	r31, r1
 672:	80 81       	ld	r24, Z
 674:	80 33       	cpi	r24, 0x30	; 48
 676:	21 f4       	brne	.+8      	; 0x680 <__stack+0x181>
 678:	9a 2d       	mov	r25, r10
 67a:	99 7e       	andi	r25, 0xE9	; 233
 67c:	a9 2e       	mov	r10, r25
 67e:	09 c0       	rjmp	.+18     	; 0x692 <__stack+0x193>
 680:	a2 fe       	sbrs	r10, 2
 682:	06 c0       	rjmp	.+12     	; 0x690 <__stack+0x191>
 684:	b3 94       	inc	r11
 686:	b3 94       	inc	r11
 688:	04 c0       	rjmp	.+8      	; 0x692 <__stack+0x193>
 68a:	8a 2d       	mov	r24, r10
 68c:	86 78       	andi	r24, 0x86	; 134
 68e:	09 f0       	breq	.+2      	; 0x692 <__stack+0x193>
 690:	b3 94       	inc	r11
 692:	a3 fc       	sbrc	r10, 3
 694:	11 c0       	rjmp	.+34     	; 0x6b8 <__stack+0x1b9>
 696:	a0 fe       	sbrs	r10, 0
 698:	06 c0       	rjmp	.+12     	; 0x6a6 <__stack+0x1a7>
 69a:	b2 14       	cp	r11, r2
 69c:	88 f4       	brcc	.+34     	; 0x6c0 <__stack+0x1c1>
 69e:	28 0c       	add	r2, r8
 6a0:	92 2c       	mov	r9, r2
 6a2:	9b 18       	sub	r9, r11
 6a4:	0e c0       	rjmp	.+28     	; 0x6c2 <__stack+0x1c3>
 6a6:	b2 14       	cp	r11, r2
 6a8:	60 f4       	brcc	.+24     	; 0x6c2 <__stack+0x1c3>
 6aa:	b6 01       	movw	r22, r12
 6ac:	80 e2       	ldi	r24, 0x20	; 32
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 6b4:	b3 94       	inc	r11
 6b6:	f7 cf       	rjmp	.-18     	; 0x6a6 <__stack+0x1a7>
 6b8:	b2 14       	cp	r11, r2
 6ba:	18 f4       	brcc	.+6      	; 0x6c2 <__stack+0x1c3>
 6bc:	2b 18       	sub	r2, r11
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__stack+0x1c5>
 6c0:	98 2c       	mov	r9, r8
 6c2:	21 2c       	mov	r2, r1
 6c4:	a4 fe       	sbrs	r10, 4
 6c6:	10 c0       	rjmp	.+32     	; 0x6e8 <__stack+0x1e9>
 6c8:	b6 01       	movw	r22, r12
 6ca:	80 e3       	ldi	r24, 0x30	; 48
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 6d2:	a2 fe       	sbrs	r10, 2
 6d4:	17 c0       	rjmp	.+46     	; 0x704 <__stack+0x205>
 6d6:	a1 fc       	sbrc	r10, 1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <__stack+0x1e1>
 6da:	88 e7       	ldi	r24, 0x78	; 120
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <__stack+0x1e5>
 6e0:	88 e5       	ldi	r24, 0x58	; 88
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	b6 01       	movw	r22, r12
 6e6:	0c c0       	rjmp	.+24     	; 0x700 <__stack+0x201>
 6e8:	8a 2d       	mov	r24, r10
 6ea:	86 78       	andi	r24, 0x86	; 134
 6ec:	59 f0       	breq	.+22     	; 0x704 <__stack+0x205>
 6ee:	a1 fe       	sbrs	r10, 1
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <__stack+0x1f7>
 6f2:	8b e2       	ldi	r24, 0x2B	; 43
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <__stack+0x1f9>
 6f6:	80 e2       	ldi	r24, 0x20	; 32
 6f8:	a7 fc       	sbrc	r10, 7
 6fa:	8d e2       	ldi	r24, 0x2D	; 45
 6fc:	b6 01       	movw	r22, r12
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 704:	89 14       	cp	r8, r9
 706:	38 f4       	brcc	.+14     	; 0x716 <__stack+0x217>
 708:	b6 01       	movw	r22, r12
 70a:	80 e3       	ldi	r24, 0x30	; 48
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 712:	9a 94       	dec	r9
 714:	f7 cf       	rjmp	.-18     	; 0x704 <__stack+0x205>
 716:	8a 94       	dec	r8
 718:	f3 01       	movw	r30, r6
 71a:	e8 0d       	add	r30, r8
 71c:	f1 1d       	adc	r31, r1
 71e:	80 81       	ld	r24, Z
 720:	b6 01       	movw	r22, r12
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 728:	81 10       	cpse	r8, r1
 72a:	f5 cf       	rjmp	.-22     	; 0x716 <__stack+0x217>
 72c:	22 20       	and	r2, r2
 72e:	09 f4       	brne	.+2      	; 0x732 <__stack+0x233>
 730:	42 ce       	rjmp	.-892    	; 0x3b6 <vfprintf+0x24>
 732:	b6 01       	movw	r22, r12
 734:	80 e2       	ldi	r24, 0x20	; 32
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 c0 03 	call	0x780	; 0x780 <fputc>
 73c:	2a 94       	dec	r2
 73e:	f6 cf       	rjmp	.-20     	; 0x72c <__stack+0x22d>
 740:	f6 01       	movw	r30, r12
 742:	86 81       	ldd	r24, Z+6	; 0x06
 744:	97 81       	ldd	r25, Z+7	; 0x07
 746:	02 c0       	rjmp	.+4      	; 0x74c <__stack+0x24d>
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	9f ef       	ldi	r25, 0xFF	; 255
 74c:	2b 96       	adiw	r28, 0x0b	; 11
 74e:	e2 e1       	ldi	r30, 0x12	; 18
 750:	0c 94 a8 04 	jmp	0x950	; 0x950 <__epilogue_restores__>

00000754 <strnlen_P>:
 754:	fc 01       	movw	r30, r24
 756:	05 90       	lpm	r0, Z+
 758:	61 50       	subi	r22, 0x01	; 1
 75a:	70 40       	sbci	r23, 0x00	; 0
 75c:	01 10       	cpse	r0, r1
 75e:	d8 f7       	brcc	.-10     	; 0x756 <strnlen_P+0x2>
 760:	80 95       	com	r24
 762:	90 95       	com	r25
 764:	8e 0f       	add	r24, r30
 766:	9f 1f       	adc	r25, r31
 768:	08 95       	ret

0000076a <strnlen>:
 76a:	fc 01       	movw	r30, r24
 76c:	61 50       	subi	r22, 0x01	; 1
 76e:	70 40       	sbci	r23, 0x00	; 0
 770:	01 90       	ld	r0, Z+
 772:	01 10       	cpse	r0, r1
 774:	d8 f7       	brcc	.-10     	; 0x76c <strnlen+0x2>
 776:	80 95       	com	r24
 778:	90 95       	com	r25
 77a:	8e 0f       	add	r24, r30
 77c:	9f 1f       	adc	r25, r31
 77e:	08 95       	ret

00000780 <fputc>:
 780:	0f 93       	push	r16
 782:	1f 93       	push	r17
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	fb 01       	movw	r30, r22
 78a:	23 81       	ldd	r18, Z+3	; 0x03
 78c:	21 fd       	sbrc	r18, 1
 78e:	03 c0       	rjmp	.+6      	; 0x796 <fputc+0x16>
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	9f ef       	ldi	r25, 0xFF	; 255
 794:	2c c0       	rjmp	.+88     	; 0x7ee <fputc+0x6e>
 796:	22 ff       	sbrs	r18, 2
 798:	16 c0       	rjmp	.+44     	; 0x7c6 <fputc+0x46>
 79a:	46 81       	ldd	r20, Z+6	; 0x06
 79c:	57 81       	ldd	r21, Z+7	; 0x07
 79e:	24 81       	ldd	r18, Z+4	; 0x04
 7a0:	35 81       	ldd	r19, Z+5	; 0x05
 7a2:	42 17       	cp	r20, r18
 7a4:	53 07       	cpc	r21, r19
 7a6:	44 f4       	brge	.+16     	; 0x7b8 <fputc+0x38>
 7a8:	a0 81       	ld	r26, Z
 7aa:	b1 81       	ldd	r27, Z+1	; 0x01
 7ac:	9d 01       	movw	r18, r26
 7ae:	2f 5f       	subi	r18, 0xFF	; 255
 7b0:	3f 4f       	sbci	r19, 0xFF	; 255
 7b2:	31 83       	std	Z+1, r19	; 0x01
 7b4:	20 83       	st	Z, r18
 7b6:	8c 93       	st	X, r24
 7b8:	26 81       	ldd	r18, Z+6	; 0x06
 7ba:	37 81       	ldd	r19, Z+7	; 0x07
 7bc:	2f 5f       	subi	r18, 0xFF	; 255
 7be:	3f 4f       	sbci	r19, 0xFF	; 255
 7c0:	37 83       	std	Z+7, r19	; 0x07
 7c2:	26 83       	std	Z+6, r18	; 0x06
 7c4:	14 c0       	rjmp	.+40     	; 0x7ee <fputc+0x6e>
 7c6:	8b 01       	movw	r16, r22
 7c8:	ec 01       	movw	r28, r24
 7ca:	fb 01       	movw	r30, r22
 7cc:	00 84       	ldd	r0, Z+8	; 0x08
 7ce:	f1 85       	ldd	r31, Z+9	; 0x09
 7d0:	e0 2d       	mov	r30, r0
 7d2:	09 95       	icall
 7d4:	89 2b       	or	r24, r25
 7d6:	e1 f6       	brne	.-72     	; 0x790 <fputc+0x10>
 7d8:	d8 01       	movw	r26, r16
 7da:	16 96       	adiw	r26, 0x06	; 6
 7dc:	8d 91       	ld	r24, X+
 7de:	9c 91       	ld	r25, X
 7e0:	17 97       	sbiw	r26, 0x07	; 7
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	17 96       	adiw	r26, 0x07	; 7
 7e6:	9c 93       	st	X, r25
 7e8:	8e 93       	st	-X, r24
 7ea:	16 97       	sbiw	r26, 0x06	; 6
 7ec:	ce 01       	movw	r24, r28
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	1f 91       	pop	r17
 7f4:	0f 91       	pop	r16
 7f6:	08 95       	ret

000007f8 <__ultoa_invert>:
 7f8:	fa 01       	movw	r30, r20
 7fa:	aa 27       	eor	r26, r26
 7fc:	28 30       	cpi	r18, 0x08	; 8
 7fe:	51 f1       	breq	.+84     	; 0x854 <__ultoa_invert+0x5c>
 800:	20 31       	cpi	r18, 0x10	; 16
 802:	81 f1       	breq	.+96     	; 0x864 <__ultoa_invert+0x6c>
 804:	e8 94       	clt
 806:	6f 93       	push	r22
 808:	6e 7f       	andi	r22, 0xFE	; 254
 80a:	6e 5f       	subi	r22, 0xFE	; 254
 80c:	7f 4f       	sbci	r23, 0xFF	; 255
 80e:	8f 4f       	sbci	r24, 0xFF	; 255
 810:	9f 4f       	sbci	r25, 0xFF	; 255
 812:	af 4f       	sbci	r26, 0xFF	; 255
 814:	b1 e0       	ldi	r27, 0x01	; 1
 816:	3e d0       	rcall	.+124    	; 0x894 <__ultoa_invert+0x9c>
 818:	b4 e0       	ldi	r27, 0x04	; 4
 81a:	3c d0       	rcall	.+120    	; 0x894 <__ultoa_invert+0x9c>
 81c:	67 0f       	add	r22, r23
 81e:	78 1f       	adc	r23, r24
 820:	89 1f       	adc	r24, r25
 822:	9a 1f       	adc	r25, r26
 824:	a1 1d       	adc	r26, r1
 826:	68 0f       	add	r22, r24
 828:	79 1f       	adc	r23, r25
 82a:	8a 1f       	adc	r24, r26
 82c:	91 1d       	adc	r25, r1
 82e:	a1 1d       	adc	r26, r1
 830:	6a 0f       	add	r22, r26
 832:	71 1d       	adc	r23, r1
 834:	81 1d       	adc	r24, r1
 836:	91 1d       	adc	r25, r1
 838:	a1 1d       	adc	r26, r1
 83a:	20 d0       	rcall	.+64     	; 0x87c <__ultoa_invert+0x84>
 83c:	09 f4       	brne	.+2      	; 0x840 <__ultoa_invert+0x48>
 83e:	68 94       	set
 840:	3f 91       	pop	r19
 842:	2a e0       	ldi	r18, 0x0A	; 10
 844:	26 9f       	mul	r18, r22
 846:	11 24       	eor	r1, r1
 848:	30 19       	sub	r19, r0
 84a:	30 5d       	subi	r19, 0xD0	; 208
 84c:	31 93       	st	Z+, r19
 84e:	de f6       	brtc	.-74     	; 0x806 <__ultoa_invert+0xe>
 850:	cf 01       	movw	r24, r30
 852:	08 95       	ret
 854:	46 2f       	mov	r20, r22
 856:	47 70       	andi	r20, 0x07	; 7
 858:	40 5d       	subi	r20, 0xD0	; 208
 85a:	41 93       	st	Z+, r20
 85c:	b3 e0       	ldi	r27, 0x03	; 3
 85e:	0f d0       	rcall	.+30     	; 0x87e <__ultoa_invert+0x86>
 860:	c9 f7       	brne	.-14     	; 0x854 <__ultoa_invert+0x5c>
 862:	f6 cf       	rjmp	.-20     	; 0x850 <__ultoa_invert+0x58>
 864:	46 2f       	mov	r20, r22
 866:	4f 70       	andi	r20, 0x0F	; 15
 868:	40 5d       	subi	r20, 0xD0	; 208
 86a:	4a 33       	cpi	r20, 0x3A	; 58
 86c:	18 f0       	brcs	.+6      	; 0x874 <__ultoa_invert+0x7c>
 86e:	49 5d       	subi	r20, 0xD9	; 217
 870:	31 fd       	sbrc	r19, 1
 872:	40 52       	subi	r20, 0x20	; 32
 874:	41 93       	st	Z+, r20
 876:	02 d0       	rcall	.+4      	; 0x87c <__ultoa_invert+0x84>
 878:	a9 f7       	brne	.-22     	; 0x864 <__ultoa_invert+0x6c>
 87a:	ea cf       	rjmp	.-44     	; 0x850 <__ultoa_invert+0x58>
 87c:	b4 e0       	ldi	r27, 0x04	; 4
 87e:	a6 95       	lsr	r26
 880:	97 95       	ror	r25
 882:	87 95       	ror	r24
 884:	77 95       	ror	r23
 886:	67 95       	ror	r22
 888:	ba 95       	dec	r27
 88a:	c9 f7       	brne	.-14     	; 0x87e <__ultoa_invert+0x86>
 88c:	00 97       	sbiw	r24, 0x00	; 0
 88e:	61 05       	cpc	r22, r1
 890:	71 05       	cpc	r23, r1
 892:	08 95       	ret
 894:	9b 01       	movw	r18, r22
 896:	ac 01       	movw	r20, r24
 898:	0a 2e       	mov	r0, r26
 89a:	06 94       	lsr	r0
 89c:	57 95       	ror	r21
 89e:	47 95       	ror	r20
 8a0:	37 95       	ror	r19
 8a2:	27 95       	ror	r18
 8a4:	ba 95       	dec	r27
 8a6:	c9 f7       	brne	.-14     	; 0x89a <__ultoa_invert+0xa2>
 8a8:	62 0f       	add	r22, r18
 8aa:	73 1f       	adc	r23, r19
 8ac:	84 1f       	adc	r24, r20
 8ae:	95 1f       	adc	r25, r21
 8b0:	a0 1d       	adc	r26, r0
 8b2:	08 95       	ret

000008b4 <__divmodsi4>:
 8b4:	05 2e       	mov	r0, r21
 8b6:	97 fb       	bst	r25, 7
 8b8:	1e f4       	brtc	.+6      	; 0x8c0 <__divmodsi4+0xc>
 8ba:	00 94       	com	r0
 8bc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__negsi2>
 8c0:	57 fd       	sbrc	r21, 7
 8c2:	07 d0       	rcall	.+14     	; 0x8d2 <__divmodsi4_neg2>
 8c4:	0e 94 c3 04 	call	0x986	; 0x986 <__udivmodsi4>
 8c8:	07 fc       	sbrc	r0, 7
 8ca:	03 d0       	rcall	.+6      	; 0x8d2 <__divmodsi4_neg2>
 8cc:	4e f4       	brtc	.+18     	; 0x8e0 <__divmodsi4_exit>
 8ce:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__negsi2>

000008d2 <__divmodsi4_neg2>:
 8d2:	50 95       	com	r21
 8d4:	40 95       	com	r20
 8d6:	30 95       	com	r19
 8d8:	21 95       	neg	r18
 8da:	3f 4f       	sbci	r19, 0xFF	; 255
 8dc:	4f 4f       	sbci	r20, 0xFF	; 255
 8de:	5f 4f       	sbci	r21, 0xFF	; 255

000008e0 <__divmodsi4_exit>:
 8e0:	08 95       	ret

000008e2 <__negsi2>:
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__muluhisi3>:
 8f2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__umulhisi3>
 8f6:	a5 9f       	mul	r26, r21
 8f8:	90 0d       	add	r25, r0
 8fa:	b4 9f       	mul	r27, r20
 8fc:	90 0d       	add	r25, r0
 8fe:	a4 9f       	mul	r26, r20
 900:	80 0d       	add	r24, r0
 902:	91 1d       	adc	r25, r1
 904:	11 24       	eor	r1, r1
 906:	08 95       	ret

00000908 <__mulshisi3>:
 908:	b7 ff       	sbrs	r27, 7
 90a:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__muluhisi3>

0000090e <__mulohisi3>:
 90e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__muluhisi3>
 912:	82 1b       	sub	r24, r18
 914:	93 0b       	sbc	r25, r19
 916:	08 95       	ret

00000918 <__prologue_saves__>:
 918:	2f 92       	push	r2
 91a:	3f 92       	push	r3
 91c:	4f 92       	push	r4
 91e:	5f 92       	push	r5
 920:	6f 92       	push	r6
 922:	7f 92       	push	r7
 924:	8f 92       	push	r8
 926:	9f 92       	push	r9
 928:	af 92       	push	r10
 92a:	bf 92       	push	r11
 92c:	cf 92       	push	r12
 92e:	df 92       	push	r13
 930:	ef 92       	push	r14
 932:	ff 92       	push	r15
 934:	0f 93       	push	r16
 936:	1f 93       	push	r17
 938:	cf 93       	push	r28
 93a:	df 93       	push	r29
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
 940:	ca 1b       	sub	r28, r26
 942:	db 0b       	sbc	r29, r27
 944:	0f b6       	in	r0, 0x3f	; 63
 946:	f8 94       	cli
 948:	de bf       	out	0x3e, r29	; 62
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	cd bf       	out	0x3d, r28	; 61
 94e:	09 94       	ijmp

00000950 <__epilogue_restores__>:
 950:	2a 88       	ldd	r2, Y+18	; 0x12
 952:	39 88       	ldd	r3, Y+17	; 0x11
 954:	48 88       	ldd	r4, Y+16	; 0x10
 956:	5f 84       	ldd	r5, Y+15	; 0x0f
 958:	6e 84       	ldd	r6, Y+14	; 0x0e
 95a:	7d 84       	ldd	r7, Y+13	; 0x0d
 95c:	8c 84       	ldd	r8, Y+12	; 0x0c
 95e:	9b 84       	ldd	r9, Y+11	; 0x0b
 960:	aa 84       	ldd	r10, Y+10	; 0x0a
 962:	b9 84       	ldd	r11, Y+9	; 0x09
 964:	c8 84       	ldd	r12, Y+8	; 0x08
 966:	df 80       	ldd	r13, Y+7	; 0x07
 968:	ee 80       	ldd	r14, Y+6	; 0x06
 96a:	fd 80       	ldd	r15, Y+5	; 0x05
 96c:	0c 81       	ldd	r16, Y+4	; 0x04
 96e:	1b 81       	ldd	r17, Y+3	; 0x03
 970:	aa 81       	ldd	r26, Y+2	; 0x02
 972:	b9 81       	ldd	r27, Y+1	; 0x01
 974:	ce 0f       	add	r28, r30
 976:	d1 1d       	adc	r29, r1
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	f8 94       	cli
 97c:	de bf       	out	0x3e, r29	; 62
 97e:	0f be       	out	0x3f, r0	; 63
 980:	cd bf       	out	0x3d, r28	; 61
 982:	ed 01       	movw	r28, r26
 984:	08 95       	ret

00000986 <__udivmodsi4>:
 986:	a1 e2       	ldi	r26, 0x21	; 33
 988:	1a 2e       	mov	r1, r26
 98a:	aa 1b       	sub	r26, r26
 98c:	bb 1b       	sub	r27, r27
 98e:	fd 01       	movw	r30, r26
 990:	0d c0       	rjmp	.+26     	; 0x9ac <__udivmodsi4_ep>

00000992 <__udivmodsi4_loop>:
 992:	aa 1f       	adc	r26, r26
 994:	bb 1f       	adc	r27, r27
 996:	ee 1f       	adc	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	a2 17       	cp	r26, r18
 99c:	b3 07       	cpc	r27, r19
 99e:	e4 07       	cpc	r30, r20
 9a0:	f5 07       	cpc	r31, r21
 9a2:	20 f0       	brcs	.+8      	; 0x9ac <__udivmodsi4_ep>
 9a4:	a2 1b       	sub	r26, r18
 9a6:	b3 0b       	sbc	r27, r19
 9a8:	e4 0b       	sbc	r30, r20
 9aa:	f5 0b       	sbc	r31, r21

000009ac <__udivmodsi4_ep>:
 9ac:	66 1f       	adc	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	1a 94       	dec	r1
 9b6:	69 f7       	brne	.-38     	; 0x992 <__udivmodsi4_loop>
 9b8:	60 95       	com	r22
 9ba:	70 95       	com	r23
 9bc:	80 95       	com	r24
 9be:	90 95       	com	r25
 9c0:	9b 01       	movw	r18, r22
 9c2:	ac 01       	movw	r20, r24
 9c4:	bd 01       	movw	r22, r26
 9c6:	cf 01       	movw	r24, r30
 9c8:	08 95       	ret

000009ca <__umulhisi3>:
 9ca:	a2 9f       	mul	r26, r18
 9cc:	b0 01       	movw	r22, r0
 9ce:	b3 9f       	mul	r27, r19
 9d0:	c0 01       	movw	r24, r0
 9d2:	a3 9f       	mul	r26, r19
 9d4:	70 0d       	add	r23, r0
 9d6:	81 1d       	adc	r24, r1
 9d8:	11 24       	eor	r1, r1
 9da:	91 1d       	adc	r25, r1
 9dc:	b2 9f       	mul	r27, r18
 9de:	70 0d       	add	r23, r0
 9e0:	81 1d       	adc	r24, r1
 9e2:	11 24       	eor	r1, r1
 9e4:	91 1d       	adc	r25, r1
 9e6:	08 95       	ret

000009e8 <_exit>:
 9e8:	f8 94       	cli

000009ea <__stop_program>:
 9ea:	ff cf       	rjmp	.-2      	; 0x9ea <__stop_program>
