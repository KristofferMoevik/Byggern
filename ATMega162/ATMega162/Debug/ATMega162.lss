
ATMega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a0  00800100  00001ab6  00001b4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ab6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008003a0  008003a0  00001dea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d1e  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d59  00000000  00000000  00004d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001462  00000000  00000000  00005acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  00006f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b16  00000000  00000000  00007408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013f8  00000000  00000000  00007f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00009316  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5f       	subi	r16, 0xF0	; 240
      78:	00 00       	nop
      7a:	00 07       	cpc	r16, r16
      7c:	00 07       	cpc	r16, r16
      7e:	00 14       	cp	r0, r0
      80:	7f 14       	cp	r7, r15
      82:	7f 14       	cp	r7, r15
      84:	24 2a       	or	r2, r20
      86:	7f 2a       	or	r7, r31
      88:	12 23       	and	r17, r18
      8a:	13 08       	sbc	r1, r3
      8c:	64 62       	ori	r22, 0x24	; 36
      8e:	36 49       	sbci	r19, 0x96	; 150
      90:	55 22       	and	r5, r21
      92:	50 00       	.word	0x0050	; ????
      94:	05 03       	mulsu	r16, r21
      96:	00 00       	nop
      98:	00 1c       	adc	r0, r0
      9a:	22 41       	sbci	r18, 0x12	; 18
      9c:	00 00       	nop
      9e:	41 22       	and	r4, r17
      a0:	1c 00       	.word	0x001c	; ????
      a2:	08 2a       	or	r0, r24
      a4:	1c 2a       	or	r1, r28
      a6:	08 08       	sbc	r0, r8
      a8:	08 3e       	cpi	r16, 0xE8	; 232
      aa:	08 08       	sbc	r0, r8
      ac:	00 50       	subi	r16, 0x00	; 0
      ae:	30 00       	.word	0x0030	; ????
      b0:	00 08       	sbc	r0, r0
      b2:	08 08       	sbc	r0, r8
      b4:	08 08       	sbc	r0, r8
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 02       	muls	r16, r20
      c0:	3e 51       	subi	r19, 0x1E	; 30
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	3e 00       	.word	0x003e	; ????
      c6:	42 7f       	andi	r20, 0xF2	; 242
      c8:	40 00       	.word	0x0040	; ????
      ca:	42 61       	ori	r20, 0x12	; 18
      cc:	51 49       	sbci	r21, 0x91	; 145
      ce:	46 21       	and	r20, r6
      d0:	41 45       	sbci	r20, 0x51	; 81
      d2:	4b 31       	cpi	r20, 0x1B	; 27
      d4:	18 14       	cp	r1, r8
      d6:	12 7f       	andi	r17, 0xF2	; 242
      d8:	10 27       	eor	r17, r16
      da:	45 45       	sbci	r20, 0x55	; 85
      dc:	45 39       	cpi	r20, 0x95	; 149
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	49 49       	sbci	r20, 0x99	; 153
      e2:	30 01       	movw	r6, r0
      e4:	71 09       	sbc	r23, r1
      e6:	05 03       	mulsu	r16, r21
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	49 49       	sbci	r20, 0x99	; 153
      ec:	36 06       	cpc	r3, r22
      ee:	49 49       	sbci	r20, 0x99	; 153
      f0:	29 1e       	adc	r2, r25
      f2:	00 36       	cpi	r16, 0x60	; 96
      f4:	36 00       	.word	0x0036	; ????
      f6:	00 00       	nop
      f8:	56 36       	cpi	r21, 0x66	; 102
      fa:	00 00       	nop
      fc:	00 08       	sbc	r0, r0
      fe:	14 22       	and	r1, r20
     100:	41 14       	cp	r4, r1
     102:	14 14       	cp	r1, r4
     104:	14 14       	cp	r1, r4
     106:	41 22       	and	r4, r17
     108:	14 08       	sbc	r1, r4
     10a:	00 02       	muls	r16, r16
     10c:	01 51       	subi	r16, 0x11	; 17
     10e:	09 06       	cpc	r0, r25
     110:	32 49       	sbci	r19, 0x92	; 146
     112:	79 41       	sbci	r23, 0x19	; 25
     114:	3e 7e       	andi	r19, 0xEE	; 238
     116:	11 11       	cpse	r17, r1
     118:	11 7e       	andi	r17, 0xE1	; 225
     11a:	7f 49       	sbci	r23, 0x9F	; 159
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	36 3e       	cpi	r19, 0xE6	; 230
     120:	41 41       	sbci	r20, 0x11	; 17
     122:	41 22       	and	r4, r17
     124:	7f 41       	sbci	r23, 0x1F	; 31
     126:	41 22       	and	r4, r17
     128:	1c 7f       	andi	r17, 0xFC	; 252
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	49 41       	sbci	r20, 0x19	; 25
     12e:	7f 09       	sbc	r23, r15
     130:	09 01       	movw	r0, r18
     132:	01 3e       	cpi	r16, 0xE1	; 225
     134:	41 41       	sbci	r20, 0x11	; 17
     136:	51 32       	cpi	r21, 0x21	; 33
     138:	7f 08       	sbc	r7, r15
     13a:	08 08       	sbc	r0, r8
     13c:	7f 00       	.word	0x007f	; ????
     13e:	41 7f       	andi	r20, 0xF1	; 241
     140:	41 00       	.word	0x0041	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	41 3f       	cpi	r20, 0xF1	; 241
     146:	01 7f       	andi	r16, 0xF1	; 241
     148:	08 14       	cp	r0, r8
     14a:	22 41       	sbci	r18, 0x12	; 18
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	40 7f       	andi	r20, 0xF0	; 240
     152:	02 04       	cpc	r0, r2
     154:	02 7f       	andi	r16, 0xF2	; 242
     156:	7f 04       	cpc	r7, r15
     158:	08 10       	cpse	r0, r8
     15a:	7f 3e       	cpi	r23, 0xEF	; 239
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 3e       	cpi	r20, 0xE1	; 225
     160:	7f 09       	sbc	r23, r15
     162:	09 09       	sbc	r16, r9
     164:	06 3e       	cpi	r16, 0xE6	; 230
     166:	41 51       	subi	r20, 0x11	; 17
     168:	21 5e       	subi	r18, 0xE1	; 225
     16a:	7f 09       	sbc	r23, r15
     16c:	19 29       	or	r17, r9
     16e:	46 46       	sbci	r20, 0x66	; 102
     170:	49 49       	sbci	r20, 0x99	; 153
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	01 01       	movw	r0, r2
     176:	7f 01       	movw	r14, r30
     178:	01 3f       	cpi	r16, 0xF1	; 241
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	40 3f       	cpi	r20, 0xF0	; 240
     17e:	1f 20       	and	r1, r15
     180:	40 20       	and	r4, r0
     182:	1f 7f       	andi	r17, 0xFF	; 255
     184:	20 18       	sub	r2, r0
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	63 14       	cp	r6, r3
     18a:	08 14       	cp	r0, r8
     18c:	63 03       	mulsu	r22, r19
     18e:	04 78       	andi	r16, 0x84	; 132
     190:	04 03       	mulsu	r16, r20
     192:	61 51       	subi	r22, 0x11	; 17
     194:	49 45       	sbci	r20, 0x59	; 89
     196:	43 00       	.word	0x0043	; ????
     198:	00 7f       	andi	r16, 0xF0	; 240
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	02 04       	cpc	r0, r2
     19e:	08 10       	cpse	r0, r8
     1a0:	20 41       	sbci	r18, 0x10	; 16
     1a2:	41 7f       	andi	r20, 0xF1	; 241
     1a4:	00 00       	nop
     1a6:	04 02       	muls	r16, r20
     1a8:	01 02       	muls	r16, r17
     1aa:	04 40       	sbci	r16, 0x04	; 4
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 40       	sbci	r20, 0x00	; 0
     1b0:	00 01       	movw	r0, r0
     1b2:	02 04       	cpc	r0, r2
     1b4:	00 20       	and	r0, r0
     1b6:	54 54       	subi	r21, 0x44	; 68
     1b8:	54 78       	andi	r21, 0x84	; 132
     1ba:	7f 48       	sbci	r23, 0x8F	; 143
     1bc:	44 44       	sbci	r20, 0x44	; 68
     1be:	38 38       	cpi	r19, 0x88	; 136
     1c0:	44 44       	sbci	r20, 0x44	; 68
     1c2:	44 20       	and	r4, r4
     1c4:	38 44       	sbci	r19, 0x48	; 72
     1c6:	44 48       	sbci	r20, 0x84	; 132
     1c8:	7f 38       	cpi	r23, 0x8F	; 143
     1ca:	54 54       	subi	r21, 0x44	; 68
     1cc:	54 18       	sub	r5, r4
     1ce:	08 7e       	andi	r16, 0xE8	; 232
     1d0:	09 01       	movw	r0, r18
     1d2:	02 08       	sbc	r0, r2
     1d4:	14 54       	subi	r17, 0x44	; 68
     1d6:	54 3c       	cpi	r21, 0xC4	; 196
     1d8:	7f 08       	sbc	r7, r15
     1da:	04 04       	cpc	r0, r4
     1dc:	78 00       	.word	0x0078	; ????
     1de:	44 7d       	andi	r20, 0xD4	; 212
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	44 3d       	cpi	r20, 0xD4	; 212
     1e6:	00 00       	nop
     1e8:	7f 10       	cpse	r7, r15
     1ea:	28 44       	sbci	r18, 0x48	; 72
     1ec:	00 41       	sbci	r16, 0x10	; 16
     1ee:	7f 40       	sbci	r23, 0x0F	; 15
     1f0:	00 7c       	andi	r16, 0xC0	; 192
     1f2:	04 18       	sub	r0, r4
     1f4:	04 78       	andi	r16, 0x84	; 132
     1f6:	7c 08       	sbc	r7, r12
     1f8:	04 04       	cpc	r0, r4
     1fa:	78 38       	cpi	r23, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 38       	cpi	r20, 0x84	; 132
     200:	7c 14       	cp	r7, r12
     202:	14 14       	cp	r1, r4
     204:	08 08       	sbc	r0, r8
     206:	14 14       	cp	r1, r4
     208:	18 7c       	andi	r17, 0xC8	; 200
     20a:	7c 08       	sbc	r7, r12
     20c:	04 04       	cpc	r0, r4
     20e:	08 48       	sbci	r16, 0x88	; 136
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 20       	and	r5, r4
     214:	04 3f       	cpi	r16, 0xF4	; 244
     216:	44 40       	sbci	r20, 0x04	; 4
     218:	20 3c       	cpi	r18, 0xC0	; 192
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	20 7c       	andi	r18, 0xC0	; 192
     21e:	1c 20       	and	r1, r12
     220:	40 20       	and	r4, r0
     222:	1c 3c       	cpi	r17, 0xCC	; 204
     224:	40 30       	cpi	r20, 0x00	; 0
     226:	40 3c       	cpi	r20, 0xC0	; 192
     228:	44 28       	or	r4, r4
     22a:	10 28       	or	r1, r0
     22c:	44 0c       	add	r4, r4
     22e:	50 50       	subi	r21, 0x00	; 0
     230:	50 3c       	cpi	r21, 0xC0	; 192
     232:	44 64       	ori	r20, 0x44	; 68
     234:	54 4c       	sbci	r21, 0xC4	; 196
     236:	44 00       	.word	0x0044	; ????
     238:	08 36       	cpi	r16, 0x68	; 104
     23a:	41 00       	.word	0x0041	; ????
     23c:	00 00       	nop
     23e:	7f 00       	.word	0x007f	; ????
     240:	00 00       	nop
     242:	41 36       	cpi	r20, 0x61	; 97
     244:	08 00       	.word	0x0008	; ????
     246:	02 01       	movw	r0, r4
     248:	03 02       	muls	r16, r19
     24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	13 e0       	ldi	r17, 0x03	; 3
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	e6 eb       	ldi	r30, 0xB6	; 182
     260:	fa e1       	ldi	r31, 0x1A	; 26
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a0 3a       	cpi	r26, 0xA0	; 160
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	23 e0       	ldi	r18, 0x03	; 3
     270:	a0 ea       	ldi	r26, 0xA0	; 160
     272:	b3 e0       	ldi	r27, 0x03	; 3
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a4 3b       	cpi	r26, 0xB4	; 180
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <main>
     282:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <init_clock_adc>:
 */ 
#include "adc.h"
#include "../header/addresses.h"

void init_clock_adc() {
    DDRD |= (1 << PD4);
     28a:	81 b3       	in	r24, 0x11	; 17
     28c:	80 61       	ori	r24, 0x10	; 16
     28e:	81 bb       	out	0x11, r24	; 17
	
	TCCR3A = (1 << COM3A0) | (1 << WGM30) | (1 << WGM31) & ~(1 << COM3A1) & ~(1 << FOC3A);
     290:	83 e4       	ldi	r24, 0x43	; 67
     292:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
    TCCR3B = (1 << WGM33) | (1 << WGM32) | (1 << CS30) & ~(1 << CS31) & ~(1 << CS32);
     296:	89 e1       	ldi	r24, 0x19	; 25
     298:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
		
	OCR3AH = 0x0;
     29c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
	OCR3AL = 0x1;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     2a6:	08 95       	ret

000002a8 <read_channels>:
}

adc_channels read_channels(){
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	60 97       	sbiw	r28, 0x10	; 16
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
	 
	adc_channels adc_readings;
	volatile uint8_t *ext_adc = (uint8_t *) ADDR_BASE + ADDR_OFFSET_ADC; 
	ext_adc[0] = 0;
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	f4 e1       	ldi	r31, 0x14	; 20
     2c0:	10 82       	st	Z, r1
	adc_readings.joystick_up_down = ext_adc[0];
     2c2:	80 81       	ld	r24, Z
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	9a 87       	std	Y+10, r25	; 0x0a
     2c8:	89 87       	std	Y+9, r24	; 0x09
	adc_readings.joystick_left_right = ext_adc[0];
     2ca:	80 81       	ld	r24, Z
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	9c 87       	std	Y+12, r25	; 0x0c
     2d0:	8b 87       	std	Y+11, r24	; 0x0b
	adc_readings.shoot_button = ext_adc[0];
     2d2:	80 81       	ld	r24, Z
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	9e 87       	std	Y+14, r25	; 0x0e
     2d8:	8d 87       	std	Y+13, r24	; 0x0d
	adc_readings.slider_right = ext_adc[0];
     2da:	80 81       	ld	r24, Z
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	98 8b       	std	Y+16, r25	; 0x10
     2e0:	8f 87       	std	Y+15, r24	; 0x0f
	return adc_readings;
     2e2:	88 e0       	ldi	r24, 0x08	; 8
     2e4:	fe 01       	movw	r30, r28
     2e6:	39 96       	adiw	r30, 0x09	; 9
     2e8:	de 01       	movw	r26, r28
     2ea:	11 96       	adiw	r26, 0x01	; 1
     2ec:	01 90       	ld	r0, Z+
     2ee:	0d 92       	st	X+, r0
     2f0:	8a 95       	dec	r24
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <read_channels+0x44>
     2f4:	29 81       	ldd	r18, Y+1	; 0x01
     2f6:	3a 81       	ldd	r19, Y+2	; 0x02
     2f8:	4b 81       	ldd	r20, Y+3	; 0x03
     2fa:	5c 81       	ldd	r21, Y+4	; 0x04
     2fc:	6d 81       	ldd	r22, Y+5	; 0x05
     2fe:	7e 81       	ldd	r23, Y+6	; 0x06
}
     300:	8f 81       	ldd	r24, Y+7	; 0x07
     302:	98 85       	ldd	r25, Y+8	; 0x08
     304:	60 96       	adiw	r28, 0x10	; 16
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <send_cmd_to_oled>:
#include "oled.h"

#include <avr/pgmspace.h>

void send_cmd_to_oled(uint8_t cmd){
	OLED_CONTROL_ADDRESS = cmd; 
     316:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xc4c>
     31a:	08 95       	ret

0000031c <send_data_to_oled>:
}

void send_data_to_oled(uint8_t data){
	OLED_DATA_ADDRESS = data; 
     31c:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xe4c>
     320:	08 95       	ret

00000322 <oled_init>:
}


void oled_init() {
    
	send_cmd_to_oled(0xAE);
     322:	8e ea       	ldi	r24, 0xAE	; 174
     324:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0xA1);
     328:	81 ea       	ldi	r24, 0xA1	; 161
     32a:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0xDA);
     32e:	8a ed       	ldi	r24, 0xDA	; 218
     330:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0x12);
     334:	82 e1       	ldi	r24, 0x12	; 18
     336:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0xC8);
     33a:	88 ec       	ldi	r24, 0xC8	; 200
     33c:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    
	send_cmd_to_oled(0xA8);
     340:	88 ea       	ldi	r24, 0xA8	; 168
     342:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0x3F);
     346:	8f e3       	ldi	r24, 0x3F	; 63
     348:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    
	send_cmd_to_oled(0xD5);
     34c:	85 ed       	ldi	r24, 0xD5	; 213
     34e:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0x80);
     352:	80 e8       	ldi	r24, 0x80	; 128
     354:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
	
    send_cmd_to_oled(0x81);
     358:	81 e8       	ldi	r24, 0x81	; 129
     35a:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0x50);
     35e:	80 e5       	ldi	r24, 0x50	; 80
     360:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
	
    send_cmd_to_oled(0xD9);
     364:	89 ed       	ldi	r24, 0xD9	; 217
     366:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0x21);
     36a:	81 e2       	ldi	r24, 0x21	; 33
     36c:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
	
    send_cmd_to_oled(0x20);
     370:	80 e2       	ldi	r24, 0x20	; 32
     372:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0x02);
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
	
    send_cmd_to_oled(0xDB);
     37c:	8b ed       	ldi	r24, 0xDB	; 219
     37e:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0x30);
     382:	80 e3       	ldi	r24, 0x30	; 48
     384:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
	
    send_cmd_to_oled(0xAD);
     388:	8d ea       	ldi	r24, 0xAD	; 173
     38a:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0x00);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
	
    send_cmd_to_oled(0xA4);
     394:	84 ea       	ldi	r24, 0xA4	; 164
     396:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0xA6);
     39a:	86 ea       	ldi	r24, 0xA6	; 166
     39c:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
    send_cmd_to_oled(0xAF);
     3a0:	8f ea       	ldi	r24, 0xAF	; 175
     3a2:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
     3a6:	08 95       	ret

000003a8 <oled_goto_pos>:
		send_data_to_oled(0x0);	
	}
	
}

void oled_goto_pos(int page_start, int segment){
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	eb 01       	movw	r28, r22
	send_cmd_to_oled(page_start	| 0xB0);
     3ae:	80 6b       	ori	r24, 0xB0	; 176
     3b0:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
	send_cmd_to_oled(segment & 0x0F);
     3b4:	8c 2f       	mov	r24, r28
     3b6:	8f 70       	andi	r24, 0x0F	; 15
     3b8:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
	send_cmd_to_oled(((segment & 0xF0) >> 4) | (0x10));
     3bc:	ce 01       	movw	r24, r28
     3be:	80 7f       	andi	r24, 0xF0	; 240
     3c0:	99 27       	eor	r25, r25
     3c2:	95 95       	asr	r25
     3c4:	87 95       	ror	r24
     3c6:	95 95       	asr	r25
     3c8:	87 95       	ror	r24
     3ca:	95 95       	asr	r25
     3cc:	87 95       	ror	r24
     3ce:	95 95       	asr	r25
     3d0:	87 95       	ror	r24
     3d2:	80 61       	ori	r24, 0x10	; 16
     3d4:	0e 94 8b 01 	call	0x316	; 0x316 <send_cmd_to_oled>
}
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <oled_clear_screen>:
    send_cmd_to_oled(0xAF);
	
}


void oled_clear_screen(){
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
	oled_goto_pos(0,0);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <oled_goto_pos>
	int pages = 8;
	int coloums = 128;
	for (int i = 0; i < pages; i++){
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	11 c0       	rjmp	.+34     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		oled_goto_pos(i,0);
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	c8 01       	movw	r24, r16
     3fe:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <oled_goto_pos>
		for (int ii = 0; ii < coloums; ii++){
     402:	c0 e0       	ldi	r28, 0x00	; 0
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	04 c0       	rjmp	.+8      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
			send_data_to_oled(0x0);	
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 8e 01 	call	0x31c	; 0x31c <send_data_to_oled>
	oled_goto_pos(0,0);
	int pages = 8;
	int coloums = 128;
	for (int i = 0; i < pages; i++){
		oled_goto_pos(i,0);
		for (int ii = 0; ii < coloums; ii++){
     40e:	21 96       	adiw	r28, 0x01	; 1
     410:	c0 38       	cpi	r28, 0x80	; 128
     412:	d1 05       	cpc	r29, r1
     414:	cc f3       	brlt	.-14     	; 0x408 <__DATA_REGION_LENGTH__+0x8>

void oled_clear_screen(){
	oled_goto_pos(0,0);
	int pages = 8;
	int coloums = 128;
	for (int i = 0; i < pages; i++){
     416:	0f 5f       	subi	r16, 0xFF	; 255
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	08 30       	cpi	r16, 0x08	; 8
     41c:	11 05       	cpc	r17, r1
     41e:	64 f3       	brlt	.-40     	; 0x3f8 <oled_clear_screen+0x1a>
		oled_goto_pos(i,0);
		for (int ii = 0; ii < coloums; ii++){
			send_data_to_oled(0x0);	
		}
	}
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <oled_clear_line>:

void oled_clear_line(int line){
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
	oled_goto_pos(line,0);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <oled_goto_pos>
	int coloums = 128;	
	for (int ii = 0; ii < coloums; ii++){
     436:	c0 e0       	ldi	r28, 0x00	; 0
     438:	d0 e0       	ldi	r29, 0x00	; 0
     43a:	04 c0       	rjmp	.+8      	; 0x444 <oled_clear_line+0x1a>
		send_data_to_oled(0x0);	
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 8e 01 	call	0x31c	; 0x31c <send_data_to_oled>
}

void oled_clear_line(int line){
	oled_goto_pos(line,0);
	int coloums = 128;	
	for (int ii = 0; ii < coloums; ii++){
     442:	21 96       	adiw	r28, 0x01	; 1
     444:	c0 38       	cpi	r28, 0x80	; 128
     446:	d1 05       	cpc	r29, r1
     448:	cc f3       	brlt	.-14     	; 0x43c <oled_clear_line+0x12>
		send_data_to_oled(0x0);	
	}
	
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <send_char>:
	send_cmd_to_oled(page_start	| 0xB0);
	send_cmd_to_oled(segment & 0x0F);
	send_cmd_to_oled(((segment & 0xF0) >> 4) | (0x10));
}

void send_char(char c){
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	18 2f       	mov	r17, r24
	for (int i = 0; i < font_size; i++){
     458:	c0 e0       	ldi	r28, 0x00	; 0
     45a:	d0 e0       	ldi	r29, 0x00	; 0
     45c:	12 c0       	rjmp	.+36     	; 0x482 <send_char+0x32>
		char letter_byte = pgm_read_byte(&font5[c - 32][i]);
     45e:	81 2f       	mov	r24, r17
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	80 97       	sbiw	r24, 0x20	; 32
     464:	fc 01       	movw	r30, r24
     466:	ee 0f       	add	r30, r30
     468:	ff 1f       	adc	r31, r31
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	e8 0f       	add	r30, r24
     470:	f9 1f       	adc	r31, r25
     472:	ec 0f       	add	r30, r28
     474:	fd 1f       	adc	r31, r29
     476:	e0 59       	subi	r30, 0x90	; 144
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	84 91       	lpm	r24, Z
		send_data_to_oled(letter_byte);
     47c:	0e 94 8e 01 	call	0x31c	; 0x31c <send_data_to_oled>
	send_cmd_to_oled(segment & 0x0F);
	send_cmd_to_oled(((segment & 0xF0) >> 4) | (0x10));
}

void send_char(char c){
	for (int i = 0; i < font_size; i++){
     480:	21 96       	adiw	r28, 0x01	; 1
     482:	c5 30       	cpi	r28, 0x05	; 5
     484:	d1 05       	cpc	r29, r1
     486:	5c f3       	brlt	.-42     	; 0x45e <send_char+0xe>
		char letter_byte = pgm_read_byte(&font5[c - 32][i]);
		send_data_to_oled(letter_byte);
	}
	
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <oled_print_string>:

void oled_print_string(char str[], int line, int pos){
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	8c 01       	movw	r16, r24
     49a:	cb 01       	movw	r24, r22
	oled_goto_pos(line, pos);
     49c:	ba 01       	movw	r22, r20
     49e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <oled_goto_pos>
	for (int i = 0; i < strlen(str); i++){
     4a2:	c0 e0       	ldi	r28, 0x00	; 0
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <oled_print_string+0x26>
		send_char(str[i]);
     4a8:	f8 01       	movw	r30, r16
     4aa:	ec 0f       	add	r30, r28
     4ac:	fd 1f       	adc	r31, r29
     4ae:	80 81       	ld	r24, Z
     4b0:	0e 94 28 02 	call	0x450	; 0x450 <send_char>
	
}

void oled_print_string(char str[], int line, int pos){
	oled_goto_pos(line, pos);
	for (int i = 0; i < strlen(str); i++){
     4b4:	21 96       	adiw	r28, 0x01	; 1
     4b6:	f8 01       	movw	r30, r16
     4b8:	01 90       	ld	r0, Z+
     4ba:	00 20       	and	r0, r0
     4bc:	e9 f7       	brne	.-6      	; 0x4b8 <oled_print_string+0x28>
     4be:	31 97       	sbiw	r30, 0x01	; 1
     4c0:	e0 1b       	sub	r30, r16
     4c2:	f1 0b       	sbc	r31, r17
     4c4:	ce 17       	cp	r28, r30
     4c6:	df 07       	cpc	r29, r31
     4c8:	78 f3       	brcs	.-34     	; 0x4a8 <oled_print_string+0x18>
		send_char(str[i]);
	}
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	08 95       	ret

000004d4 <oled_show_main_menu>:

void oled_show_main_menu() {
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	28 97       	sbiw	r28, 0x08	; 8
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
	//oled_clear_screen();
	const char *menu_items[] = {"New Game", "Instructions", "Scoreboard", "Set Duration"};
     4ec:	88 e0       	ldi	r24, 0x08	; 8
     4ee:	ee e1       	ldi	r30, 0x1E	; 30
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	de 01       	movw	r26, r28
     4f4:	11 96       	adiw	r26, 0x01	; 1
     4f6:	01 90       	ld	r0, Z+
     4f8:	0d 92       	st	X+, r0
     4fa:	8a 95       	dec	r24
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <oled_show_main_menu+0x22>
    int num_items = sizeof(menu_items) / sizeof(menu_items[0]);

	//oled_goto_pos(1,20);
	oled_print_string("Main Menu", 1, 35);
     4fe:	43 e2       	ldi	r20, 0x23	; 35
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	8b e3       	ldi	r24, 0x3B	; 59
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>

    for (int i = 2; i < num_items+2; i++) {
     50e:	02 e0       	ldi	r16, 0x02	; 2
     510:	10 e0       	ldi	r17, 0x00	; 0
     512:	13 c0       	rjmp	.+38     	; 0x53a <__stack+0x3b>
       // oled_goto_pos(i, 0); // One item per page
		//oled_print_string(" ",i); 
		oled_print_string(menu_items[i-2],i,0);
     514:	f8 01       	movw	r30, r16
     516:	32 97       	sbiw	r30, 0x02	; 2
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	8c 0f       	add	r24, r28
     522:	9d 1f       	adc	r25, r29
     524:	e8 0f       	add	r30, r24
     526:	f9 1f       	adc	r31, r25
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	b8 01       	movw	r22, r16
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
    int num_items = sizeof(menu_items) / sizeof(menu_items[0]);

	//oled_goto_pos(1,20);
	oled_print_string("Main Menu", 1, 35);

    for (int i = 2; i < num_items+2; i++) {
     536:	0f 5f       	subi	r16, 0xFF	; 255
     538:	1f 4f       	sbci	r17, 0xFF	; 255
     53a:	06 30       	cpi	r16, 0x06	; 6
     53c:	11 05       	cpc	r17, r1
     53e:	54 f3       	brlt	.-44     	; 0x514 <__stack+0x15>
       // oled_goto_pos(i, 0); // One item per page
		//oled_print_string(" ",i); 
		oled_print_string(menu_items[i-2],i,0);
    }
}
     540:	28 96       	adiw	r28, 0x08	; 8
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	08 95       	ret

00000556 <oled_show_inst>:

void oled_show_inst() {
	//oled_clear_screen();

	oled_print_string("INSTRUCTIONS",1,30);
     556:	4e e1       	ldi	r20, 0x1E	; 30
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	83 e3       	ldi	r24, 0x33	; 51
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>

	//oled_goto_pos(1,0);
	oled_print_string("Controll the shooter with", 2,0);
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	62 e0       	ldi	r22, 0x02	; 2
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
	//oled_goto_pos(2,0);
	oled_print_string("slider and joystick.",3,0);
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	63 e0       	ldi	r22, 0x03	; 3
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	8a e5       	ldi	r24, 0x5A	; 90
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
	//oled_goto_pos(3,0);
	oled_print_string("Shoot by pressing button.",4,0);
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	64 e0       	ldi	r22, 0x04	; 4
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	8f e6       	ldi	r24, 0x6F	; 111
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
	//oled_goto_pos(4,0);
	oled_print_string("Score as many goals as", 5,0); 
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	65 e0       	ldi	r22, 0x05	; 5
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	89 e8       	ldi	r24, 0x89	; 137
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
	oled_print_string("possible within the limit",6,0);
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	66 e0       	ldi	r22, 0x06	; 6
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	80 ea       	ldi	r24, 0xA0	; 160
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>

	oled_print_string("Main Menu",7,83);
     5b6:	43 e5       	ldi	r20, 0x53	; 83
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	67 e0       	ldi	r22, 0x07	; 7
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	8b e3       	ldi	r24, 0x3B	; 59
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
     5c6:	08 95       	ret

000005c8 <oled_show_duration>:
}

void oled_show_duration() {
	//oled_clear_screen(); 
	oled_print_string("Set Game Duration", 1, 30); 
     5c8:	4e e1       	ldi	r20, 0x1E	; 30
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	8a eb       	ldi	r24, 0xBA	; 186
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
	oled_print_string("15 seconds", 2,0); 
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	62 e0       	ldi	r22, 0x02	; 2
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	8a e4       	ldi	r24, 0x4A	; 74
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
	oled_print_string("30 seconds", 3,0);
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	63 e0       	ldi	r22, 0x03	; 3
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	87 e5       	ldi	r24, 0x57	; 87
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
	oled_print_string("45 seconds", 4,0);
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	64 e0       	ldi	r22, 0x04	; 4
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	84 e6       	ldi	r24, 0x64	; 100
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
	oled_print_string("60 seconds", 5,0);
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	65 e0       	ldi	r22, 0x05	; 5
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	81 e7       	ldi	r24, 0x71	; 113
     612:	93 e0       	ldi	r25, 0x03	; 3
     614:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
     618:	08 95       	ret

0000061a <oled_show_scoreboard>:
}

void oled_show_scoreboard() {
	//oled_clear_screen(); 
	oled_print_string("Scoreboard", 0 ,30); 
     61a:	4e e1       	ldi	r20, 0x1E	; 30
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	8e ea       	ldi	r24, 0xAE	; 174
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
	oled_print_string("Main menu", 7, 83 ); 
     62a:	43 e5       	ldi	r20, 0x53	; 83
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	67 e0       	ldi	r22, 0x07	; 7
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	8c ec       	ldi	r24, 0xCC	; 204
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
     63a:	08 95       	ret

0000063c <oled_show_new_game>:
	 
}

void oled_show_new_game( ) {
	oled_print_string("Pick user", 0, 30); 	
     63c:	4e e1       	ldi	r20, 0x1E	; 30
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	86 ed       	ldi	r24, 0xD6	; 214
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
     64c:	08 95       	ret

0000064e <init_UART>:

void flush_UART( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
}
     64e:	10 bc       	out	0x20, r1	; 32
     650:	8f e1       	ldi	r24, 0x1F	; 31
     652:	89 b9       	out	0x09, r24	; 9
     654:	88 e1       	ldi	r24, 0x18	; 24
     656:	8a b9       	out	0x0a, r24	; 10
     658:	8e e8       	ldi	r24, 0x8E	; 142
     65a:	80 bd       	out	0x20, r24	; 32
     65c:	08 95       	ret

0000065e <recieve_char_UART>:

unsigned char recieve_char_UART(){
	while ( !( UCSR0A & (1 << RXC0) ) );
     65e:	5f 9b       	sbis	0x0b, 7	; 11
     660:	fe cf       	rjmp	.-4      	; 0x65e <recieve_char_UART>
	return(UDR0);
     662:	8c b1       	in	r24, 0x0c	; 12
}
     664:	08 95       	ret

00000666 <transmit_char_UART>:

void transmit_char_UART(char letter){
	while (! (UCSR0A & (1<<UDRE0))){};
     666:	5d 9b       	sbis	0x0b, 5	; 11
     668:	fe cf       	rjmp	.-4      	; 0x666 <transmit_char_UART>
	UDR0 = letter;
     66a:	8c b9       	out	0x0c, r24	; 12
     66c:	08 95       	ret

0000066e <init_external_memory_bus>:
	msg_send.data[0] = joystick_x_value;
	msg_send.data[1] = joystick_y_value;
	printf("joystick sent x %i , y %i", joystick_x_value, joystick_y_value);
	
	can_send_message(msg_send);
}
     66e:	80 e8       	ldi	r24, 0x80	; 128
     670:	85 bf       	out	0x35, r24	; 53
     672:	88 e0       	ldi	r24, 0x08	; 8
     674:	86 bf       	out	0x36, r24	; 54
     676:	80 e2       	ldi	r24, 0x20	; 32
     678:	80 bf       	out	0x30, r24	; 48
     67a:	08 95       	ret

0000067c <SPI_MasterInit>:
     67c:	80 eb       	ldi	r24, 0xB0	; 176
     67e:	87 bb       	out	0x17, r24	; 23
     680:	81 e5       	ldi	r24, 0x51	; 81
     682:	8d b9       	out	0x0d, r24	; 13
     684:	08 95       	ret

00000686 <SPI_MasterTransmit>:
     686:	8f b9       	out	0x0f, r24	; 15
     688:	77 9b       	sbis	0x0e, 7	; 14
     68a:	fe cf       	rjmp	.-4      	; 0x688 <SPI_MasterTransmit+0x2>
     68c:	08 95       	ret

0000068e <SPI_MasterRecieve>:
     68e:	1f b8       	out	0x0f, r1	; 15
     690:	77 9b       	sbis	0x0e, 7	; 14
     692:	fe cf       	rjmp	.-4      	; 0x690 <SPI_MasterRecieve+0x2>
     694:	8f b1       	in	r24, 0x0f	; 15
     696:	08 95       	ret

00000698 <can_read>:
     698:	cf 93       	push	r28
     69a:	c8 2f       	mov	r28, r24
     69c:	88 b3       	in	r24, 0x18	; 24
     69e:	8f 7e       	andi	r24, 0xEF	; 239
     6a0:	88 bb       	out	0x18, r24	; 24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     6a8:	8c 2f       	mov	r24, r28
     6aa:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     6ae:	0e 94 47 03 	call	0x68e	; 0x68e <SPI_MasterRecieve>
     6b2:	98 b3       	in	r25, 0x18	; 24
     6b4:	90 61       	ori	r25, 0x10	; 16
     6b6:	98 bb       	out	0x18, r25	; 24
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <can_reset>:
     6bc:	88 b3       	in	r24, 0x18	; 24
     6be:	8f 7e       	andi	r24, 0xEF	; 239
     6c0:	88 bb       	out	0x18, r24	; 24
     6c2:	80 ec       	ldi	r24, 0xC0	; 192
     6c4:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     6c8:	88 b3       	in	r24, 0x18	; 24
     6ca:	80 61       	ori	r24, 0x10	; 16
     6cc:	88 bb       	out	0x18, r24	; 24
     6ce:	08 95       	ret

000006d0 <can_write>:
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	d8 2f       	mov	r29, r24
     6d6:	c6 2f       	mov	r28, r22
     6d8:	88 b3       	in	r24, 0x18	; 24
     6da:	8f 7e       	andi	r24, 0xEF	; 239
     6dc:	88 bb       	out	0x18, r24	; 24
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     6e4:	8d 2f       	mov	r24, r29
     6e6:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     6ea:	8c 2f       	mov	r24, r28
     6ec:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     6f0:	88 b3       	in	r24, 0x18	; 24
     6f2:	80 61       	ori	r24, 0x10	; 16
     6f4:	88 bb       	out	0x18, r24	; 24
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <can_request_to_send>:
     6fc:	98 b3       	in	r25, 0x18	; 24
     6fe:	9f 7e       	andi	r25, 0xEF	; 239
     700:	98 bb       	out	0x18, r25	; 24
     702:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     706:	88 b3       	in	r24, 0x18	; 24
     708:	80 61       	ori	r24, 0x10	; 16
     70a:	88 bb       	out	0x18, r24	; 24
     70c:	08 95       	ret

0000070e <can_bit_modify_instruction>:
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	18 2f       	mov	r17, r24
     716:	d6 2f       	mov	r29, r22
     718:	c4 2f       	mov	r28, r20
     71a:	88 b3       	in	r24, 0x18	; 24
     71c:	8f 7e       	andi	r24, 0xEF	; 239
     71e:	88 bb       	out	0x18, r24	; 24
     720:	85 e0       	ldi	r24, 0x05	; 5
     722:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     726:	81 2f       	mov	r24, r17
     728:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     72c:	8d 2f       	mov	r24, r29
     72e:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     732:	8c 2f       	mov	r24, r28
     734:	0e 94 43 03 	call	0x686	; 0x686 <SPI_MasterTransmit>
     738:	88 b3       	in	r24, 0x18	; 24
     73a:	80 61       	ori	r24, 0x10	; 16
     73c:	88 bb       	out	0x18, r24	; 24
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	08 95       	ret

00000746 <can_send_message>:
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	2b 97       	sbiw	r28, 0x0b	; 11
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	e9 82       	std	Y+1, r14	; 0x01
     764:	fa 82       	std	Y+2, r15	; 0x02
     766:	0b 83       	std	Y+3, r16	; 0x03
     768:	1c 83       	std	Y+4, r17	; 0x04
     76a:	2d 83       	std	Y+5, r18	; 0x05
     76c:	3e 83       	std	Y+6, r19	; 0x06
     76e:	4f 83       	std	Y+7, r20	; 0x07
     770:	58 87       	std	Y+8, r21	; 0x08
     772:	69 87       	std	Y+9, r22	; 0x09
     774:	7a 87       	std	Y+10, r23	; 0x0a
     776:	8b 87       	std	Y+11, r24	; 0x0b
     778:	6e 2d       	mov	r22, r14
     77a:	82 e3       	ldi	r24, 0x32	; 50
     77c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     780:	6a 81       	ldd	r22, Y+2	; 0x02
     782:	81 e3       	ldi	r24, 0x31	; 49
     784:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     788:	0b 81       	ldd	r16, Y+3	; 0x03
     78a:	60 2f       	mov	r22, r16
     78c:	85 e3       	ldi	r24, 0x35	; 53
     78e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     792:	10 e0       	ldi	r17, 0x00	; 0
     794:	0c c0       	rjmp	.+24     	; 0x7ae <can_send_message+0x68>
     796:	e4 e0       	ldi	r30, 0x04	; 4
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	ec 0f       	add	r30, r28
     79c:	fd 1f       	adc	r31, r29
     79e:	e1 0f       	add	r30, r17
     7a0:	f1 1d       	adc	r31, r1
     7a2:	60 81       	ld	r22, Z
     7a4:	86 e3       	ldi	r24, 0x36	; 54
     7a6:	81 0f       	add	r24, r17
     7a8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     7ac:	1f 5f       	subi	r17, 0xFF	; 255
     7ae:	10 17       	cp	r17, r16
     7b0:	90 f3       	brcs	.-28     	; 0x796 <can_send_message+0x50>
     7b2:	81 e8       	ldi	r24, 0x81	; 129
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <can_request_to_send>
     7ba:	2b 96       	adiw	r28, 0x0b	; 11
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	08 95       	ret

000007d4 <can_recieve_message>:
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	7c 01       	movw	r14, r24
     7e0:	8c e2       	ldi	r24, 0x2C	; 44
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 4c 03 	call	0x698	; 0x698 <can_read>
     7e8:	80 fd       	sbrc	r24, 0
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <can_recieve_message+0x26>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	31 c0       	rjmp	.+98     	; 0x854 <can_recieve_message+0x80>
     7f2:	8c e2       	ldi	r24, 0x2C	; 44
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 4c 03 	call	0x698	; 0x698 <can_read>
     7fa:	80 ff       	sbrs	r24, 0
     7fc:	fa cf       	rjmp	.-12     	; 0x7f2 <can_recieve_message+0x1e>
     7fe:	81 e6       	ldi	r24, 0x61	; 97
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 4c 03 	call	0x698	; 0x698 <can_read>
     806:	f7 01       	movw	r30, r14
     808:	81 83       	std	Z+1, r24	; 0x01
     80a:	82 e6       	ldi	r24, 0x62	; 98
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 4c 03 	call	0x698	; 0x698 <can_read>
     812:	f7 01       	movw	r30, r14
     814:	80 83       	st	Z, r24
     816:	85 e6       	ldi	r24, 0x65	; 101
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 4c 03 	call	0x698	; 0x698 <can_read>
     81e:	f7 01       	movw	r30, r14
     820:	82 83       	std	Z+2, r24	; 0x02
     822:	10 e0       	ldi	r17, 0x00	; 0
     824:	0b c0       	rjmp	.+22     	; 0x83c <can_recieve_message+0x68>
     826:	c1 2f       	mov	r28, r17
     828:	d0 e0       	ldi	r29, 0x00	; 0
     82a:	ce 01       	movw	r24, r28
     82c:	8a 59       	subi	r24, 0x9A	; 154
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	0e 94 4c 03 	call	0x698	; 0x698 <can_read>
     834:	ce 0d       	add	r28, r14
     836:	df 1d       	adc	r29, r15
     838:	8b 83       	std	Y+3, r24	; 0x03
     83a:	1f 5f       	subi	r17, 0xFF	; 255
     83c:	f7 01       	movw	r30, r14
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	18 17       	cp	r17, r24
     842:	88 f3       	brcs	.-30     	; 0x826 <can_recieve_message+0x52>
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	8c e2       	ldi	r24, 0x2C	; 44
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 87 03 	call	0x70e	; 0x70e <can_bit_modify_instruction>
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <can_init>:
     860:	cf 93       	push	r28
     862:	c8 2f       	mov	r28, r24
     864:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_MasterInit>
     868:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_reset>
     86c:	2f ef       	ldi	r18, 0xFF	; 255
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	9e e0       	ldi	r25, 0x0E	; 14
     872:	21 50       	subi	r18, 0x01	; 1
     874:	80 40       	sbci	r24, 0x00	; 0
     876:	90 40       	sbci	r25, 0x00	; 0
     878:	e1 f7       	brne	.-8      	; 0x872 <can_init+0x12>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <can_init+0x1c>
     87c:	00 00       	nop
     87e:	8e e0       	ldi	r24, 0x0E	; 14
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 4c 03 	call	0x698	; 0x698 <can_read>
     886:	80 7e       	andi	r24, 0xE0	; 224
     888:	80 38       	cpi	r24, 0x80	; 128
     88a:	31 f0       	breq	.+12     	; 0x898 <can_init+0x38>
     88c:	85 e1       	ldi	r24, 0x15	; 21
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	0e 94 3f 0a 	call	0x147e	; 0x147e <puts>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	31 c0       	rjmp	.+98     	; 0x8fa <can_init+0x9a>
     898:	89 e4       	ldi	r24, 0x49	; 73
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
     8a4:	63 ec       	ldi	r22, 0xC3	; 195
     8a6:	8a e2       	ldi	r24, 0x2A	; 42
     8a8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     8ac:	61 eb       	ldi	r22, 0xB1	; 177
     8ae:	89 e2       	ldi	r24, 0x29	; 41
     8b0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     8b4:	65 e0       	ldi	r22, 0x05	; 5
     8b6:	88 e2       	ldi	r24, 0x28	; 40
     8b8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     8bc:	6c 2f       	mov	r22, r28
     8be:	8f e0       	ldi	r24, 0x0F	; 15
     8c0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     8c4:	8e e0       	ldi	r24, 0x0E	; 14
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 4c 03 	call	0x698	; 0x698 <can_read>
     8cc:	1f 92       	push	r1
     8ce:	8f 93       	push	r24
     8d0:	87 e6       	ldi	r24, 0x67	; 103
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
     8dc:	6f e1       	ldi	r22, 0x1F	; 31
     8de:	8b e2       	ldi	r24, 0x2B	; 43
     8e0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     8e4:	60 e6       	ldi	r22, 0x60	; 96
     8e6:	80 e6       	ldi	r24, 0x60	; 96
     8e8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <can_write>
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <calibrate_joystick>:
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	28 97       	sbiw	r28, 0x08	; 8
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	0e 94 54 01 	call	0x2a8	; 0x2a8 <read_channels>
     916:	29 83       	std	Y+1, r18	; 0x01
     918:	3a 83       	std	Y+2, r19	; 0x02
     91a:	4b 83       	std	Y+3, r20	; 0x03
     91c:	5c 83       	std	Y+4, r21	; 0x04
     91e:	2b 81       	ldd	r18, Y+3	; 0x03
     920:	3c 81       	ldd	r19, Y+4	; 0x04
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	2f 57       	subi	r18, 0x7F	; 127
     928:	31 09       	sbc	r19, r1
     92a:	30 93 a9 03 	sts	0x03A9, r19	; 0x8003a9 <joystick_error_x+0x1>
     92e:	20 93 a8 03 	sts	0x03A8, r18	; 0x8003a8 <joystick_error_x>
     932:	8f 57       	subi	r24, 0x7F	; 127
     934:	91 09       	sbc	r25, r1
     936:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <joystick_error_y+0x1>
     93a:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <joystick_error_y>
     93e:	28 96       	adiw	r28, 0x08	; 8
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <send_commands_to_node_2_can>:
#ifndef NODE_COMMUNICATION_H_
#define NODE_COMMUNICATION_H_

#include "mcp2515.h"

void send_commands_to_node_2_can(){
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	63 97       	sbiw	r28, 0x13	; 19
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
	adc_channels adc_values = read_channels();
     96c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <read_channels>
     970:	36 2f       	mov	r19, r22
	msg_send.data[2] = shoot_button;
	msg_send.data[3] = slider_value;
	
	//printf("joystick sent x %i , y %i , shoot_button: %i, slider: %i \n\r", joystick_x_value, joystick_y_value, shoot_button, slider_value);
	
	can_send_message(msg_send);
     972:	e1 2c       	mov	r14, r1
     974:	f1 2c       	mov	r15, r1
     976:	04 e0       	ldi	r16, 0x04	; 4
     978:	14 2f       	mov	r17, r20
     97a:	48 2f       	mov	r20, r24
     97c:	58 89       	ldd	r21, Y+16	; 0x10
     97e:	69 89       	ldd	r22, Y+17	; 0x11
     980:	7a 89       	ldd	r23, Y+18	; 0x12
     982:	8b 89       	ldd	r24, Y+19	; 0x13
     984:	0e 94 a3 03 	call	0x746	; 0x746 <can_send_message>
}
     988:	63 96       	adiw	r28, 0x13	; 19
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <reset_score_node_2_can>:

void reset_score_node_2_can(){
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	2b 97       	sbiw	r28, 0x0b	; 11
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
	can_message msg_send;
	msg_send.id_lower =  2;
	msg_send.id_higher = 0b00000000;
	msg_send.message_length_bytes = 0;
		
	can_send_message(msg_send);
     9be:	68 94       	set
     9c0:	ee 24       	eor	r14, r14
     9c2:	e1 f8       	bld	r14, 1
     9c4:	f1 2c       	mov	r15, r1
     9c6:	00 e0       	ldi	r16, 0x00	; 0
     9c8:	1c 81       	ldd	r17, Y+4	; 0x04
     9ca:	2d 81       	ldd	r18, Y+5	; 0x05
     9cc:	3e 81       	ldd	r19, Y+6	; 0x06
     9ce:	4f 81       	ldd	r20, Y+7	; 0x07
     9d0:	58 85       	ldd	r21, Y+8	; 0x08
     9d2:	69 85       	ldd	r22, Y+9	; 0x09
     9d4:	7a 85       	ldd	r23, Y+10	; 0x0a
     9d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     9d8:	0e 94 a3 03 	call	0x746	; 0x746 <can_send_message>
}
     9dc:	2b 96       	adiw	r28, 0x0b	; 11
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	08 95       	ret

000009f6 <sort_scoreboard>:
	.user_names = {"Jo Arve", "Studass", "Kristoffer", "Alf", "Even"}, // Initialize with user names
	.scores = {0, 0, 0, 0, 0},         // Initialize all scores to 0
	.selected_user_index = 0           // Default to the first user, "Jo Arve"
};

void sort_scoreboard(Scoreboard *scoreboard) {
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
	uint8_t i, j;
	for (i = 0; i < NUM_USERS - 1; i++) {
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	47 c0       	rjmp	.+142    	; 0xa8c <sort_scoreboard+0x96>
		for (j = 0; j < NUM_USERS - i - 1; j++) {
			if (scoreboard->scores[j] > scoreboard->scores[j + 1]) {
     9fe:	f9 01       	movw	r30, r18
     a00:	35 96       	adiw	r30, 0x05	; 5
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	e8 0f       	add	r30, r24
     a08:	f9 1f       	adc	r31, r25
     a0a:	a0 81       	ld	r26, Z
     a0c:	b1 81       	ldd	r27, Z+1	; 0x01
     a0e:	a9 01       	movw	r20, r18
     a10:	4f 5f       	subi	r20, 0xFF	; 255
     a12:	5f 4f       	sbci	r21, 0xFF	; 255
     a14:	f9 01       	movw	r30, r18
     a16:	36 96       	adiw	r30, 0x06	; 6
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	e8 0f       	add	r30, r24
     a1e:	f9 1f       	adc	r31, r25
     a20:	c0 81       	ld	r28, Z
     a22:	d1 81       	ldd	r29, Z+1	; 0x01
     a24:	ca 17       	cp	r28, r26
     a26:	db 07       	cpc	r29, r27
     a28:	18 f5       	brcc	.+70     	; 0xa70 <sort_scoreboard+0x7a>
				// Swap scores
				uint16_t temp_score = scoreboard->scores[j];
				scoreboard->scores[j] = scoreboard->scores[j + 1];
     a2a:	f9 01       	movw	r30, r18
     a2c:	35 96       	adiw	r30, 0x05	; 5
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	e8 0f       	add	r30, r24
     a34:	f9 1f       	adc	r31, r25
     a36:	d1 83       	std	Z+1, r29	; 0x01
     a38:	c0 83       	st	Z, r28
				scoreboard->scores[j + 1] = temp_score;
     a3a:	fa 01       	movw	r30, r20
     a3c:	35 96       	adiw	r30, 0x05	; 5
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	e8 0f       	add	r30, r24
     a44:	f9 1f       	adc	r31, r25
     a46:	b1 83       	std	Z+1, r27	; 0x01
     a48:	a0 83       	st	Z, r26

				// Swap corresponding user names
				char *temp_name = scoreboard->user_names[j];
     a4a:	22 0f       	add	r18, r18
     a4c:	33 1f       	adc	r19, r19
     a4e:	dc 01       	movw	r26, r24
     a50:	a2 0f       	add	r26, r18
     a52:	b3 1f       	adc	r27, r19
     a54:	2d 91       	ld	r18, X+
     a56:	3c 91       	ld	r19, X
     a58:	11 97       	sbiw	r26, 0x01	; 1
				scoreboard->user_names[j] = scoreboard->user_names[j + 1];
     a5a:	44 0f       	add	r20, r20
     a5c:	55 1f       	adc	r21, r21
     a5e:	fc 01       	movw	r30, r24
     a60:	e4 0f       	add	r30, r20
     a62:	f5 1f       	adc	r31, r21
     a64:	40 81       	ld	r20, Z
     a66:	51 81       	ldd	r21, Z+1	; 0x01
     a68:	4d 93       	st	X+, r20
     a6a:	5c 93       	st	X, r21
				scoreboard->user_names[j + 1] = temp_name;
     a6c:	31 83       	std	Z+1, r19	; 0x01
     a6e:	20 83       	st	Z, r18
};

void sort_scoreboard(Scoreboard *scoreboard) {
	uint8_t i, j;
	for (i = 0; i < NUM_USERS - 1; i++) {
		for (j = 0; j < NUM_USERS - i - 1; j++) {
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <sort_scoreboard+0x80>
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	26 2f       	mov	r18, r22
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	44 e0       	ldi	r20, 0x04	; 4
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	47 1b       	sub	r20, r23
     a80:	51 09       	sbc	r21, r1
     a82:	24 17       	cp	r18, r20
     a84:	35 07       	cpc	r19, r21
     a86:	0c f4       	brge	.+2      	; 0xa8a <sort_scoreboard+0x94>
     a88:	ba cf       	rjmp	.-140    	; 0x9fe <sort_scoreboard+0x8>
	.selected_user_index = 0           // Default to the first user, "Jo Arve"
};

void sort_scoreboard(Scoreboard *scoreboard) {
	uint8_t i, j;
	for (i = 0; i < NUM_USERS - 1; i++) {
     a8a:	7f 5f       	subi	r23, 0xFF	; 255
     a8c:	74 30       	cpi	r23, 0x04	; 4
     a8e:	90 f3       	brcs	.-28     	; 0xa74 <sort_scoreboard+0x7e>
				scoreboard->user_names[j] = scoreboard->user_names[j + 1];
				scoreboard->user_names[j + 1] = temp_name;
			}
		}
	}
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <update_scoreboard>:
void update_scoreboard(Scoreboard *scoreboard, uint8_t user_index, uint16_t new_score) {
	scoreboard->scores[user_index] = new_score;	
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	6b 5f       	subi	r22, 0xFB	; 251
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	66 0f       	add	r22, r22
     a9e:	77 1f       	adc	r23, r23
     aa0:	86 0f       	add	r24, r22
     aa2:	97 1f       	adc	r25, r23
     aa4:	fc 01       	movw	r30, r24
     aa6:	51 83       	std	Z+1, r21	; 0x01
     aa8:	40 83       	st	Z, r20
     aaa:	08 95       	ret

00000aac <fsm_main>:
User nextUsername = init;  

int main_menu_marked_inst = 0; 
int main_menu_marked_inst2 = 0;

void fsm_main() {
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	2b 97       	sbiw	r28, 0x0b	; 11
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
	
	
	adc_channels readings;
	
	//if(readings.joystick_up_down == 255 || readings.joystick_up_down == 0 || readings.shoot_button ==  255) {
	oled_clear_screen();
     ac0:	0e 94 ef 01 	call	0x3de	; 0x3de <oled_clear_screen>
	oled_goto_pos(0,0); 
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <oled_goto_pos>
	
	MainMenuPtrState mainMenuPtr = STATE_NEW_GAME;  
	MainMenuPtrState nextmainMenuPtr = STATE_NEW_GAME; 
	
	SetDurationPtrState currentDur = THIRTY; 
	SetDurationPtrState nextDur  = THIRTY; 
     ad0:	77 24       	eor	r7, r7
     ad2:	73 94       	inc	r7
	GUIScreen nextScreen = MAIN_MENU;
	
	MainMenuPtrState mainMenuPtr = STATE_NEW_GAME;  
	MainMenuPtrState nextmainMenuPtr = STATE_NEW_GAME; 
	
	SetDurationPtrState currentDur = THIRTY; 
     ad4:	99 24       	eor	r9, r9
     ad6:	93 94       	inc	r9
void fsm_main() {
	GUIScreen screen = MAIN_MENU;  
	GUIScreen nextScreen = MAIN_MENU;
	
	MainMenuPtrState mainMenuPtr = STATE_NEW_GAME;  
	MainMenuPtrState nextmainMenuPtr = STATE_NEW_GAME; 
     ad8:	81 2c       	mov	r8, r1

void fsm_main() {
	GUIScreen screen = MAIN_MENU;  
	GUIScreen nextScreen = MAIN_MENU;
	
	MainMenuPtrState mainMenuPtr = STATE_NEW_GAME;  
     ada:	00 e0       	ldi	r16, 0x00	; 0

int main_menu_marked_inst = 0; 
int main_menu_marked_inst2 = 0;

void fsm_main() {
	GUIScreen screen = MAIN_MENU;  
     adc:	10 e0       	ldi	r17, 0x00	; 0
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <fsm_main+0x36>
User nextUsername = init;  

int main_menu_marked_inst = 0; 
int main_menu_marked_inst2 = 0;

void fsm_main() {
     ae0:	1f 2d       	mov	r17, r15
	//if(readings.joystick_up_down == 255 || readings.joystick_up_down == 0 || readings.shoot_button ==  255) {
	oled_clear_screen();
	oled_goto_pos(0,0); 
	
	while(1){
		readings = read_channels();
     ae2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <read_channels>
     ae6:	29 83       	std	Y+1, r18	; 0x01
     ae8:	3a 83       	std	Y+2, r19	; 0x02
     aea:	4b 83       	std	Y+3, r20	; 0x03
     aec:	5c 83       	std	Y+4, r21	; 0x04
     aee:	6d 83       	std	Y+5, r22	; 0x05
     af0:	7e 83       	std	Y+6, r23	; 0x06
     af2:	8f 83       	std	Y+7, r24	; 0x07
     af4:	98 87       	std	Y+8, r25	; 0x08
		
		switch(screen) {
     af6:	12 30       	cpi	r17, 0x02	; 2
     af8:	09 f4       	brne	.+2      	; 0xafc <fsm_main+0x50>
     afa:	3d c2       	rjmp	.+1146   	; 0xf76 <fsm_main+0x4ca>
     afc:	30 f4       	brcc	.+12     	; 0xb0a <fsm_main+0x5e>
     afe:	11 23       	and	r17, r17
     b00:	69 f0       	breq	.+26     	; 0xb1c <fsm_main+0x70>
     b02:	11 30       	cpi	r17, 0x01	; 1
     b04:	09 f4       	brne	.+2      	; 0xb08 <fsm_main+0x5c>
     b06:	c2 c0       	rjmp	.+388    	; 0xc8c <fsm_main+0x1e0>
     b08:	64 c4       	rjmp	.+2248   	; 0x13d2 <fsm_main+0x926>
     b0a:	14 30       	cpi	r17, 0x04	; 4
     b0c:	09 f4       	brne	.+2      	; 0xb10 <fsm_main+0x64>
     b0e:	d4 c2       	rjmp	.+1448   	; 0x10b8 <fsm_main+0x60c>
     b10:	08 f4       	brcc	.+2      	; 0xb14 <fsm_main+0x68>
     b12:	8b c2       	rjmp	.+1302   	; 0x102a <fsm_main+0x57e>
     b14:	15 30       	cpi	r17, 0x05	; 5
     b16:	09 f4       	brne	.+2      	; 0xb1a <fsm_main+0x6e>
     b18:	98 c3       	rjmp	.+1840   	; 0x124a <fsm_main+0x79e>
     b1a:	5b c4       	rjmp	.+2230   	; 0x13d2 <fsm_main+0x926>
			case MAIN_MENU: 
				
				switch(mainMenuPtr) {
     b1c:	01 30       	cpi	r16, 0x01	; 1
     b1e:	69 f1       	breq	.+90     	; 0xb7a <fsm_main+0xce>
     b20:	38 f0       	brcs	.+14     	; 0xb30 <fsm_main+0x84>
     b22:	02 30       	cpi	r16, 0x02	; 2
     b24:	09 f4       	brne	.+2      	; 0xb28 <fsm_main+0x7c>
     b26:	4c c0       	rjmp	.+152    	; 0xbc0 <fsm_main+0x114>
     b28:	03 30       	cpi	r16, 0x03	; 3
     b2a:	09 f4       	brne	.+2      	; 0xb2e <fsm_main+0x82>
     b2c:	6d c0       	rjmp	.+218    	; 0xc08 <fsm_main+0x15c>
     b2e:	8e c0       	rjmp	.+284    	; 0xc4c <fsm_main+0x1a0>
					case STATE_NEW_GAME:
						//oled_clear_screen();
						oled_show_main_menu();
     b30:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <oled_show_main_menu>
						oled_clear_line(2); 
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> New Game", 2,0); 
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	62 e0       	ldi	r22, 0x02	; 2
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	82 e9       	ldi	r24, 0x92	; 146
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
				
						if (readings.joystick_up_down > 230) {
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	9a 81       	ldd	r25, Y+2	; 0x02
     b50:	87 3e       	cpi	r24, 0xE7	; 231
     b52:	91 05       	cpc	r25, r1
     b54:	1c f4       	brge	.+6      	; 0xb5c <fsm_main+0xb0>
							nextmainMenuPtr = STATE_SET_DURATION; 
						} else if (readings.joystick_up_down < 50) {
     b56:	c2 97       	sbiw	r24, 0x32	; 50
     b58:	34 f0       	brlt	.+12     	; 0xb66 <fsm_main+0xba>
     b5a:	07 c0       	rjmp	.+14     	; 0xb6a <fsm_main+0xbe>
						oled_show_main_menu();
						oled_clear_line(2); 
						oled_print_string("> New Game", 2,0); 
				
						if (readings.joystick_up_down > 230) {
							nextmainMenuPtr = STATE_SET_DURATION; 
     b5c:	0f 2e       	mov	r0, r31
     b5e:	f3 e0       	ldi	r31, 0x03	; 3
     b60:	8f 2e       	mov	r8, r31
     b62:	f0 2d       	mov	r31, r0
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <fsm_main+0xbe>
						} else if (readings.joystick_up_down < 50) {
							nextmainMenuPtr = STATE_INSTRUCTIONS; 
     b66:	88 24       	eor	r8, r8
     b68:	83 94       	inc	r8
						} 
						
						if (readings.shoot_button == 255) {
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	9e 81       	ldd	r25, Y+6	; 0x06
     b6e:	8f 3f       	cpi	r24, 0xFF	; 255
     b70:	91 05       	cpc	r25, r1
     b72:	09 f4       	brne	.+2      	; 0xb76 <fsm_main+0xca>
     b74:	6d c0       	rjmp	.+218    	; 0xc50 <fsm_main+0x1a4>
     b76:	f1 2e       	mov	r15, r17
     b78:	7b c0       	rjmp	.+246    	; 0xc70 <fsm_main+0x1c4>
							nextScreen = NEW_GAME; 
						}			  
				
						break;
					case STATE_INSTRUCTIONS:
						oled_show_main_menu();
     b7a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <oled_show_main_menu>
						oled_clear_line(3); 
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Instructions", 3,0); 	
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	63 e0       	ldi	r22, 0x03	; 3
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	8d e9       	ldi	r24, 0x9D	; 157
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
				
						if (readings.joystick_up_down > 230) {
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	87 3e       	cpi	r24, 0xE7	; 231
     b9c:	91 05       	cpc	r25, r1
     b9e:	1c f4       	brge	.+6      	; 0xba6 <fsm_main+0xfa>
							nextmainMenuPtr = STATE_NEW_GAME;
							} else if (readings.joystick_up_down < 50) {
     ba0:	c2 97       	sbiw	r24, 0x32	; 50
     ba2:	1c f0       	brlt	.+6      	; 0xbaa <fsm_main+0xfe>
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <fsm_main+0x104>
						oled_show_main_menu();
						oled_clear_line(3); 
						oled_print_string("> Instructions", 3,0); 	
				
						if (readings.joystick_up_down > 230) {
							nextmainMenuPtr = STATE_NEW_GAME;
     ba6:	81 2c       	mov	r8, r1
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <fsm_main+0x104>
							} else if (readings.joystick_up_down < 50) {
							nextmainMenuPtr = STATE_SCOREBOARD;
     baa:	68 94       	set
     bac:	88 24       	eor	r8, r8
     bae:	81 f8       	bld	r8, 1
						}
						
						if (readings.shoot_button == 255) {
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	9e 81       	ldd	r25, Y+6	; 0x06
     bb4:	8f 3f       	cpi	r24, 0xFF	; 255
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <fsm_main+0x110>
     bba:	4d c0       	rjmp	.+154    	; 0xc56 <fsm_main+0x1aa>
     bbc:	f1 2e       	mov	r15, r17
     bbe:	58 c0       	rjmp	.+176    	; 0xc70 <fsm_main+0x1c4>
							nextScreen = INSTRUCTIONS;
						}
							
						break; 
					case STATE_SCOREBOARD: 
						oled_show_main_menu();
     bc0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <oled_show_main_menu>
						oled_clear_line(4); 
     bc4:	84 e0       	ldi	r24, 0x04	; 4
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Scoreboard", 4,0); 
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	64 e0       	ldi	r22, 0x04	; 4
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	8c ea       	ldi	r24, 0xAC	; 172
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
				
						if (readings.joystick_up_down > 230) {
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	87 3e       	cpi	r24, 0xE7	; 231
     be2:	91 05       	cpc	r25, r1
     be4:	1c f4       	brge	.+6      	; 0xbec <fsm_main+0x140>
							nextmainMenuPtr = STATE_INSTRUCTIONS;
							} else if (readings.joystick_up_down < 50) {
     be6:	c2 97       	sbiw	r24, 0x32	; 50
     be8:	24 f0       	brlt	.+8      	; 0xbf2 <fsm_main+0x146>
     bea:	07 c0       	rjmp	.+14     	; 0xbfa <fsm_main+0x14e>
						oled_show_main_menu();
						oled_clear_line(4); 
						oled_print_string("> Scoreboard", 4,0); 
				
						if (readings.joystick_up_down > 230) {
							nextmainMenuPtr = STATE_INSTRUCTIONS;
     bec:	88 24       	eor	r8, r8
     bee:	83 94       	inc	r8
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <fsm_main+0x14e>
							} else if (readings.joystick_up_down < 50) {
							nextmainMenuPtr = STATE_SET_DURATION;
     bf2:	0f 2e       	mov	r0, r31
     bf4:	f3 e0       	ldi	r31, 0x03	; 3
     bf6:	8f 2e       	mov	r8, r31
     bf8:	f0 2d       	mov	r31, r0
						}
						
						if (readings.shoot_button == 255) {
     bfa:	8d 81       	ldd	r24, Y+5	; 0x05
     bfc:	9e 81       	ldd	r25, Y+6	; 0x06
     bfe:	8f 3f       	cpi	r24, 0xFF	; 255
     c00:	91 05       	cpc	r25, r1
     c02:	71 f1       	breq	.+92     	; 0xc60 <fsm_main+0x1b4>
     c04:	f1 2e       	mov	r15, r17
     c06:	34 c0       	rjmp	.+104    	; 0xc70 <fsm_main+0x1c4>
							nextScreen = SCOREBOARD;
						}
				
						break;
					case STATE_SET_DURATION: 
						oled_show_main_menu();
     c08:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <oled_show_main_menu>
						oled_clear_line(5); 
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Set Durations", 5,0); 
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	65 e0       	ldi	r22, 0x05	; 5
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	89 eb       	ldi	r24, 0xB9	; 185
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
				
						if (readings.joystick_up_down > 230) {
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	87 3e       	cpi	r24, 0xE7	; 231
     c2a:	91 05       	cpc	r25, r1
     c2c:	1c f4       	brge	.+6      	; 0xc34 <fsm_main+0x188>
							nextmainMenuPtr = STATE_SCOREBOARD;
							} else if (readings.joystick_up_down < 50) {
     c2e:	c2 97       	sbiw	r24, 0x32	; 50
     c30:	2c f0       	brlt	.+10     	; 0xc3c <fsm_main+0x190>
     c32:	05 c0       	rjmp	.+10     	; 0xc3e <fsm_main+0x192>
						oled_show_main_menu();
						oled_clear_line(5); 
						oled_print_string("> Set Durations", 5,0); 
				
						if (readings.joystick_up_down > 230) {
							nextmainMenuPtr = STATE_SCOREBOARD;
     c34:	68 94       	set
     c36:	88 24       	eor	r8, r8
     c38:	81 f8       	bld	r8, 1
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <fsm_main+0x192>
							} else if (readings.joystick_up_down < 50) {
							nextmainMenuPtr = STATE_NEW_GAME;
     c3c:	81 2c       	mov	r8, r1
						}
						
						if (readings.shoot_button == 255) {
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9e 81       	ldd	r25, Y+6	; 0x06
     c42:	8f 3f       	cpi	r24, 0xFF	; 255
     c44:	91 05       	cpc	r25, r1
     c46:	81 f0       	breq	.+32     	; 0xc68 <fsm_main+0x1bc>
     c48:	f1 2e       	mov	r15, r17
     c4a:	12 c0       	rjmp	.+36     	; 0xc70 <fsm_main+0x1c4>
		readings = read_channels();
		
		switch(screen) {
			case MAIN_MENU: 
				
				switch(mainMenuPtr) {
     c4c:	f1 2e       	mov	r15, r17
     c4e:	10 c0       	rjmp	.+32     	; 0xc70 <fsm_main+0x1c4>
						} else if (readings.joystick_up_down < 50) {
							nextmainMenuPtr = STATE_INSTRUCTIONS; 
						} 
						
						if (readings.shoot_button == 255) {
							nextScreen = NEW_GAME; 
     c50:	ff 24       	eor	r15, r15
     c52:	f3 94       	inc	r15
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <fsm_main+0x1c4>
							} else if (readings.joystick_up_down < 50) {
							nextmainMenuPtr = STATE_SCOREBOARD;
						}
						
						if (readings.shoot_button == 255) {
							nextScreen = INSTRUCTIONS;
     c56:	0f 2e       	mov	r0, r31
     c58:	f3 e0       	ldi	r31, 0x03	; 3
     c5a:	ff 2e       	mov	r15, r31
     c5c:	f0 2d       	mov	r31, r0
     c5e:	08 c0       	rjmp	.+16     	; 0xc70 <fsm_main+0x1c4>
							} else if (readings.joystick_up_down < 50) {
							nextmainMenuPtr = STATE_SET_DURATION;
						}
						
						if (readings.shoot_button == 255) {
							nextScreen = SCOREBOARD;
     c60:	68 94       	set
     c62:	ff 24       	eor	r15, r15
     c64:	f2 f8       	bld	r15, 2
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <fsm_main+0x1c4>
							} else if (readings.joystick_up_down < 50) {
							nextmainMenuPtr = STATE_NEW_GAME;
						}
						
						if (readings.shoot_button == 255) {
							nextScreen = SET_DURATION;
     c68:	0f 2e       	mov	r0, r31
     c6a:	f5 e0       	ldi	r31, 0x05	; 5
     c6c:	ff 2e       	mov	r15, r31
     c6e:	f0 2d       	mov	r31, r0
						}
				
						break;   	
				}
				if (mainMenuPtr != nextmainMenuPtr) {
     c70:	08 11       	cpse	r16, r8
					oled_clear_screen();
     c72:	0e 94 ef 01 	call	0x3de	; 0x3de <oled_clear_screen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	4f e7       	ldi	r20, 0x7F	; 127
     c7a:	54 e0       	ldi	r21, 0x04	; 4
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	40 40       	sbci	r20, 0x00	; 0
     c80:	50 40       	sbci	r21, 0x00	; 0
     c82:	e1 f7       	brne	.-8      	; 0xc7c <fsm_main+0x1d0>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <fsm_main+0x1da>
     c86:	00 00       	nop
				}
				mainMenuPtr = nextmainMenuPtr;
     c88:	08 2d       	mov	r16, r8
     c8a:	a4 c3       	rjmp	.+1864   	; 0x13d4 <fsm_main+0x928>
				_delay_ms(300); 
				break; 
				
				
			case NEW_GAME:
				current_tick = 0;
     c8c:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <current_tick+0x1>
     c90:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <current_tick>
				current_score = 0;
     c94:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <current_score+0x1>
     c98:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <current_score>

				printf("Newgame");
     c9c:	89 ec       	ldi	r24, 0xC9	; 201
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
				reset_score_node_2_can();
     ca8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <reset_score_node_2_can>
				//send_commands_to_node_2_can();
				can_recieve_message(recieved_message);
     cac:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <recieved_message>
     cb0:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <recieved_message+0x1>
     cb4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <can_recieve_message>
				oled_show_new_game();
     cb8:	0e 94 1e 03 	call	0x63c	; 0x63c <oled_show_new_game>
						for (int i = 0 ; i < NUM_USERS; i++){
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	11 c0       	rjmp	.+34     	; 0xce8 <fsm_main+0x23c>
							oled_print_string(scoreboard.user_names[i], i+1, 0);
     cc6:	7c 01       	movw	r14, r24
     cc8:	ef ef       	ldi	r30, 0xFF	; 255
     cca:	ee 1a       	sub	r14, r30
     ccc:	fe 0a       	sbc	r15, r30
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	fc 01       	movw	r30, r24
     cd4:	ee 5f       	subi	r30, 0xFE	; 254
     cd6:	fe 4f       	sbci	r31, 0xFE	; 254
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	b7 01       	movw	r22, r14
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
				printf("Newgame");
				reset_score_node_2_can();
				//send_commands_to_node_2_can();
				can_recieve_message(recieved_message);
				oled_show_new_game();
						for (int i = 0 ; i < NUM_USERS; i++){
     ce6:	c7 01       	movw	r24, r14
     ce8:	85 30       	cpi	r24, 0x05	; 5
     cea:	91 05       	cpc	r25, r1
     cec:	64 f3       	brlt	.-40     	; 0xcc6 <fsm_main+0x21a>
							oled_print_string(scoreboard.user_names[i], i+1, 0);
						}
						
						oled_clear_line(scoreboard.selected_user_index+1);
     cee:	0f 2e       	mov	r0, r31
     cf0:	f2 e0       	ldi	r31, 0x02	; 2
     cf2:	ef 2e       	mov	r14, r31
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	ff 2e       	mov	r15, r31
     cf8:	f0 2d       	mov	r31, r0
     cfa:	f7 01       	movw	r30, r14
     cfc:	84 89       	ldd	r24, Z+20	; 0x14
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string(scoreboard.user_names[scoreboard.selected_user_index], scoreboard.selected_user_index + 1, 0);
     d06:	f7 01       	movw	r30, r14
     d08:	64 89       	ldd	r22, Z+20	; 0x14
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	fb 01       	movw	r30, r22
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	ee 5f       	subi	r30, 0xFE	; 254
     d14:	fe 4f       	sbci	r31, 0xFE	; 254
     d16:	6f 5f       	subi	r22, 0xFF	; 255
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
     d26:	ff ef       	ldi	r31, 0xFF	; 255
     d28:	2f e7       	ldi	r18, 0x7F	; 127
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	f1 50       	subi	r31, 0x01	; 1
     d2e:	20 40       	sbci	r18, 0x00	; 0
     d30:	40 40       	sbci	r20, 0x00	; 0
     d32:	e1 f7       	brne	.-8      	; 0xd2c <fsm_main+0x280>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <fsm_main+0x28a>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <fsm_main+0x28c>
				_delay_ms(100);
				switch(username){
     d38:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <username>
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	09 f4       	brne	.+2      	; 0xd42 <fsm_main+0x296>
     d40:	70 c0       	rjmp	.+224    	; 0xe22 <fsm_main+0x376>
     d42:	28 f4       	brcc	.+10     	; 0xd4e <fsm_main+0x2a2>
     d44:	88 23       	and	r24, r24
     d46:	69 f0       	breq	.+26     	; 0xd62 <fsm_main+0x2b6>
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	d9 f1       	breq	.+118    	; 0xdc2 <fsm_main+0x316>
     d4c:	fb c0       	rjmp	.+502    	; 0xf44 <fsm_main+0x498>
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	09 f4       	brne	.+2      	; 0xd54 <fsm_main+0x2a8>
     d52:	c9 c0       	rjmp	.+402    	; 0xee6 <fsm_main+0x43a>
     d54:	08 f4       	brcc	.+2      	; 0xd58 <fsm_main+0x2ac>
     d56:	96 c0       	rjmp	.+300    	; 0xe84 <fsm_main+0x3d8>
     d58:	85 30       	cpi	r24, 0x05	; 5
     d5a:	09 f0       	breq	.+2      	; 0xd5e <fsm_main+0x2b2>
     d5c:	f3 c0       	rjmp	.+486    	; 0xf44 <fsm_main+0x498>
					case init : 
						nextUsername = JO; 
     d5e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
						
						
						
					case JO: 
						oled_clear_line(1);
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Jo Arve", 1 ,0);
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	81 ed       	ldi	r24, 0xD1	; 209
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
						if (readings.joystick_up_down > 230) {
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	87 3e       	cpi	r24, 0xE7	; 231
     d80:	91 05       	cpc	r25, r1
     d82:	24 f0       	brlt	.+8      	; 0xd8c <fsm_main+0x2e0>
							nextUsername = EVEN; 
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <fsm_main+0x2ea>
							 
							} else if (readings.joystick_up_down < 50) {
     d8c:	c2 97       	sbiw	r24, 0x32	; 50
     d8e:	1c f4       	brge	.+6      	; 0xd96 <fsm_main+0x2ea>
								nextUsername = STUDASS; 
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
						}
						
						if (readings.shoot_button == 255 ){
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	8f 3f       	cpi	r24, 0xFF	; 255
     d9c:	91 05       	cpc	r25, r1
     d9e:	09 f0       	breq	.+2      	; 0xda2 <fsm_main+0x2f6>
     da0:	d3 c0       	rjmp	.+422    	; 0xf48 <fsm_main+0x49c>
							scoreboard.selected_user_index = 0;
     da2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <scoreboard+0x14>
							nextScreen = PLAYING_GAME;
							oled_clear_screen();
     da6:	0e 94 ef 01 	call	0x3de	; 0x3de <oled_clear_screen>
							oled_print_string("GAME STARTED!! ", 5, 30); 
     daa:	4e e1       	ldi	r20, 0x1E	; 30
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	65 e0       	ldi	r22, 0x05	; 5
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	8b ed       	ldi	r24, 0xDB	; 219
     db4:	92 e0       	ldi	r25, 0x02	; 2
     db6:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
								nextUsername = STUDASS; 
						}
						
						if (readings.shoot_button == 255 ){
							scoreboard.selected_user_index = 0;
							nextScreen = PLAYING_GAME;
     dba:	68 94       	set
     dbc:	ff 24       	eor	r15, r15
     dbe:	f1 f8       	bld	r15, 1
     dc0:	cc c0       	rjmp	.+408    	; 0xf5a <fsm_main+0x4ae>
							oled_print_string("GAME STARTED!! ", 5, 30); 
						}
						
						break; 
					case STUDASS:
						oled_clear_line(2);
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Studass ", 2 ,0);
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	62 e0       	ldi	r22, 0x02	; 2
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	8b ee       	ldi	r24, 0xEB	; 235
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
						if (readings.joystick_up_down > 230) {
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	87 3e       	cpi	r24, 0xE7	; 231
     de0:	91 05       	cpc	r25, r1
     de2:	1c f0       	brlt	.+6      	; 0xdea <fsm_main+0x33e>
							nextUsername = JO;
     de4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <fsm_main+0x348>
							
							} else if (readings.joystick_up_down < 50) {
     dea:	c2 97       	sbiw	r24, 0x32	; 50
     dec:	1c f4       	brge	.+6      	; 0xdf4 <fsm_main+0x348>
							nextUsername = KRISTOFFER;
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
						}
						
						if (readings.shoot_button == 255 ){
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	8f 3f       	cpi	r24, 0xFF	; 255
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f0       	breq	.+2      	; 0xe00 <fsm_main+0x354>
     dfe:	a6 c0       	rjmp	.+332    	; 0xf4c <fsm_main+0x4a0>
							scoreboard.selected_user_index = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <scoreboard+0x14>
							nextScreen = PLAYING_GAME;
							oled_clear_screen();
     e06:	0e 94 ef 01 	call	0x3de	; 0x3de <oled_clear_screen>
							oled_print_string("GAME STARTED!! ", 5, 30);
     e0a:	4e e1       	ldi	r20, 0x1E	; 30
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	65 e0       	ldi	r22, 0x05	; 5
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	8b ed       	ldi	r24, 0xDB	; 219
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
							nextUsername = KRISTOFFER;
						}
						
						if (readings.shoot_button == 255 ){
							scoreboard.selected_user_index = 1;
							nextScreen = PLAYING_GAME;
     e1a:	68 94       	set
     e1c:	ff 24       	eor	r15, r15
     e1e:	f1 f8       	bld	r15, 1
     e20:	9c c0       	rjmp	.+312    	; 0xf5a <fsm_main+0x4ae>
							oled_clear_screen();
							oled_print_string("GAME STARTED!! ", 5, 30);
						}
						break;
					case KRISTOFFER:
						oled_clear_line(3);
     e22:	83 e0       	ldi	r24, 0x03	; 3
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Kristoffer", 3 ,0);
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	63 e0       	ldi	r22, 0x03	; 3
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	86 ef       	ldi	r24, 0xF6	; 246
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
						if (readings.joystick_up_down > 230) {
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	87 3e       	cpi	r24, 0xE7	; 231
     e40:	91 05       	cpc	r25, r1
     e42:	24 f0       	brlt	.+8      	; 0xe4c <fsm_main+0x3a0>
							nextUsername = STUDASS;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <fsm_main+0x3aa>
							
							} else if (readings.joystick_up_down < 50) {
     e4c:	c2 97       	sbiw	r24, 0x32	; 50
     e4e:	1c f4       	brge	.+6      	; 0xe56 <fsm_main+0x3aa>
							nextUsername = ALF;
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
						}
						
						if (readings.shoot_button == 255 ){
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	8f 3f       	cpi	r24, 0xFF	; 255
     e5c:	91 05       	cpc	r25, r1
     e5e:	09 f0       	breq	.+2      	; 0xe62 <fsm_main+0x3b6>
     e60:	77 c0       	rjmp	.+238    	; 0xf50 <fsm_main+0x4a4>
							scoreboard.selected_user_index = 2;
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <scoreboard+0x14>
							nextScreen = PLAYING_GAME;
							oled_clear_screen();
     e68:	0e 94 ef 01 	call	0x3de	; 0x3de <oled_clear_screen>
							oled_print_string("GAME STARTED!! ", 5, 30);
     e6c:	4e e1       	ldi	r20, 0x1E	; 30
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	65 e0       	ldi	r22, 0x05	; 5
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	8b ed       	ldi	r24, 0xDB	; 219
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
							nextUsername = ALF;
						}
						
						if (readings.shoot_button == 255 ){
							scoreboard.selected_user_index = 2;
							nextScreen = PLAYING_GAME;
     e7c:	68 94       	set
     e7e:	ff 24       	eor	r15, r15
     e80:	f1 f8       	bld	r15, 1
     e82:	6b c0       	rjmp	.+214    	; 0xf5a <fsm_main+0x4ae>
							oled_clear_screen();
							oled_print_string("GAME STARTED!! ", 5, 30);
						}
						break; 
					case ALF:
						oled_clear_line(4);
     e84:	84 e0       	ldi	r24, 0x04	; 4
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Alf", 4 ,0);
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	64 e0       	ldi	r22, 0x04	; 4
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
						if (readings.joystick_up_down > 230) {
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	87 3e       	cpi	r24, 0xE7	; 231
     ea2:	91 05       	cpc	r25, r1
     ea4:	24 f0       	brlt	.+8      	; 0xeae <fsm_main+0x402>
							nextUsername = KRISTOFFER;
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     eac:	05 c0       	rjmp	.+10     	; 0xeb8 <fsm_main+0x40c>
							
							} else if (readings.joystick_up_down < 50) {
     eae:	c2 97       	sbiw	r24, 0x32	; 50
     eb0:	1c f4       	brge	.+6      	; 0xeb8 <fsm_main+0x40c>
							nextUsername = EVEN;
     eb2:	84 e0       	ldi	r24, 0x04	; 4
     eb4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
						}
						
						if (readings.shoot_button == 255 ){
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	8f 3f       	cpi	r24, 0xFF	; 255
     ebe:	91 05       	cpc	r25, r1
     ec0:	09 f0       	breq	.+2      	; 0xec4 <fsm_main+0x418>
     ec2:	48 c0       	rjmp	.+144    	; 0xf54 <fsm_main+0x4a8>
							scoreboard.selected_user_index = 3;
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <scoreboard+0x14>
							nextScreen = PLAYING_GAME;
							oled_clear_screen();
     eca:	0e 94 ef 01 	call	0x3de	; 0x3de <oled_clear_screen>
							oled_print_string("GAME STARTED!! ", 5, 30);
     ece:	4e e1       	ldi	r20, 0x1E	; 30
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	65 e0       	ldi	r22, 0x05	; 5
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	8b ed       	ldi	r24, 0xDB	; 219
     ed8:	92 e0       	ldi	r25, 0x02	; 2
     eda:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
							nextUsername = EVEN;
						}
						
						if (readings.shoot_button == 255 ){
							scoreboard.selected_user_index = 3;
							nextScreen = PLAYING_GAME;
     ede:	68 94       	set
     ee0:	ff 24       	eor	r15, r15
     ee2:	f1 f8       	bld	r15, 1
     ee4:	3a c0       	rjmp	.+116    	; 0xf5a <fsm_main+0x4ae>
							oled_clear_screen();
							oled_print_string("GAME STARTED!! ", 5, 30);
						}
						break;
					case EVEN:
						oled_clear_line(5);
     ee6:	85 e0       	ldi	r24, 0x05	; 5
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Even", 5 ,0);
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	65 e0       	ldi	r22, 0x05	; 5
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	89 e0       	ldi	r24, 0x09	; 9
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
						if (readings.joystick_up_down > 230) {
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	87 3e       	cpi	r24, 0xE7	; 231
     f04:	91 05       	cpc	r25, r1
     f06:	24 f0       	brlt	.+8      	; 0xf10 <fsm_main+0x464>
							nextUsername = ALF;
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <fsm_main+0x46c>
							
							} else if (readings.joystick_up_down < 50) {
     f10:	c2 97       	sbiw	r24, 0x32	; 50
     f12:	14 f4       	brge	.+4      	; 0xf18 <fsm_main+0x46c>
							nextUsername = JO;
     f14:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
						}
						
						if (readings.shoot_button == 255 ){
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	8f 3f       	cpi	r24, 0xFF	; 255
     f1e:	91 05       	cpc	r25, r1
     f20:	d9 f4       	brne	.+54     	; 0xf58 <fsm_main+0x4ac>
							scoreboard.selected_user_index = 4;
     f22:	84 e0       	ldi	r24, 0x04	; 4
     f24:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <scoreboard+0x14>
							nextScreen = PLAYING_GAME;
							oled_clear_screen();
     f28:	0e 94 ef 01 	call	0x3de	; 0x3de <oled_clear_screen>
							oled_print_string("GAME STARTED!! ", 5, 30);
     f2c:	4e e1       	ldi	r20, 0x1E	; 30
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	65 e0       	ldi	r22, 0x05	; 5
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	8b ed       	ldi	r24, 0xDB	; 219
     f36:	92 e0       	ldi	r25, 0x02	; 2
     f38:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
							nextUsername = JO;
						}
						
						if (readings.shoot_button == 255 ){
							scoreboard.selected_user_index = 4;
							nextScreen = PLAYING_GAME;
     f3c:	68 94       	set
     f3e:	ff 24       	eor	r15, r15
     f40:	f1 f8       	bld	r15, 1
     f42:	0b c0       	rjmp	.+22     	; 0xf5a <fsm_main+0x4ae>
						}
						
						oled_clear_line(scoreboard.selected_user_index+1);
						oled_print_string(scoreboard.user_names[scoreboard.selected_user_index], scoreboard.selected_user_index + 1, 0);
				_delay_ms(100);
				switch(username){
     f44:	f1 2e       	mov	r15, r17
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <fsm_main+0x4ae>
     f48:	f1 2e       	mov	r15, r17
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <fsm_main+0x4ae>
     f4c:	f1 2e       	mov	r15, r17
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <fsm_main+0x4ae>
     f50:	f1 2e       	mov	r15, r17
     f52:	03 c0       	rjmp	.+6      	; 0xf5a <fsm_main+0x4ae>
     f54:	f1 2e       	mov	r15, r17
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <fsm_main+0x4ae>
     f58:	f1 2e       	mov	r15, r17
							oled_clear_screen();
							oled_print_string("GAME STARTED!! ", 5, 30);
						}
						break;
				}
				username = nextUsername; 
     f5a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f5e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <username>
     f62:	5f ef       	ldi	r21, 0xFF	; 255
     f64:	8f e7       	ldi	r24, 0x7F	; 127
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	51 50       	subi	r21, 0x01	; 1
     f6a:	80 40       	sbci	r24, 0x00	; 0
     f6c:	90 40       	sbci	r25, 0x00	; 0
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <fsm_main+0x4bc>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <fsm_main+0x4c6>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <fsm_main+0x4c8>
     f74:	2f c2       	rjmp	.+1118   	; 0x13d4 <fsm_main+0x928>
				
			case PLAYING_GAME:
				
				
				
				send_commands_to_node_2_can();
     f76:	0e 94 a8 04 	call	0x950	; 0x950 <send_commands_to_node_2_can>
				can_recieve_message(recieved_message);
     f7a:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <recieved_message>
     f7e:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <recieved_message+0x1>
     f82:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <can_recieve_message>
				current_score = recieved_message->data[0];
     f86:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <recieved_message>
     f8a:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <recieved_message+0x1>
     f8e:	83 81       	ldd	r24, Z+3	; 0x03
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	30 93 ab 03 	sts	0x03AB, r19	; 0x8003ab <current_score+0x1>
     f98:	20 93 aa 03 	sts	0x03AA, r18	; 0x8003aa <current_score>
				printf("score: %i \n\r", current_score);
     f9c:	1f 92       	push	r1
     f9e:	8f 93       	push	r24
     fa0:	80 e1       	ldi	r24, 0x10	; 16
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	9f 93       	push	r25
     fa6:	8f 93       	push	r24
     fa8:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
				
				current_tick = current_tick + 1;
     fac:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <current_tick>
     fb0:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <current_tick+0x1>
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <current_tick+0x1>
     fba:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <current_tick>
				int play_for = game_duration_settings.durations[game_duration_settings.selected_index];
     fbe:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <game_duration_settings+0x4>
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	e9 5e       	subi	r30, 0xE9	; 233
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	e0 80       	ld	r14, Z
     fca:	f1 2c       	mov	r15, r1
				printf("play for: %i, played: %i \n\r", (ticks_per_second*play_for), current_tick);
     fcc:	9f 93       	push	r25
     fce:	8f 93       	push	r24
     fd0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <ticks_per_second>
     fd4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <ticks_per_second+0x1>
     fd8:	e2 9e       	mul	r14, r18
     fda:	c0 01       	movw	r24, r0
     fdc:	e3 9e       	mul	r14, r19
     fde:	90 0d       	add	r25, r0
     fe0:	f2 9e       	mul	r15, r18
     fe2:	90 0d       	add	r25, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	9f 93       	push	r25
     fe8:	8f 93       	push	r24
     fea:	8d e1       	ldi	r24, 0x1D	; 29
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	9f 93       	push	r25
     ff0:	8f 93       	push	r24
     ff2:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
				if (current_tick > (ticks_per_second*play_for)){
     ff6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <ticks_per_second>
     ffa:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <ticks_per_second+0x1>
     ffe:	e8 9e       	mul	r14, r24
    1000:	90 01       	movw	r18, r0
    1002:	e9 9e       	mul	r14, r25
    1004:	30 0d       	add	r19, r0
    1006:	f8 9e       	mul	r15, r24
    1008:	30 0d       	add	r19, r0
    100a:	11 24       	eor	r1, r1
    100c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <current_tick>
    1010:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <current_tick+0x1>
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	28 17       	cp	r18, r24
    1020:	39 07       	cpc	r19, r25
    1022:	0c f4       	brge	.+2      	; 0x1026 <fsm_main+0x57a>
    1024:	d2 c1       	rjmp	.+932    	; 0x13ca <fsm_main+0x91e>
    1026:	f1 2e       	mov	r15, r17
    1028:	d5 c1       	rjmp	.+938    	; 0x13d4 <fsm_main+0x928>
				}
				break;
				
				
			case INSTRUCTIONS: 
				switch (main_menu_marked_inst) {
    102a:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <main_menu_marked_inst>
    102e:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <main_menu_marked_inst+0x1>
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	19 f0       	breq	.+6      	; 0x103c <fsm_main+0x590>
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	21 f0       	breq	.+8      	; 0x1042 <fsm_main+0x596>
    103a:	11 c0       	rjmp	.+34     	; 0x105e <fsm_main+0x5b2>
					case 0: 
						oled_show_inst();
    103c:	0e 94 ab 02 	call	0x556	; 0x556 <oled_show_inst>
						break; 
    1040:	0e c0       	rjmp	.+28     	; 0x105e <fsm_main+0x5b2>
					case 1: 
						oled_show_inst();
    1042:	0e 94 ab 02 	call	0x556	; 0x556 <oled_show_inst>
						oled_clear_line(7);
    1046:	87 e0       	ldi	r24, 0x07	; 7
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Main Menu", 7,81);
    104e:	41 e5       	ldi	r20, 0x51	; 81
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	67 e0       	ldi	r22, 0x07	; 7
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	89 e3       	ldi	r24, 0x39	; 57
    1058:	93 e0       	ldi	r25, 0x03	; 3
    105a:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
						break; 
				}
				if (readings.joystick_up_down < 50) {
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	9a 81       	ldd	r25, Y+2	; 0x02
    1062:	82 33       	cpi	r24, 0x32	; 50
    1064:	91 05       	cpc	r25, r1
    1066:	3c f4       	brge	.+14     	; 0x1076 <fsm_main+0x5ca>
					main_menu_marked_inst = 1; 
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <main_menu_marked_inst+0x1>
    1070:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <main_menu_marked_inst>
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <fsm_main+0x5d8>
				}else if (readings.joystick_up_down > 230) {
    1076:	87 3e       	cpi	r24, 0xE7	; 231
    1078:	91 05       	cpc	r25, r1
    107a:	24 f0       	brlt	.+8      	; 0x1084 <fsm_main+0x5d8>
					main_menu_marked_inst = 0; 
    107c:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <main_menu_marked_inst+0x1>
    1080:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <main_menu_marked_inst>
				}
				if (main_menu_marked_inst == 1 && readings.shoot_button == 255) {
    1084:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <main_menu_marked_inst>
    1088:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <main_menu_marked_inst+0x1>
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	39 f4       	brne	.+14     	; 0x109e <fsm_main+0x5f2>
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	8f 3f       	cpi	r24, 0xFF	; 255
    1096:	91 05       	cpc	r25, r1
    1098:	21 f0       	breq	.+8      	; 0x10a2 <fsm_main+0x5f6>
    109a:	f1 2e       	mov	r15, r17
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <fsm_main+0x5f8>
    109e:	f1 2e       	mov	r15, r17
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <fsm_main+0x5f8>
					nextScreen = MAIN_MENU; 
    10a2:	f1 2c       	mov	r15, r1
    10a4:	ff ef       	ldi	r31, 0xFF	; 255
    10a6:	2f e7       	ldi	r18, 0x7F	; 127
    10a8:	44 e0       	ldi	r20, 0x04	; 4
    10aa:	f1 50       	subi	r31, 0x01	; 1
    10ac:	20 40       	sbci	r18, 0x00	; 0
    10ae:	40 40       	sbci	r20, 0x00	; 0
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <fsm_main+0x5fe>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <fsm_main+0x608>
    10b4:	00 00       	nop
    10b6:	8e c1       	rjmp	.+796    	; 0x13d4 <fsm_main+0x928>
				}
				_delay_ms(300); 
				break; 
			
			case SCOREBOARD:
				update_scoreboard(&scoreboard, scoreboard.selected_user_index, current_score); 
    10b8:	40 91 aa 03 	lds	r20, 0x03AA	; 0x8003aa <current_score>
    10bc:	50 91 ab 03 	lds	r21, 0x03AB	; 0x8003ab <current_score+0x1>
    10c0:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <scoreboard+0x14>
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0e 94 4b 05 	call	0xa96	; 0xa96 <update_scoreboard>
				sort_scoreboard(&scoreboard); 
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <sort_scoreboard>
				char score[3]; 
				
				switch (main_menu_marked_inst2) {
    10d4:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <__data_end>
    10d8:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <__data_end+0x1>
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	19 f0       	breq	.+6      	; 0x10e6 <fsm_main+0x63a>
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f1       	breq	.+124    	; 0x1160 <fsm_main+0x6b4>
    10e4:	85 c0       	rjmp	.+266    	; 0x11f0 <fsm_main+0x744>
					case 0:
						oled_show_scoreboard();
    10e6:	0e 94 0d 03 	call	0x61a	; 0x61a <oled_show_scoreboard>
						// you already have a sorted scoreboard from calling sort and update scoreboard
						for (int i = 0; i < NUM_USERS; i++) {
    10ea:	e1 2c       	mov	r14, r1
    10ec:	f1 2c       	mov	r15, r1
    10ee:	33 c0       	rjmp	.+102    	; 0x1156 <fsm_main+0x6aa>
							sprintf(score, "%d", scoreboard.scores[i]); 
    10f0:	f7 01       	movw	r30, r14
    10f2:	35 96       	adiw	r30, 0x05	; 5
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	ee 5f       	subi	r30, 0xFE	; 254
    10fa:	fe 4f       	sbci	r31, 0xFE	; 254
    10fc:	81 81       	ldd	r24, Z+1	; 0x01
    10fe:	8f 93       	push	r24
    1100:	80 81       	ld	r24, Z
    1102:	8f 93       	push	r24
    1104:	85 e4       	ldi	r24, 0x45	; 69
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	9f 93       	push	r25
    110a:	8f 93       	push	r24
    110c:	5e 01       	movw	r10, r28
    110e:	59 e0       	ldi	r21, 0x09	; 9
    1110:	a5 0e       	add	r10, r21
    1112:	b1 1c       	adc	r11, r1
    1114:	bf 92       	push	r11
    1116:	af 92       	push	r10
    1118:	0e 94 6f 0a 	call	0x14de	; 0x14de <sprintf>
							oled_print_string(scoreboard.user_names[i],i+1, 0);
    111c:	67 01       	movw	r12, r14
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	c8 1a       	sub	r12, r24
    1122:	d8 0a       	sbc	r13, r24
    1124:	f7 01       	movw	r30, r14
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	ee 5f       	subi	r30, 0xFE	; 254
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	b6 01       	movw	r22, r12
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
							oled_print_string(score,i+1, 113);
    113c:	41 e7       	ldi	r20, 0x71	; 113
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	b6 01       	movw	r22, r12
    1142:	c5 01       	movw	r24, r10
    1144:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
				
				switch (main_menu_marked_inst2) {
					case 0:
						oled_show_scoreboard();
						// you already have a sorted scoreboard from calling sort and update scoreboard
						for (int i = 0; i < NUM_USERS; i++) {
    1154:	76 01       	movw	r14, r12
    1156:	95 e0       	ldi	r25, 0x05	; 5
    1158:	e9 16       	cp	r14, r25
    115a:	f1 04       	cpc	r15, r1
    115c:	4c f2       	brlt	.-110    	; 0x10f0 <fsm_main+0x644>
    115e:	48 c0       	rjmp	.+144    	; 0x11f0 <fsm_main+0x744>
						}
						
						
					break;
					case 1:
						oled_show_scoreboard();
    1160:	0e 94 0d 03 	call	0x61a	; 0x61a <oled_show_scoreboard>
						// you already have a sorted scoreboard from calling sort and update scoreboard
						for (int i = 0; i < NUM_USERS; i++) {
    1164:	e1 2c       	mov	r14, r1
    1166:	f1 2c       	mov	r15, r1
    1168:	33 c0       	rjmp	.+102    	; 0x11d0 <fsm_main+0x724>
							sprintf(score, "%d", scoreboard.scores[i]);
    116a:	f7 01       	movw	r30, r14
    116c:	35 96       	adiw	r30, 0x05	; 5
    116e:	ee 0f       	add	r30, r30
    1170:	ff 1f       	adc	r31, r31
    1172:	ee 5f       	subi	r30, 0xFE	; 254
    1174:	fe 4f       	sbci	r31, 0xFE	; 254
    1176:	81 81       	ldd	r24, Z+1	; 0x01
    1178:	8f 93       	push	r24
    117a:	80 81       	ld	r24, Z
    117c:	8f 93       	push	r24
    117e:	85 e4       	ldi	r24, 0x45	; 69
    1180:	93 e0       	ldi	r25, 0x03	; 3
    1182:	9f 93       	push	r25
    1184:	8f 93       	push	r24
    1186:	5e 01       	movw	r10, r28
    1188:	e9 e0       	ldi	r30, 0x09	; 9
    118a:	ae 0e       	add	r10, r30
    118c:	b1 1c       	adc	r11, r1
    118e:	bf 92       	push	r11
    1190:	af 92       	push	r10
    1192:	0e 94 6f 0a 	call	0x14de	; 0x14de <sprintf>
							oled_print_string(scoreboard.user_names[i],i+1, 0);
    1196:	67 01       	movw	r12, r14
    1198:	ff ef       	ldi	r31, 0xFF	; 255
    119a:	cf 1a       	sub	r12, r31
    119c:	df 0a       	sbc	r13, r31
    119e:	f7 01       	movw	r30, r14
    11a0:	ee 0f       	add	r30, r30
    11a2:	ff 1f       	adc	r31, r31
    11a4:	ee 5f       	subi	r30, 0xFE	; 254
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	b6 01       	movw	r22, r12
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
							oled_print_string(score,i+1, 113);
    11b6:	41 e7       	ldi	r20, 0x71	; 113
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	b6 01       	movw	r22, r12
    11bc:	c5 01       	movw	r24, r10
    11be:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
						
					break;
					case 1:
						oled_show_scoreboard();
						// you already have a sorted scoreboard from calling sort and update scoreboard
						for (int i = 0; i < NUM_USERS; i++) {
    11ce:	76 01       	movw	r14, r12
    11d0:	25 e0       	ldi	r18, 0x05	; 5
    11d2:	e2 16       	cp	r14, r18
    11d4:	f1 04       	cpc	r15, r1
    11d6:	4c f2       	brlt	.-110    	; 0x116a <fsm_main+0x6be>
							sprintf(score, "%d", scoreboard.scores[i]);
							oled_print_string(scoreboard.user_names[i],i+1, 0);
							oled_print_string(score,i+1, 113);
						}
						oled_clear_line(7);
    11d8:	87 e0       	ldi	r24, 0x07	; 7
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
						oled_print_string("> Main Menu", 7,78);
    11e0:	4e e4       	ldi	r20, 0x4E	; 78
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	67 e0       	ldi	r22, 0x07	; 7
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	89 e3       	ldi	r24, 0x39	; 57
    11ea:	93 e0       	ldi	r25, 0x03	; 3
    11ec:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
					break;
				}
				if (readings.joystick_up_down < 50) {
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	82 33       	cpi	r24, 0x32	; 50
    11f6:	91 05       	cpc	r25, r1
    11f8:	3c f4       	brge	.+14     	; 0x1208 <fsm_main+0x75c>
					main_menu_marked_inst2 = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <__data_end+0x1>
    1202:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <__data_end>
    1206:	07 c0       	rjmp	.+14     	; 0x1216 <fsm_main+0x76a>
					}else if (readings.joystick_up_down > 230) {
    1208:	87 3e       	cpi	r24, 0xE7	; 231
    120a:	91 05       	cpc	r25, r1
    120c:	24 f0       	brlt	.+8      	; 0x1216 <fsm_main+0x76a>
					main_menu_marked_inst2 = 0;
    120e:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <__data_end+0x1>
    1212:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <__data_end>
				}
				if (main_menu_marked_inst2 == 1 && readings.shoot_button == 255) {
    1216:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <__data_end>
    121a:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <__data_end+0x1>
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	39 f4       	brne	.+14     	; 0x1230 <fsm_main+0x784>
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	8f 3f       	cpi	r24, 0xFF	; 255
    1228:	91 05       	cpc	r25, r1
    122a:	21 f0       	breq	.+8      	; 0x1234 <fsm_main+0x788>
    122c:	f1 2e       	mov	r15, r17
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <fsm_main+0x78a>
    1230:	f1 2e       	mov	r15, r17
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <fsm_main+0x78a>
					nextScreen = MAIN_MENU;
    1234:	f1 2c       	mov	r15, r1
    1236:	4f ef       	ldi	r20, 0xFF	; 255
    1238:	5f e7       	ldi	r21, 0x7F	; 127
    123a:	84 e0       	ldi	r24, 0x04	; 4
    123c:	41 50       	subi	r20, 0x01	; 1
    123e:	50 40       	sbci	r21, 0x00	; 0
    1240:	80 40       	sbci	r24, 0x00	; 0
    1242:	e1 f7       	brne	.-8      	; 0x123c <fsm_main+0x790>
    1244:	00 c0       	rjmp	.+0      	; 0x1246 <fsm_main+0x79a>
    1246:	00 00       	nop
    1248:	c5 c0       	rjmp	.+394    	; 0x13d4 <fsm_main+0x928>
				
				_delay_ms(300); 
				break; 
				
			case SET_DURATION:			
				switch (currentDur)
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	99 16       	cp	r9, r25
    124e:	99 f1       	breq	.+102    	; 0x12b6 <fsm_main+0x80a>
    1250:	99 16       	cp	r9, r25
    1252:	48 f0       	brcs	.+18     	; 0x1266 <fsm_main+0x7ba>
    1254:	e2 e0       	ldi	r30, 0x02	; 2
    1256:	9e 16       	cp	r9, r30
    1258:	09 f4       	brne	.+2      	; 0x125c <fsm_main+0x7b0>
    125a:	54 c0       	rjmp	.+168    	; 0x1304 <fsm_main+0x858>
    125c:	f3 e0       	ldi	r31, 0x03	; 3
    125e:	9f 16       	cp	r9, r31
    1260:	09 f4       	brne	.+2      	; 0x1264 <fsm_main+0x7b8>
    1262:	78 c0       	rjmp	.+240    	; 0x1354 <fsm_main+0x8a8>
    1264:	9d c0       	rjmp	.+314    	; 0x13a0 <fsm_main+0x8f4>
				{
				case FIFTEEEN:
					oled_show_duration();
    1266:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <oled_show_duration>
					oled_clear_line(2);
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
					oled_print_string("> 15 seconds", 2,0);
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	62 e0       	ldi	r22, 0x02	; 2
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	88 e4       	ldi	r24, 0x48	; 72
    127c:	93 e0       	ldi	r25, 0x03	; 3
    127e:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
					
					if (readings.joystick_up_down > 230) {
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	87 3e       	cpi	r24, 0xE7	; 231
    1288:	91 05       	cpc	r25, r1
    128a:	24 f4       	brge	.+8      	; 0x1294 <fsm_main+0x7e8>
						nextDur = SIXTY;
						} else if (readings.joystick_up_down < 50) {
    128c:	c2 97       	sbiw	r24, 0x32	; 50
    128e:	3c f0       	brlt	.+14     	; 0x129e <fsm_main+0x7f2>
    1290:	97 2c       	mov	r9, r7
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <fsm_main+0x7f6>
					oled_show_duration();
					oled_clear_line(2);
					oled_print_string("> 15 seconds", 2,0);
					
					if (readings.joystick_up_down > 230) {
						nextDur = SIXTY;
    1294:	0f 2e       	mov	r0, r31
    1296:	f3 e0       	ldi	r31, 0x03	; 3
    1298:	9f 2e       	mov	r9, r31
    129a:	f0 2d       	mov	r31, r0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <fsm_main+0x7f6>
						} else if (readings.joystick_up_down < 50) {
						nextDur = THIRTY;
    129e:	99 24       	eor	r9, r9
    12a0:	93 94       	inc	r9
					}
					
					if (readings.shoot_button == 255) {
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	8f 3f       	cpi	r24, 0xFF	; 255
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f0       	breq	.+2      	; 0x12ae <fsm_main+0x802>
    12ac:	7c c0       	rjmp	.+248    	; 0x13a6 <fsm_main+0x8fa>
						game_duration_settings.selected_index = 0; 
    12ae:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <game_duration_settings+0x4>
						nextScreen = MAIN_MENU; 
    12b2:	f1 2c       	mov	r15, r1
    12b4:	7f c0       	rjmp	.+254    	; 0x13b4 <fsm_main+0x908>
					}
					break;
					
				case THIRTY:
					oled_show_duration();
    12b6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <oled_show_duration>
					oled_clear_line(3);
    12ba:	83 e0       	ldi	r24, 0x03	; 3
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
					oled_print_string("> 30 seconds", 3,0);
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	63 e0       	ldi	r22, 0x03	; 3
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	85 e5       	ldi	r24, 0x55	; 85
    12cc:	93 e0       	ldi	r25, 0x03	; 3
    12ce:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
					
					if (readings.joystick_up_down > 230) {
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	87 3e       	cpi	r24, 0xE7	; 231
    12d8:	91 05       	cpc	r25, r1
    12da:	24 f4       	brge	.+8      	; 0x12e4 <fsm_main+0x838>
						nextDur = FIFTEEEN;
						} else if (readings.joystick_up_down < 50) {
    12dc:	c2 97       	sbiw	r24, 0x32	; 50
    12de:	24 f0       	brlt	.+8      	; 0x12e8 <fsm_main+0x83c>
    12e0:	97 2c       	mov	r9, r7
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <fsm_main+0x842>
					oled_show_duration();
					oled_clear_line(3);
					oled_print_string("> 30 seconds", 3,0);
					
					if (readings.joystick_up_down > 230) {
						nextDur = FIFTEEEN;
    12e4:	91 2c       	mov	r9, r1
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <fsm_main+0x842>
						} else if (readings.joystick_up_down < 50) {
						nextDur = FORTYFIVE;
    12e8:	68 94       	set
    12ea:	99 24       	eor	r9, r9
    12ec:	91 f8       	bld	r9, 1
					}
					
					if (readings.shoot_button == 255) {
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	8f 3f       	cpi	r24, 0xFF	; 255
    12f4:	91 05       	cpc	r25, r1
    12f6:	09 f0       	breq	.+2      	; 0x12fa <fsm_main+0x84e>
    12f8:	58 c0       	rjmp	.+176    	; 0x13aa <fsm_main+0x8fe>
						game_duration_settings.selected_index = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <game_duration_settings+0x4>
						nextScreen = MAIN_MENU; 
    1300:	f1 2c       	mov	r15, r1
    1302:	58 c0       	rjmp	.+176    	; 0x13b4 <fsm_main+0x908>
					}
					break;
				case FORTYFIVE:
					oled_show_duration();
    1304:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <oled_show_duration>
					oled_clear_line(4);
    1308:	84 e0       	ldi	r24, 0x04	; 4
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
					oled_print_string("> 45 seconds", 4,0);
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	64 e0       	ldi	r22, 0x04	; 4
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	82 e6       	ldi	r24, 0x62	; 98
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
				
					if (readings.joystick_up_down > 230) {
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	87 3e       	cpi	r24, 0xE7	; 231
    1326:	91 05       	cpc	r25, r1
    1328:	24 f4       	brge	.+8      	; 0x1332 <fsm_main+0x886>
						nextDur = THIRTY;
						} else if (readings.joystick_up_down < 50) {
    132a:	c2 97       	sbiw	r24, 0x32	; 50
    132c:	2c f0       	brlt	.+10     	; 0x1338 <fsm_main+0x88c>
    132e:	97 2c       	mov	r9, r7
    1330:	07 c0       	rjmp	.+14     	; 0x1340 <fsm_main+0x894>
					oled_show_duration();
					oled_clear_line(4);
					oled_print_string("> 45 seconds", 4,0);
				
					if (readings.joystick_up_down > 230) {
						nextDur = THIRTY;
    1332:	99 24       	eor	r9, r9
    1334:	93 94       	inc	r9
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <fsm_main+0x894>
						} else if (readings.joystick_up_down < 50) {
						nextDur = SIXTY;
    1338:	0f 2e       	mov	r0, r31
    133a:	f3 e0       	ldi	r31, 0x03	; 3
    133c:	9f 2e       	mov	r9, r31
    133e:	f0 2d       	mov	r31, r0
					}
				
					if (readings.shoot_button == 255) {
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	8f 3f       	cpi	r24, 0xFF	; 255
    1346:	91 05       	cpc	r25, r1
    1348:	91 f5       	brne	.+100    	; 0x13ae <fsm_main+0x902>
						game_duration_settings.selected_index = 2;
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <game_duration_settings+0x4>
						nextScreen = MAIN_MENU; 
    1350:	f1 2c       	mov	r15, r1
    1352:	30 c0       	rjmp	.+96     	; 0x13b4 <fsm_main+0x908>
					}
					break;
				case SIXTY:
					oled_show_duration();
    1354:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <oled_show_duration>
					oled_clear_line(5);
    1358:	85 e0       	ldi	r24, 0x05	; 5
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 15 02 	call	0x42a	; 0x42a <oled_clear_line>
					oled_print_string("> 60 seconds", 5,0);
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	65 e0       	ldi	r22, 0x05	; 5
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	8f e6       	ldi	r24, 0x6F	; 111
    136a:	93 e0       	ldi	r25, 0x03	; 3
    136c:	0e 94 48 02 	call	0x490	; 0x490 <oled_print_string>
					
					if (readings.joystick_up_down > 230) {
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	87 3e       	cpi	r24, 0xE7	; 231
    1376:	91 05       	cpc	r25, r1
    1378:	24 f4       	brge	.+8      	; 0x1382 <fsm_main+0x8d6>
						nextDur = FORTYFIVE;
						} else if (readings.joystick_up_down < 50) {
    137a:	c2 97       	sbiw	r24, 0x32	; 50
    137c:	34 f0       	brlt	.+12     	; 0x138a <fsm_main+0x8de>
    137e:	97 2c       	mov	r9, r7
    1380:	05 c0       	rjmp	.+10     	; 0x138c <fsm_main+0x8e0>
					oled_show_duration();
					oled_clear_line(5);
					oled_print_string("> 60 seconds", 5,0);
					
					if (readings.joystick_up_down > 230) {
						nextDur = FORTYFIVE;
    1382:	68 94       	set
    1384:	99 24       	eor	r9, r9
    1386:	91 f8       	bld	r9, 1
    1388:	01 c0       	rjmp	.+2      	; 0x138c <fsm_main+0x8e0>
						} else if (readings.joystick_up_down < 50) {
						nextDur = FIFTEEEN;
    138a:	91 2c       	mov	r9, r1
					}
					
					if (readings.shoot_button == 255) {
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	8f 3f       	cpi	r24, 0xFF	; 255
    1392:	91 05       	cpc	r25, r1
    1394:	71 f4       	brne	.+28     	; 0x13b2 <fsm_main+0x906>
						game_duration_settings.selected_index = 3;
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <game_duration_settings+0x4>
						nextScreen = MAIN_MENU; 
    139c:	f1 2c       	mov	r15, r1
    139e:	0a c0       	rjmp	.+20     	; 0x13b4 <fsm_main+0x908>
				
				_delay_ms(300); 
				break; 
				
			case SET_DURATION:			
				switch (currentDur)
    13a0:	97 2c       	mov	r9, r7
    13a2:	f1 2e       	mov	r15, r17
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <fsm_main+0x908>
    13a6:	f1 2e       	mov	r15, r17
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <fsm_main+0x908>
    13aa:	f1 2e       	mov	r15, r17
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <fsm_main+0x908>
    13ae:	f1 2e       	mov	r15, r17
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <fsm_main+0x908>
    13b2:	f1 2e       	mov	r15, r17
    13b4:	2f ef       	ldi	r18, 0xFF	; 255
    13b6:	4f e7       	ldi	r20, 0x7F	; 127
    13b8:	54 e0       	ldi	r21, 0x04	; 4
    13ba:	21 50       	subi	r18, 0x01	; 1
    13bc:	40 40       	sbci	r20, 0x00	; 0
    13be:	50 40       	sbci	r21, 0x00	; 0
    13c0:	e1 f7       	brne	.-8      	; 0x13ba <fsm_main+0x90e>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <fsm_main+0x918>
    13c4:	00 00       	nop
    13c6:	79 2c       	mov	r7, r9
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <fsm_main+0x928>
				
				current_tick = current_tick + 1;
				int play_for = game_duration_settings.durations[game_duration_settings.selected_index];
				printf("play for: %i, played: %i \n\r", (ticks_per_second*play_for), current_tick);
				if (current_tick > (ticks_per_second*play_for)){
					nextScreen = SCOREBOARD;
    13ca:	68 94       	set
    13cc:	ff 24       	eor	r15, r15
    13ce:	f2 f8       	bld	r15, 2
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <fsm_main+0x928>
	oled_goto_pos(0,0); 
	
	while(1){
		readings = read_channels();
		
		switch(screen) {
    13d2:	f1 2e       	mov	r15, r17
				_delay_ms(300); 			 
				break; 
			
			
		}
		if (nextScreen != screen) {
    13d4:	1f 15       	cp	r17, r15
    13d6:	09 f4       	brne	.+2      	; 0x13da <fsm_main+0x92e>
    13d8:	83 cb       	rjmp	.-2298   	; 0xae0 <fsm_main+0x34>
			oled_clear_screen(); 
    13da:	0e 94 ef 01 	call	0x3de	; 0x3de <oled_clear_screen>
    13de:	80 cb       	rjmp	.-2304   	; 0xae0 <fsm_main+0x34>

000013e0 <main>:
#include <avr/delay.h>
#include <time.h>



int main(void){	
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	2e 97       	sbiw	r28, 0x0e	; 14
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
	FILE uart_out = FDEV_SETUP_STREAM(transmit_char_UART, recieve_char_UART,
    13f4:	8e 01       	movw	r16, r28
    13f6:	0f 5f       	subi	r16, 0xFF	; 255
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
    13fa:	8e e0       	ldi	r24, 0x0E	; 14
    13fc:	f8 01       	movw	r30, r16
    13fe:	11 92       	st	Z+, r1
    1400:	8a 95       	dec	r24
    1402:	e9 f7       	brne	.-6      	; 0x13fe <main+0x1e>
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	8c 83       	std	Y+4, r24	; 0x04
    1408:	83 e3       	ldi	r24, 0x33	; 51
    140a:	93 e0       	ldi	r25, 0x03	; 3
    140c:	9a 87       	std	Y+10, r25	; 0x0a
    140e:	89 87       	std	Y+9, r24	; 0x09
    1410:	8f e2       	ldi	r24, 0x2F	; 47
    1412:	93 e0       	ldi	r25, 0x03	; 3
    1414:	9c 87       	std	Y+12, r25	; 0x0c
    1416:	8b 87       	std	Y+11, r24	; 0x0b
	_FDEV_SETUP_WRITE);
	init_external_memory_bus();
    1418:	0e 94 37 03 	call	0x66e	; 0x66e <init_external_memory_bus>
	init_UART();
    141c:	0e 94 27 03 	call	0x64e	; 0x64e <init_UART>
	//flush_UART();
	//test_oled();
	stdout = &uart_out;
    1420:	10 93 b1 03 	sts	0x03B1, r17	; 0x8003b1 <__iob+0x3>
    1424:	00 93 b0 03 	sts	0x03B0, r16	; 0x8003b0 <__iob+0x2>
	oled_init();	
    1428:	0e 94 91 01 	call	0x322	; 0x322 <oled_init>
	init_clock_adc();
    142c:	0e 94 45 01 	call	0x28a	; 0x28a <init_clock_adc>
	
	int fail = can_init(MODE_NORMAL);
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 30 04 	call	0x860	; 0x860 <can_init>
	if (!fail){
    1436:	81 11       	cpse	r24, r1
    1438:	08 c0       	rjmp	.+16     	; 0x144a <main+0x6a>
		printf("successfully initializes \n\r");
    143a:	8c e7       	ldi	r24, 0x7C	; 124
    143c:	93 e0       	ldi	r25, 0x03	; 3
    143e:	9f 93       	push	r25
    1440:	8f 93       	push	r24
    1442:	0e 94 29 0a 	call	0x1452	; 0x1452 <printf>
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
	}
	
	can_message *recieved_message;
	calibrate_joystick();
    144a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <calibrate_joystick>
	
	
	while (1)
	{
		fsm_main();
    144e:	0e 94 56 05 	call	0xaac	; 0xaac <fsm_main>

00001452 <printf>:
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ef e2       	ldi	r30, 0x2F	; 47
    1458:	fa e0       	ldi	r31, 0x0A	; 10
    145a:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__prologue_saves__+0x20>
    145e:	ae 01       	movw	r20, r28
    1460:	4b 5f       	subi	r20, 0xFB	; 251
    1462:	5f 4f       	sbci	r21, 0xFF	; 255
    1464:	fa 01       	movw	r30, r20
    1466:	61 91       	ld	r22, Z+
    1468:	71 91       	ld	r23, Z+
    146a:	af 01       	movw	r20, r30
    146c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <__iob+0x2>
    1470:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <__iob+0x3>
    1474:	0e 94 91 0a 	call	0x1522	; 0x1522 <vfprintf>
    1478:	e2 e0       	ldi	r30, 0x02	; 2
    147a:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__epilogue_restores__+0x20>

0000147e <puts>:
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <__iob+0x2>
    148a:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <__iob+0x3>
    148e:	23 81       	ldd	r18, Z+3	; 0x03
    1490:	21 ff       	sbrs	r18, 1
    1492:	1b c0       	rjmp	.+54     	; 0x14ca <puts+0x4c>
    1494:	8c 01       	movw	r16, r24
    1496:	d0 e0       	ldi	r29, 0x00	; 0
    1498:	c0 e0       	ldi	r28, 0x00	; 0
    149a:	f8 01       	movw	r30, r16
    149c:	81 91       	ld	r24, Z+
    149e:	8f 01       	movw	r16, r30
    14a0:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <__iob+0x2>
    14a4:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <__iob+0x3>
    14a8:	db 01       	movw	r26, r22
    14aa:	18 96       	adiw	r26, 0x08	; 8
    14ac:	ed 91       	ld	r30, X+
    14ae:	fc 91       	ld	r31, X
    14b0:	19 97       	sbiw	r26, 0x09	; 9
    14b2:	88 23       	and	r24, r24
    14b4:	31 f0       	breq	.+12     	; 0x14c2 <puts+0x44>
    14b6:	09 95       	icall
    14b8:	89 2b       	or	r24, r25
    14ba:	79 f3       	breq	.-34     	; 0x149a <puts+0x1c>
    14bc:	df ef       	ldi	r29, 0xFF	; 255
    14be:	cf ef       	ldi	r28, 0xFF	; 255
    14c0:	ec cf       	rjmp	.-40     	; 0x149a <puts+0x1c>
    14c2:	8a e0       	ldi	r24, 0x0A	; 10
    14c4:	09 95       	icall
    14c6:	89 2b       	or	r24, r25
    14c8:	19 f0       	breq	.+6      	; 0x14d0 <puts+0x52>
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <puts+0x56>
    14d0:	8d 2f       	mov	r24, r29
    14d2:	9c 2f       	mov	r25, r28
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <sprintf>:
    14de:	ae e0       	ldi	r26, 0x0E	; 14
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e7       	ldi	r30, 0x75	; 117
    14e4:	fa e0       	ldi	r31, 0x0A	; 10
    14e6:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__prologue_saves__+0x1c>
    14ea:	0d 89       	ldd	r16, Y+21	; 0x15
    14ec:	1e 89       	ldd	r17, Y+22	; 0x16
    14ee:	86 e0       	ldi	r24, 0x06	; 6
    14f0:	8c 83       	std	Y+4, r24	; 0x04
    14f2:	1a 83       	std	Y+2, r17	; 0x02
    14f4:	09 83       	std	Y+1, r16	; 0x01
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	9f e7       	ldi	r25, 0x7F	; 127
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    14fe:	ae 01       	movw	r20, r28
    1500:	47 5e       	subi	r20, 0xE7	; 231
    1502:	5f 4f       	sbci	r21, 0xFF	; 255
    1504:	6f 89       	ldd	r22, Y+23	; 0x17
    1506:	78 8d       	ldd	r23, Y+24	; 0x18
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	0e 94 91 0a 	call	0x1522	; 0x1522 <vfprintf>
    1510:	ef 81       	ldd	r30, Y+7	; 0x07
    1512:	f8 85       	ldd	r31, Y+8	; 0x08
    1514:	e0 0f       	add	r30, r16
    1516:	f1 1f       	adc	r31, r17
    1518:	10 82       	st	Z, r1
    151a:	2e 96       	adiw	r28, 0x0e	; 14
    151c:	e4 e0       	ldi	r30, 0x04	; 4
    151e:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__epilogue_restores__+0x1c>

00001522 <vfprintf>:
    1522:	ab e0       	ldi	r26, 0x0B	; 11
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e9       	ldi	r30, 0x97	; 151
    1528:	fa e0       	ldi	r31, 0x0A	; 10
    152a:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__prologue_saves__>
    152e:	6c 01       	movw	r12, r24
    1530:	7b 01       	movw	r14, r22
    1532:	8a 01       	movw	r16, r20
    1534:	fc 01       	movw	r30, r24
    1536:	17 82       	std	Z+7, r1	; 0x07
    1538:	16 82       	std	Z+6, r1	; 0x06
    153a:	83 81       	ldd	r24, Z+3	; 0x03
    153c:	81 ff       	sbrs	r24, 1
    153e:	cc c1       	rjmp	.+920    	; 0x18d8 <vfprintf+0x3b6>
    1540:	ce 01       	movw	r24, r28
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	3c 01       	movw	r6, r24
    1546:	f6 01       	movw	r30, r12
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	f7 01       	movw	r30, r14
    154c:	93 fd       	sbrc	r25, 3
    154e:	85 91       	lpm	r24, Z+
    1550:	93 ff       	sbrs	r25, 3
    1552:	81 91       	ld	r24, Z+
    1554:	7f 01       	movw	r14, r30
    1556:	88 23       	and	r24, r24
    1558:	09 f4       	brne	.+2      	; 0x155c <vfprintf+0x3a>
    155a:	ba c1       	rjmp	.+884    	; 0x18d0 <vfprintf+0x3ae>
    155c:	85 32       	cpi	r24, 0x25	; 37
    155e:	39 f4       	brne	.+14     	; 0x156e <vfprintf+0x4c>
    1560:	93 fd       	sbrc	r25, 3
    1562:	85 91       	lpm	r24, Z+
    1564:	93 ff       	sbrs	r25, 3
    1566:	81 91       	ld	r24, Z+
    1568:	7f 01       	movw	r14, r30
    156a:	85 32       	cpi	r24, 0x25	; 37
    156c:	29 f4       	brne	.+10     	; 0x1578 <vfprintf+0x56>
    156e:	b6 01       	movw	r22, r12
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 88 0c 	call	0x1910	; 0x1910 <fputc>
    1576:	e7 cf       	rjmp	.-50     	; 0x1546 <vfprintf+0x24>
    1578:	91 2c       	mov	r9, r1
    157a:	21 2c       	mov	r2, r1
    157c:	31 2c       	mov	r3, r1
    157e:	ff e1       	ldi	r31, 0x1F	; 31
    1580:	f3 15       	cp	r31, r3
    1582:	d8 f0       	brcs	.+54     	; 0x15ba <vfprintf+0x98>
    1584:	8b 32       	cpi	r24, 0x2B	; 43
    1586:	79 f0       	breq	.+30     	; 0x15a6 <vfprintf+0x84>
    1588:	38 f4       	brcc	.+14     	; 0x1598 <vfprintf+0x76>
    158a:	80 32       	cpi	r24, 0x20	; 32
    158c:	79 f0       	breq	.+30     	; 0x15ac <vfprintf+0x8a>
    158e:	83 32       	cpi	r24, 0x23	; 35
    1590:	a1 f4       	brne	.+40     	; 0x15ba <vfprintf+0x98>
    1592:	23 2d       	mov	r18, r3
    1594:	20 61       	ori	r18, 0x10	; 16
    1596:	1d c0       	rjmp	.+58     	; 0x15d2 <vfprintf+0xb0>
    1598:	8d 32       	cpi	r24, 0x2D	; 45
    159a:	61 f0       	breq	.+24     	; 0x15b4 <vfprintf+0x92>
    159c:	80 33       	cpi	r24, 0x30	; 48
    159e:	69 f4       	brne	.+26     	; 0x15ba <vfprintf+0x98>
    15a0:	23 2d       	mov	r18, r3
    15a2:	21 60       	ori	r18, 0x01	; 1
    15a4:	16 c0       	rjmp	.+44     	; 0x15d2 <vfprintf+0xb0>
    15a6:	83 2d       	mov	r24, r3
    15a8:	82 60       	ori	r24, 0x02	; 2
    15aa:	38 2e       	mov	r3, r24
    15ac:	e3 2d       	mov	r30, r3
    15ae:	e4 60       	ori	r30, 0x04	; 4
    15b0:	3e 2e       	mov	r3, r30
    15b2:	2a c0       	rjmp	.+84     	; 0x1608 <vfprintf+0xe6>
    15b4:	f3 2d       	mov	r31, r3
    15b6:	f8 60       	ori	r31, 0x08	; 8
    15b8:	1d c0       	rjmp	.+58     	; 0x15f4 <vfprintf+0xd2>
    15ba:	37 fc       	sbrc	r3, 7
    15bc:	2d c0       	rjmp	.+90     	; 0x1618 <vfprintf+0xf6>
    15be:	20 ed       	ldi	r18, 0xD0	; 208
    15c0:	28 0f       	add	r18, r24
    15c2:	2a 30       	cpi	r18, 0x0A	; 10
    15c4:	40 f0       	brcs	.+16     	; 0x15d6 <vfprintf+0xb4>
    15c6:	8e 32       	cpi	r24, 0x2E	; 46
    15c8:	b9 f4       	brne	.+46     	; 0x15f8 <vfprintf+0xd6>
    15ca:	36 fc       	sbrc	r3, 6
    15cc:	81 c1       	rjmp	.+770    	; 0x18d0 <vfprintf+0x3ae>
    15ce:	23 2d       	mov	r18, r3
    15d0:	20 64       	ori	r18, 0x40	; 64
    15d2:	32 2e       	mov	r3, r18
    15d4:	19 c0       	rjmp	.+50     	; 0x1608 <vfprintf+0xe6>
    15d6:	36 fe       	sbrs	r3, 6
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <vfprintf+0xc4>
    15da:	8a e0       	ldi	r24, 0x0A	; 10
    15dc:	98 9e       	mul	r9, r24
    15de:	20 0d       	add	r18, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	92 2e       	mov	r9, r18
    15e4:	11 c0       	rjmp	.+34     	; 0x1608 <vfprintf+0xe6>
    15e6:	ea e0       	ldi	r30, 0x0A	; 10
    15e8:	2e 9e       	mul	r2, r30
    15ea:	20 0d       	add	r18, r0
    15ec:	11 24       	eor	r1, r1
    15ee:	22 2e       	mov	r2, r18
    15f0:	f3 2d       	mov	r31, r3
    15f2:	f0 62       	ori	r31, 0x20	; 32
    15f4:	3f 2e       	mov	r3, r31
    15f6:	08 c0       	rjmp	.+16     	; 0x1608 <vfprintf+0xe6>
    15f8:	8c 36       	cpi	r24, 0x6C	; 108
    15fa:	21 f4       	brne	.+8      	; 0x1604 <vfprintf+0xe2>
    15fc:	83 2d       	mov	r24, r3
    15fe:	80 68       	ori	r24, 0x80	; 128
    1600:	38 2e       	mov	r3, r24
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <vfprintf+0xe6>
    1604:	88 36       	cpi	r24, 0x68	; 104
    1606:	41 f4       	brne	.+16     	; 0x1618 <vfprintf+0xf6>
    1608:	f7 01       	movw	r30, r14
    160a:	93 fd       	sbrc	r25, 3
    160c:	85 91       	lpm	r24, Z+
    160e:	93 ff       	sbrs	r25, 3
    1610:	81 91       	ld	r24, Z+
    1612:	7f 01       	movw	r14, r30
    1614:	81 11       	cpse	r24, r1
    1616:	b3 cf       	rjmp	.-154    	; 0x157e <vfprintf+0x5c>
    1618:	98 2f       	mov	r25, r24
    161a:	9f 7d       	andi	r25, 0xDF	; 223
    161c:	95 54       	subi	r25, 0x45	; 69
    161e:	93 30       	cpi	r25, 0x03	; 3
    1620:	28 f4       	brcc	.+10     	; 0x162c <vfprintf+0x10a>
    1622:	0c 5f       	subi	r16, 0xFC	; 252
    1624:	1f 4f       	sbci	r17, 0xFF	; 255
    1626:	9f e3       	ldi	r25, 0x3F	; 63
    1628:	99 83       	std	Y+1, r25	; 0x01
    162a:	0d c0       	rjmp	.+26     	; 0x1646 <vfprintf+0x124>
    162c:	83 36       	cpi	r24, 0x63	; 99
    162e:	31 f0       	breq	.+12     	; 0x163c <vfprintf+0x11a>
    1630:	83 37       	cpi	r24, 0x73	; 115
    1632:	71 f0       	breq	.+28     	; 0x1650 <vfprintf+0x12e>
    1634:	83 35       	cpi	r24, 0x53	; 83
    1636:	09 f0       	breq	.+2      	; 0x163a <vfprintf+0x118>
    1638:	59 c0       	rjmp	.+178    	; 0x16ec <vfprintf+0x1ca>
    163a:	21 c0       	rjmp	.+66     	; 0x167e <vfprintf+0x15c>
    163c:	f8 01       	movw	r30, r16
    163e:	80 81       	ld	r24, Z
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	0e 5f       	subi	r16, 0xFE	; 254
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	88 24       	eor	r8, r8
    1648:	83 94       	inc	r8
    164a:	91 2c       	mov	r9, r1
    164c:	53 01       	movw	r10, r6
    164e:	13 c0       	rjmp	.+38     	; 0x1676 <vfprintf+0x154>
    1650:	28 01       	movw	r4, r16
    1652:	f2 e0       	ldi	r31, 0x02	; 2
    1654:	4f 0e       	add	r4, r31
    1656:	51 1c       	adc	r5, r1
    1658:	f8 01       	movw	r30, r16
    165a:	a0 80       	ld	r10, Z
    165c:	b1 80       	ldd	r11, Z+1	; 0x01
    165e:	36 fe       	sbrs	r3, 6
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <vfprintf+0x146>
    1662:	69 2d       	mov	r22, r9
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	02 c0       	rjmp	.+4      	; 0x166c <vfprintf+0x14a>
    1668:	6f ef       	ldi	r22, 0xFF	; 255
    166a:	7f ef       	ldi	r23, 0xFF	; 255
    166c:	c5 01       	movw	r24, r10
    166e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <strnlen>
    1672:	4c 01       	movw	r8, r24
    1674:	82 01       	movw	r16, r4
    1676:	f3 2d       	mov	r31, r3
    1678:	ff 77       	andi	r31, 0x7F	; 127
    167a:	3f 2e       	mov	r3, r31
    167c:	16 c0       	rjmp	.+44     	; 0x16aa <vfprintf+0x188>
    167e:	28 01       	movw	r4, r16
    1680:	22 e0       	ldi	r18, 0x02	; 2
    1682:	42 0e       	add	r4, r18
    1684:	51 1c       	adc	r5, r1
    1686:	f8 01       	movw	r30, r16
    1688:	a0 80       	ld	r10, Z
    168a:	b1 80       	ldd	r11, Z+1	; 0x01
    168c:	36 fe       	sbrs	r3, 6
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <vfprintf+0x174>
    1690:	69 2d       	mov	r22, r9
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <vfprintf+0x178>
    1696:	6f ef       	ldi	r22, 0xFF	; 255
    1698:	7f ef       	ldi	r23, 0xFF	; 255
    169a:	c5 01       	movw	r24, r10
    169c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <strnlen_P>
    16a0:	4c 01       	movw	r8, r24
    16a2:	f3 2d       	mov	r31, r3
    16a4:	f0 68       	ori	r31, 0x80	; 128
    16a6:	3f 2e       	mov	r3, r31
    16a8:	82 01       	movw	r16, r4
    16aa:	33 fc       	sbrc	r3, 3
    16ac:	1b c0       	rjmp	.+54     	; 0x16e4 <vfprintf+0x1c2>
    16ae:	82 2d       	mov	r24, r2
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	88 16       	cp	r8, r24
    16b4:	99 06       	cpc	r9, r25
    16b6:	b0 f4       	brcc	.+44     	; 0x16e4 <vfprintf+0x1c2>
    16b8:	b6 01       	movw	r22, r12
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 88 0c 	call	0x1910	; 0x1910 <fputc>
    16c2:	2a 94       	dec	r2
    16c4:	f4 cf       	rjmp	.-24     	; 0x16ae <vfprintf+0x18c>
    16c6:	f5 01       	movw	r30, r10
    16c8:	37 fc       	sbrc	r3, 7
    16ca:	85 91       	lpm	r24, Z+
    16cc:	37 fe       	sbrs	r3, 7
    16ce:	81 91       	ld	r24, Z+
    16d0:	5f 01       	movw	r10, r30
    16d2:	b6 01       	movw	r22, r12
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 88 0c 	call	0x1910	; 0x1910 <fputc>
    16da:	21 10       	cpse	r2, r1
    16dc:	2a 94       	dec	r2
    16de:	21 e0       	ldi	r18, 0x01	; 1
    16e0:	82 1a       	sub	r8, r18
    16e2:	91 08       	sbc	r9, r1
    16e4:	81 14       	cp	r8, r1
    16e6:	91 04       	cpc	r9, r1
    16e8:	71 f7       	brne	.-36     	; 0x16c6 <vfprintf+0x1a4>
    16ea:	e8 c0       	rjmp	.+464    	; 0x18bc <vfprintf+0x39a>
    16ec:	84 36       	cpi	r24, 0x64	; 100
    16ee:	11 f0       	breq	.+4      	; 0x16f4 <vfprintf+0x1d2>
    16f0:	89 36       	cpi	r24, 0x69	; 105
    16f2:	41 f5       	brne	.+80     	; 0x1744 <vfprintf+0x222>
    16f4:	f8 01       	movw	r30, r16
    16f6:	37 fe       	sbrs	r3, 7
    16f8:	07 c0       	rjmp	.+14     	; 0x1708 <vfprintf+0x1e6>
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	0c 5f       	subi	r16, 0xFC	; 252
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	08 c0       	rjmp	.+16     	; 0x1718 <vfprintf+0x1f6>
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	07 2e       	mov	r0, r23
    170e:	00 0c       	add	r0, r0
    1710:	88 0b       	sbc	r24, r24
    1712:	99 0b       	sbc	r25, r25
    1714:	0e 5f       	subi	r16, 0xFE	; 254
    1716:	1f 4f       	sbci	r17, 0xFF	; 255
    1718:	f3 2d       	mov	r31, r3
    171a:	ff 76       	andi	r31, 0x6F	; 111
    171c:	3f 2e       	mov	r3, r31
    171e:	97 ff       	sbrs	r25, 7
    1720:	09 c0       	rjmp	.+18     	; 0x1734 <vfprintf+0x212>
    1722:	90 95       	com	r25
    1724:	80 95       	com	r24
    1726:	70 95       	com	r23
    1728:	61 95       	neg	r22
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	8f 4f       	sbci	r24, 0xFF	; 255
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	f0 68       	ori	r31, 0x80	; 128
    1732:	3f 2e       	mov	r3, r31
    1734:	2a e0       	ldi	r18, 0x0A	; 10
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	a3 01       	movw	r20, r6
    173a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__ultoa_invert>
    173e:	88 2e       	mov	r8, r24
    1740:	86 18       	sub	r8, r6
    1742:	45 c0       	rjmp	.+138    	; 0x17ce <vfprintf+0x2ac>
    1744:	85 37       	cpi	r24, 0x75	; 117
    1746:	31 f4       	brne	.+12     	; 0x1754 <vfprintf+0x232>
    1748:	23 2d       	mov	r18, r3
    174a:	2f 7e       	andi	r18, 0xEF	; 239
    174c:	b2 2e       	mov	r11, r18
    174e:	2a e0       	ldi	r18, 0x0A	; 10
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	25 c0       	rjmp	.+74     	; 0x179e <vfprintf+0x27c>
    1754:	93 2d       	mov	r25, r3
    1756:	99 7f       	andi	r25, 0xF9	; 249
    1758:	b9 2e       	mov	r11, r25
    175a:	8f 36       	cpi	r24, 0x6F	; 111
    175c:	c1 f0       	breq	.+48     	; 0x178e <vfprintf+0x26c>
    175e:	18 f4       	brcc	.+6      	; 0x1766 <vfprintf+0x244>
    1760:	88 35       	cpi	r24, 0x58	; 88
    1762:	79 f0       	breq	.+30     	; 0x1782 <vfprintf+0x260>
    1764:	b5 c0       	rjmp	.+362    	; 0x18d0 <vfprintf+0x3ae>
    1766:	80 37       	cpi	r24, 0x70	; 112
    1768:	19 f0       	breq	.+6      	; 0x1770 <vfprintf+0x24e>
    176a:	88 37       	cpi	r24, 0x78	; 120
    176c:	21 f0       	breq	.+8      	; 0x1776 <vfprintf+0x254>
    176e:	b0 c0       	rjmp	.+352    	; 0x18d0 <vfprintf+0x3ae>
    1770:	e9 2f       	mov	r30, r25
    1772:	e0 61       	ori	r30, 0x10	; 16
    1774:	be 2e       	mov	r11, r30
    1776:	b4 fe       	sbrs	r11, 4
    1778:	0d c0       	rjmp	.+26     	; 0x1794 <vfprintf+0x272>
    177a:	fb 2d       	mov	r31, r11
    177c:	f4 60       	ori	r31, 0x04	; 4
    177e:	bf 2e       	mov	r11, r31
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <vfprintf+0x272>
    1782:	34 fe       	sbrs	r3, 4
    1784:	0a c0       	rjmp	.+20     	; 0x179a <vfprintf+0x278>
    1786:	29 2f       	mov	r18, r25
    1788:	26 60       	ori	r18, 0x06	; 6
    178a:	b2 2e       	mov	r11, r18
    178c:	06 c0       	rjmp	.+12     	; 0x179a <vfprintf+0x278>
    178e:	28 e0       	ldi	r18, 0x08	; 8
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	05 c0       	rjmp	.+10     	; 0x179e <vfprintf+0x27c>
    1794:	20 e1       	ldi	r18, 0x10	; 16
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <vfprintf+0x27c>
    179a:	20 e1       	ldi	r18, 0x10	; 16
    179c:	32 e0       	ldi	r19, 0x02	; 2
    179e:	f8 01       	movw	r30, r16
    17a0:	b7 fe       	sbrs	r11, 7
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <vfprintf+0x290>
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	0c 5f       	subi	r16, 0xFC	; 252
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	06 c0       	rjmp	.+12     	; 0x17be <vfprintf+0x29c>
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 5f       	subi	r16, 0xFE	; 254
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	a3 01       	movw	r20, r6
    17c0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__ultoa_invert>
    17c4:	88 2e       	mov	r8, r24
    17c6:	86 18       	sub	r8, r6
    17c8:	fb 2d       	mov	r31, r11
    17ca:	ff 77       	andi	r31, 0x7F	; 127
    17cc:	3f 2e       	mov	r3, r31
    17ce:	36 fe       	sbrs	r3, 6
    17d0:	0d c0       	rjmp	.+26     	; 0x17ec <vfprintf+0x2ca>
    17d2:	23 2d       	mov	r18, r3
    17d4:	2e 7f       	andi	r18, 0xFE	; 254
    17d6:	a2 2e       	mov	r10, r18
    17d8:	89 14       	cp	r8, r9
    17da:	58 f4       	brcc	.+22     	; 0x17f2 <vfprintf+0x2d0>
    17dc:	34 fe       	sbrs	r3, 4
    17de:	0b c0       	rjmp	.+22     	; 0x17f6 <vfprintf+0x2d4>
    17e0:	32 fc       	sbrc	r3, 2
    17e2:	09 c0       	rjmp	.+18     	; 0x17f6 <vfprintf+0x2d4>
    17e4:	83 2d       	mov	r24, r3
    17e6:	8e 7e       	andi	r24, 0xEE	; 238
    17e8:	a8 2e       	mov	r10, r24
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <vfprintf+0x2d4>
    17ec:	b8 2c       	mov	r11, r8
    17ee:	a3 2c       	mov	r10, r3
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <vfprintf+0x2d6>
    17f2:	b8 2c       	mov	r11, r8
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <vfprintf+0x2d6>
    17f6:	b9 2c       	mov	r11, r9
    17f8:	a4 fe       	sbrs	r10, 4
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <vfprintf+0x2f8>
    17fc:	fe 01       	movw	r30, r28
    17fe:	e8 0d       	add	r30, r8
    1800:	f1 1d       	adc	r31, r1
    1802:	80 81       	ld	r24, Z
    1804:	80 33       	cpi	r24, 0x30	; 48
    1806:	21 f4       	brne	.+8      	; 0x1810 <vfprintf+0x2ee>
    1808:	9a 2d       	mov	r25, r10
    180a:	99 7e       	andi	r25, 0xE9	; 233
    180c:	a9 2e       	mov	r10, r25
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <vfprintf+0x300>
    1810:	a2 fe       	sbrs	r10, 2
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <vfprintf+0x2fe>
    1814:	b3 94       	inc	r11
    1816:	b3 94       	inc	r11
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <vfprintf+0x300>
    181a:	8a 2d       	mov	r24, r10
    181c:	86 78       	andi	r24, 0x86	; 134
    181e:	09 f0       	breq	.+2      	; 0x1822 <vfprintf+0x300>
    1820:	b3 94       	inc	r11
    1822:	a3 fc       	sbrc	r10, 3
    1824:	11 c0       	rjmp	.+34     	; 0x1848 <vfprintf+0x326>
    1826:	a0 fe       	sbrs	r10, 0
    1828:	06 c0       	rjmp	.+12     	; 0x1836 <vfprintf+0x314>
    182a:	b2 14       	cp	r11, r2
    182c:	88 f4       	brcc	.+34     	; 0x1850 <vfprintf+0x32e>
    182e:	28 0c       	add	r2, r8
    1830:	92 2c       	mov	r9, r2
    1832:	9b 18       	sub	r9, r11
    1834:	0e c0       	rjmp	.+28     	; 0x1852 <vfprintf+0x330>
    1836:	b2 14       	cp	r11, r2
    1838:	60 f4       	brcc	.+24     	; 0x1852 <vfprintf+0x330>
    183a:	b6 01       	movw	r22, r12
    183c:	80 e2       	ldi	r24, 0x20	; 32
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 88 0c 	call	0x1910	; 0x1910 <fputc>
    1844:	b3 94       	inc	r11
    1846:	f7 cf       	rjmp	.-18     	; 0x1836 <vfprintf+0x314>
    1848:	b2 14       	cp	r11, r2
    184a:	18 f4       	brcc	.+6      	; 0x1852 <vfprintf+0x330>
    184c:	2b 18       	sub	r2, r11
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <vfprintf+0x332>
    1850:	98 2c       	mov	r9, r8
    1852:	21 2c       	mov	r2, r1
    1854:	a4 fe       	sbrs	r10, 4
    1856:	10 c0       	rjmp	.+32     	; 0x1878 <vfprintf+0x356>
    1858:	b6 01       	movw	r22, r12
    185a:	80 e3       	ldi	r24, 0x30	; 48
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 88 0c 	call	0x1910	; 0x1910 <fputc>
    1862:	a2 fe       	sbrs	r10, 2
    1864:	17 c0       	rjmp	.+46     	; 0x1894 <vfprintf+0x372>
    1866:	a1 fc       	sbrc	r10, 1
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <vfprintf+0x34e>
    186a:	88 e7       	ldi	r24, 0x78	; 120
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <vfprintf+0x352>
    1870:	88 e5       	ldi	r24, 0x58	; 88
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	b6 01       	movw	r22, r12
    1876:	0c c0       	rjmp	.+24     	; 0x1890 <vfprintf+0x36e>
    1878:	8a 2d       	mov	r24, r10
    187a:	86 78       	andi	r24, 0x86	; 134
    187c:	59 f0       	breq	.+22     	; 0x1894 <vfprintf+0x372>
    187e:	a1 fe       	sbrs	r10, 1
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x364>
    1882:	8b e2       	ldi	r24, 0x2B	; 43
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <vfprintf+0x366>
    1886:	80 e2       	ldi	r24, 0x20	; 32
    1888:	a7 fc       	sbrc	r10, 7
    188a:	8d e2       	ldi	r24, 0x2D	; 45
    188c:	b6 01       	movw	r22, r12
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 88 0c 	call	0x1910	; 0x1910 <fputc>
    1894:	89 14       	cp	r8, r9
    1896:	38 f4       	brcc	.+14     	; 0x18a6 <vfprintf+0x384>
    1898:	b6 01       	movw	r22, r12
    189a:	80 e3       	ldi	r24, 0x30	; 48
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 88 0c 	call	0x1910	; 0x1910 <fputc>
    18a2:	9a 94       	dec	r9
    18a4:	f7 cf       	rjmp	.-18     	; 0x1894 <vfprintf+0x372>
    18a6:	8a 94       	dec	r8
    18a8:	f3 01       	movw	r30, r6
    18aa:	e8 0d       	add	r30, r8
    18ac:	f1 1d       	adc	r31, r1
    18ae:	80 81       	ld	r24, Z
    18b0:	b6 01       	movw	r22, r12
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 88 0c 	call	0x1910	; 0x1910 <fputc>
    18b8:	81 10       	cpse	r8, r1
    18ba:	f5 cf       	rjmp	.-22     	; 0x18a6 <vfprintf+0x384>
    18bc:	22 20       	and	r2, r2
    18be:	09 f4       	brne	.+2      	; 0x18c2 <vfprintf+0x3a0>
    18c0:	42 ce       	rjmp	.-892    	; 0x1546 <vfprintf+0x24>
    18c2:	b6 01       	movw	r22, r12
    18c4:	80 e2       	ldi	r24, 0x20	; 32
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 88 0c 	call	0x1910	; 0x1910 <fputc>
    18cc:	2a 94       	dec	r2
    18ce:	f6 cf       	rjmp	.-20     	; 0x18bc <vfprintf+0x39a>
    18d0:	f6 01       	movw	r30, r12
    18d2:	86 81       	ldd	r24, Z+6	; 0x06
    18d4:	97 81       	ldd	r25, Z+7	; 0x07
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <vfprintf+0x3ba>
    18d8:	8f ef       	ldi	r24, 0xFF	; 255
    18da:	9f ef       	ldi	r25, 0xFF	; 255
    18dc:	2b 96       	adiw	r28, 0x0b	; 11
    18de:	e2 e1       	ldi	r30, 0x12	; 18
    18e0:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__epilogue_restores__>

000018e4 <strnlen_P>:
    18e4:	fc 01       	movw	r30, r24
    18e6:	05 90       	lpm	r0, Z+
    18e8:	61 50       	subi	r22, 0x01	; 1
    18ea:	70 40       	sbci	r23, 0x00	; 0
    18ec:	01 10       	cpse	r0, r1
    18ee:	d8 f7       	brcc	.-10     	; 0x18e6 <strnlen_P+0x2>
    18f0:	80 95       	com	r24
    18f2:	90 95       	com	r25
    18f4:	8e 0f       	add	r24, r30
    18f6:	9f 1f       	adc	r25, r31
    18f8:	08 95       	ret

000018fa <strnlen>:
    18fa:	fc 01       	movw	r30, r24
    18fc:	61 50       	subi	r22, 0x01	; 1
    18fe:	70 40       	sbci	r23, 0x00	; 0
    1900:	01 90       	ld	r0, Z+
    1902:	01 10       	cpse	r0, r1
    1904:	d8 f7       	brcc	.-10     	; 0x18fc <strnlen+0x2>
    1906:	80 95       	com	r24
    1908:	90 95       	com	r25
    190a:	8e 0f       	add	r24, r30
    190c:	9f 1f       	adc	r25, r31
    190e:	08 95       	ret

00001910 <fputc>:
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	fb 01       	movw	r30, r22
    191a:	23 81       	ldd	r18, Z+3	; 0x03
    191c:	21 fd       	sbrc	r18, 1
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <fputc+0x16>
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	9f ef       	ldi	r25, 0xFF	; 255
    1924:	2c c0       	rjmp	.+88     	; 0x197e <fputc+0x6e>
    1926:	22 ff       	sbrs	r18, 2
    1928:	16 c0       	rjmp	.+44     	; 0x1956 <fputc+0x46>
    192a:	46 81       	ldd	r20, Z+6	; 0x06
    192c:	57 81       	ldd	r21, Z+7	; 0x07
    192e:	24 81       	ldd	r18, Z+4	; 0x04
    1930:	35 81       	ldd	r19, Z+5	; 0x05
    1932:	42 17       	cp	r20, r18
    1934:	53 07       	cpc	r21, r19
    1936:	44 f4       	brge	.+16     	; 0x1948 <fputc+0x38>
    1938:	a0 81       	ld	r26, Z
    193a:	b1 81       	ldd	r27, Z+1	; 0x01
    193c:	9d 01       	movw	r18, r26
    193e:	2f 5f       	subi	r18, 0xFF	; 255
    1940:	3f 4f       	sbci	r19, 0xFF	; 255
    1942:	31 83       	std	Z+1, r19	; 0x01
    1944:	20 83       	st	Z, r18
    1946:	8c 93       	st	X, r24
    1948:	26 81       	ldd	r18, Z+6	; 0x06
    194a:	37 81       	ldd	r19, Z+7	; 0x07
    194c:	2f 5f       	subi	r18, 0xFF	; 255
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	37 83       	std	Z+7, r19	; 0x07
    1952:	26 83       	std	Z+6, r18	; 0x06
    1954:	14 c0       	rjmp	.+40     	; 0x197e <fputc+0x6e>
    1956:	8b 01       	movw	r16, r22
    1958:	ec 01       	movw	r28, r24
    195a:	fb 01       	movw	r30, r22
    195c:	00 84       	ldd	r0, Z+8	; 0x08
    195e:	f1 85       	ldd	r31, Z+9	; 0x09
    1960:	e0 2d       	mov	r30, r0
    1962:	09 95       	icall
    1964:	89 2b       	or	r24, r25
    1966:	e1 f6       	brne	.-72     	; 0x1920 <fputc+0x10>
    1968:	d8 01       	movw	r26, r16
    196a:	16 96       	adiw	r26, 0x06	; 6
    196c:	8d 91       	ld	r24, X+
    196e:	9c 91       	ld	r25, X
    1970:	17 97       	sbiw	r26, 0x07	; 7
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	17 96       	adiw	r26, 0x07	; 7
    1976:	9c 93       	st	X, r25
    1978:	8e 93       	st	-X, r24
    197a:	16 97       	sbiw	r26, 0x06	; 6
    197c:	ce 01       	movw	r24, r28
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	08 95       	ret

00001988 <__ultoa_invert>:
    1988:	fa 01       	movw	r30, r20
    198a:	aa 27       	eor	r26, r26
    198c:	28 30       	cpi	r18, 0x08	; 8
    198e:	51 f1       	breq	.+84     	; 0x19e4 <__ultoa_invert+0x5c>
    1990:	20 31       	cpi	r18, 0x10	; 16
    1992:	81 f1       	breq	.+96     	; 0x19f4 <__ultoa_invert+0x6c>
    1994:	e8 94       	clt
    1996:	6f 93       	push	r22
    1998:	6e 7f       	andi	r22, 0xFE	; 254
    199a:	6e 5f       	subi	r22, 0xFE	; 254
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	af 4f       	sbci	r26, 0xFF	; 255
    19a4:	b1 e0       	ldi	r27, 0x01	; 1
    19a6:	3e d0       	rcall	.+124    	; 0x1a24 <__ultoa_invert+0x9c>
    19a8:	b4 e0       	ldi	r27, 0x04	; 4
    19aa:	3c d0       	rcall	.+120    	; 0x1a24 <__ultoa_invert+0x9c>
    19ac:	67 0f       	add	r22, r23
    19ae:	78 1f       	adc	r23, r24
    19b0:	89 1f       	adc	r24, r25
    19b2:	9a 1f       	adc	r25, r26
    19b4:	a1 1d       	adc	r26, r1
    19b6:	68 0f       	add	r22, r24
    19b8:	79 1f       	adc	r23, r25
    19ba:	8a 1f       	adc	r24, r26
    19bc:	91 1d       	adc	r25, r1
    19be:	a1 1d       	adc	r26, r1
    19c0:	6a 0f       	add	r22, r26
    19c2:	71 1d       	adc	r23, r1
    19c4:	81 1d       	adc	r24, r1
    19c6:	91 1d       	adc	r25, r1
    19c8:	a1 1d       	adc	r26, r1
    19ca:	20 d0       	rcall	.+64     	; 0x1a0c <__ultoa_invert+0x84>
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <__ultoa_invert+0x48>
    19ce:	68 94       	set
    19d0:	3f 91       	pop	r19
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	26 9f       	mul	r18, r22
    19d6:	11 24       	eor	r1, r1
    19d8:	30 19       	sub	r19, r0
    19da:	30 5d       	subi	r19, 0xD0	; 208
    19dc:	31 93       	st	Z+, r19
    19de:	de f6       	brtc	.-74     	; 0x1996 <__ultoa_invert+0xe>
    19e0:	cf 01       	movw	r24, r30
    19e2:	08 95       	ret
    19e4:	46 2f       	mov	r20, r22
    19e6:	47 70       	andi	r20, 0x07	; 7
    19e8:	40 5d       	subi	r20, 0xD0	; 208
    19ea:	41 93       	st	Z+, r20
    19ec:	b3 e0       	ldi	r27, 0x03	; 3
    19ee:	0f d0       	rcall	.+30     	; 0x1a0e <__ultoa_invert+0x86>
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__ultoa_invert+0x5c>
    19f2:	f6 cf       	rjmp	.-20     	; 0x19e0 <__ultoa_invert+0x58>
    19f4:	46 2f       	mov	r20, r22
    19f6:	4f 70       	andi	r20, 0x0F	; 15
    19f8:	40 5d       	subi	r20, 0xD0	; 208
    19fa:	4a 33       	cpi	r20, 0x3A	; 58
    19fc:	18 f0       	brcs	.+6      	; 0x1a04 <__ultoa_invert+0x7c>
    19fe:	49 5d       	subi	r20, 0xD9	; 217
    1a00:	31 fd       	sbrc	r19, 1
    1a02:	40 52       	subi	r20, 0x20	; 32
    1a04:	41 93       	st	Z+, r20
    1a06:	02 d0       	rcall	.+4      	; 0x1a0c <__ultoa_invert+0x84>
    1a08:	a9 f7       	brne	.-22     	; 0x19f4 <__ultoa_invert+0x6c>
    1a0a:	ea cf       	rjmp	.-44     	; 0x19e0 <__ultoa_invert+0x58>
    1a0c:	b4 e0       	ldi	r27, 0x04	; 4
    1a0e:	a6 95       	lsr	r26
    1a10:	97 95       	ror	r25
    1a12:	87 95       	ror	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	ba 95       	dec	r27
    1a1a:	c9 f7       	brne	.-14     	; 0x1a0e <__ultoa_invert+0x86>
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	61 05       	cpc	r22, r1
    1a20:	71 05       	cpc	r23, r1
    1a22:	08 95       	ret
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
    1a28:	0a 2e       	mov	r0, r26
    1a2a:	06 94       	lsr	r0
    1a2c:	57 95       	ror	r21
    1a2e:	47 95       	ror	r20
    1a30:	37 95       	ror	r19
    1a32:	27 95       	ror	r18
    1a34:	ba 95       	dec	r27
    1a36:	c9 f7       	brne	.-14     	; 0x1a2a <__ultoa_invert+0xa2>
    1a38:	62 0f       	add	r22, r18
    1a3a:	73 1f       	adc	r23, r19
    1a3c:	84 1f       	adc	r24, r20
    1a3e:	95 1f       	adc	r25, r21
    1a40:	a0 1d       	adc	r26, r0
    1a42:	08 95       	ret

00001a44 <__prologue_saves__>:
    1a44:	2f 92       	push	r2
    1a46:	3f 92       	push	r3
    1a48:	4f 92       	push	r4
    1a4a:	5f 92       	push	r5
    1a4c:	6f 92       	push	r6
    1a4e:	7f 92       	push	r7
    1a50:	8f 92       	push	r8
    1a52:	9f 92       	push	r9
    1a54:	af 92       	push	r10
    1a56:	bf 92       	push	r11
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	ca 1b       	sub	r28, r26
    1a6e:	db 0b       	sbc	r29, r27
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	09 94       	ijmp

00001a7c <__epilogue_restores__>:
    1a7c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a7e:	39 88       	ldd	r3, Y+17	; 0x11
    1a80:	48 88       	ldd	r4, Y+16	; 0x10
    1a82:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a84:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a86:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a88:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a8e:	b9 84       	ldd	r11, Y+9	; 0x09
    1a90:	c8 84       	ldd	r12, Y+8	; 0x08
    1a92:	df 80       	ldd	r13, Y+7	; 0x07
    1a94:	ee 80       	ldd	r14, Y+6	; 0x06
    1a96:	fd 80       	ldd	r15, Y+5	; 0x05
    1a98:	0c 81       	ldd	r16, Y+4	; 0x04
    1a9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a9c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa0:	ce 0f       	add	r28, r30
    1aa2:	d1 1d       	adc	r29, r1
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	ed 01       	movw	r28, r26
    1ab0:	08 95       	ret

00001ab2 <_exit>:
    1ab2:	f8 94       	cli

00001ab4 <__stop_program>:
    1ab4:	ff cf       	rjmp	.-2      	; 0x1ab4 <__stop_program>
