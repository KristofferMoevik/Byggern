
ATMega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000250  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800192  00800192  00000376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000128d  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b29  00000000  00000000  00001739  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000776  00000000  00000000  00002262  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000029d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055a  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000343  00000000  00000000  000030ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000033f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e5       	ldi	r30, 0x50	; 80
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 39       	cpi	r26, 0x92	; 146
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e9       	ldi	r26, 0x92	; 146
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 39       	cpi	r26, 0x98	; 152
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 00 01 	call	0x200	; 0x200 <main>
  a6:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <send_command>:
void oled_print(char c){
	int font_size = 5;
	for(uint8_t i = 0; i < font_size; i++){
		oled_write_data(pgm_read_byte(&font5[c - 32][i]));
	}
}
  ae:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe68>
  b2:	08 95       	ret

000000b4 <send_data>:
  b4:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x1068>
  b8:	08 95       	ret

000000ba <oled_init>:
  ba:	8e ea       	ldi	r24, 0xAE	; 174
  bc:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  c0:	81 ea       	ldi	r24, 0xA1	; 161
  c2:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  c6:	8a ed       	ldi	r24, 0xDA	; 218
  c8:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  cc:	82 e1       	ldi	r24, 0x12	; 18
  ce:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  d2:	88 ec       	ldi	r24, 0xC8	; 200
  d4:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  d8:	88 ea       	ldi	r24, 0xA8	; 168
  da:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  e4:	85 ed       	ldi	r24, 0xD5	; 213
  e6:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  f0:	81 e8       	ldi	r24, 0x81	; 129
  f2:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  f6:	80 e5       	ldi	r24, 0x50	; 80
  f8:	0e 94 57 00 	call	0xae	; 0xae <send_command>
  fc:	89 ed       	ldi	r24, 0xD9	; 217
  fe:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 102:	81 e2       	ldi	r24, 0x21	; 33
 104:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 114:	8b ed       	ldi	r24, 0xDB	; 219
 116:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 11a:	80 e3       	ldi	r24, 0x30	; 48
 11c:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 120:	8d ea       	ldi	r24, 0xAD	; 173
 122:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 12c:	84 ea       	ldi	r24, 0xA4	; 164
 12e:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 132:	86 ea       	ldi	r24, 0xA6	; 166
 134:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 138:	8f ea       	ldi	r24, 0xAF	; 175
 13a:	0e 94 57 00 	call	0xae	; 0xae <send_command>
 13e:	08 95       	ret

00000140 <oled_clear_display>:

void oled_clear_display() {
	for (uint8_t page = 0; page < OLED_PAGES; page++) {
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	12 c0       	rjmp	.+36     	; 0x168 <oled_clear_display+0x28>
		for (uint8_t x = 0; x < OLED_WIDTH; x++) {
			oled_buffer[page][x] = 0x00; // All bits cleared
 144:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14c:	20 e8       	ldi	r18, 0x80	; 128
 14e:	92 9f       	mul	r25, r18
 150:	e0 0d       	add	r30, r0
 152:	f1 1d       	adc	r31, r1
 154:	11 24       	eor	r1, r1
 156:	e8 0f       	add	r30, r24
 158:	f1 1d       	adc	r31, r1
 15a:	10 82       	st	Z, r1
	}
}

void oled_clear_display() {
	for (uint8_t page = 0; page < OLED_PAGES; page++) {
		for (uint8_t x = 0; x < OLED_WIDTH; x++) {
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	01 c0       	rjmp	.+2      	; 0x162 <oled_clear_display+0x22>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	88 23       	and	r24, r24
 164:	7c f7       	brge	.-34     	; 0x144 <oled_clear_display+0x4>
		oled_write_data(pgm_read_byte(&font5[c - 32][i]));
	}
}

void oled_clear_display() {
	for (uint8_t page = 0; page < OLED_PAGES; page++) {
 166:	9f 5f       	subi	r25, 0xFF	; 255
 168:	98 30       	cpi	r25, 0x08	; 8
 16a:	d0 f3       	brcs	.-12     	; 0x160 <oled_clear_display+0x20>
		for (uint8_t x = 0; x < OLED_WIDTH; x++) {
			oled_buffer[page][x] = 0x00; // All bits cleared
		}
	}
}
 16c:	08 95       	ret

0000016e <oled_write_char>:


// Function to write a single character (requires a font array)
void oled_write_char(char c) {
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
	if (c < 32 || c > 127) return; // Character range check
 172:	90 ee       	ldi	r25, 0xE0	; 224
 174:	98 0f       	add	r25, r24
 176:	90 36       	cpi	r25, 0x60	; 96
 178:	d8 f4       	brcc	.+54     	; 0x1b0 <oled_write_char+0x42>
 17a:	d8 2f       	mov	r29, r24
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	13 c0       	rjmp	.+38     	; 0x1a6 <oled_write_char+0x38>
	for (uint8_t i = 0; i < 5; i++) {
		send_data(pgm_read_byte(&font5x7[c - 32][i]));  // Use pgm_read_byte to read from PROGMEM
 180:	2d 2f       	mov	r18, r29
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	20 52       	subi	r18, 0x20	; 32
 186:	31 09       	sbc	r19, r1
 188:	f9 01       	movw	r30, r18
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e2 0f       	add	r30, r18
 194:	f3 1f       	adc	r31, r19
 196:	ec 0f       	add	r30, r28
 198:	f1 1d       	adc	r31, r1
 19a:	e0 5f       	subi	r30, 0xF0	; 240
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	84 91       	lpm	r24, Z
 1a0:	0e 94 5a 00 	call	0xb4	; 0xb4 <send_data>


// Function to write a single character (requires a font array)
void oled_write_char(char c) {
	if (c < 32 || c > 127) return; // Character range check
	for (uint8_t i = 0; i < 5; i++) {
 1a4:	cf 5f       	subi	r28, 0xFF	; 255
 1a6:	c5 30       	cpi	r28, 0x05	; 5
 1a8:	58 f3       	brcs	.-42     	; 0x180 <oled_write_char+0x12>
		send_data(pgm_read_byte(&font5x7[c - 32][i]));  // Use pgm_read_byte to read from PROGMEM
	}
	send_data(0x00); // Add space between characters
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 5a 00 	call	0xb4	; 0xb4 <send_data>
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <recieve_char_UART>:
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
}

unsigned char recieve_char_UART(){
	while ( !( UCSR0A & (1 << RXC0) ) );/* Wait till data is received */
 1b6:	5f 9b       	sbis	0x0b, 7	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <recieve_char_UART>
	return(UDR0);			/* Return the byte*/
 1ba:	8c b1       	in	r24, 0x0c	; 12
}
 1bc:	08 95       	ret

000001be <transmit_char_UART>:

void transmit_char_UART(char letter){
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
 1be:	5d 9b       	sbis	0x0b, 5	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <transmit_char_UART>
	UDR0 = letter;
 1c2:	8c b9       	out	0x0c, r24	; 12
 1c4:	08 95       	ret

000001c6 <init_UART>:
 */ 

#include "uart.h"


void init_UART(long BAUD_PRESCALE){
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
	/* Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8); //Baudrate reg
 1ca:	07 2f       	mov	r16, r23
 1cc:	18 2f       	mov	r17, r24
 1ce:	29 2f       	mov	r18, r25
 1d0:	33 27       	eor	r19, r19
 1d2:	27 fd       	sbrc	r18, 7
 1d4:	3a 95       	dec	r19
 1d6:	00 bd       	out	0x20, r16	; 32
	UBRR0L = (unsigned char)BAUD_PRESCALE; //Baudrate reg
 1d8:	69 b9       	out	0x09, r22	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1da:	88 e1       	ldi	r24, 0x18	; 24
 1dc:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 1de:	8e e8       	ldi	r24, 0x8E	; 142
 1e0:	80 bd       	out	0x20, r24	; 32
}
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <flush_UART>:

void flush_UART( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <flush_UART+0x4>
 1ea:	8c b1       	in	r24, 0x0c	; 12
 1ec:	5f 99       	sbic	0x0b, 7	; 11
 1ee:	fd cf       	rjmp	.-6      	; 0x1ea <flush_UART+0x2>
}
 1f0:	08 95       	ret

000001f2 <init_parallell_bus>:
	}
	printf("finished testing");
}

void init_parallell_bus(){
	MCUCR = (1 << SRE);
 1f2:	80 e8       	ldi	r24, 0x80	; 128
 1f4:	85 bf       	out	0x35, r24	; 53
	EMCUCR = (1 << SRW01);
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	86 bf       	out	0x36, r24	; 54
	SFIOR = (1 << XMM2);
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	80 bf       	out	0x30, r24	; 48
 1fe:	08 95       	ret

00000200 <main>:
		_delay_ms(10);
	}
	*/
	
	
	init_parallell_bus();
 200:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <init_parallell_bus>
	init_UART(BAUD_PRESCALE);
 204:	6f e1       	ldi	r22, 0x1F	; 31
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <init_UART>
	flush_UART();
 210:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <flush_UART>
	stdout = &mystdout;
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x3>
 21c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end+0x2>
	oled_init();
 220:	0e 94 5d 00 	call	0xba	; 0xba <oled_init>
	oled_clear_display();
 224:	0e 94 a0 00 	call	0x140	; 0x140 <oled_clear_display>
	while(1){
		oled_clear_display();
 228:	0e 94 a0 00 	call	0x140	; 0x140 <oled_clear_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	87 ea       	ldi	r24, 0xA7	; 167
 22e:	91 e6       	ldi	r25, 0x61	; 97
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x30>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x36>
 236:	00 00       	nop
		_delay_ms(100);
		oled_write_char('A');
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_char>
 23e:	87 ea       	ldi	r24, 0xA7	; 167
 240:	91 e6       	ldi	r25, 0x61	; 97
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x42>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x48>
 248:	00 00       	nop
 24a:	ee cf       	rjmp	.-36     	; 0x228 <main+0x28>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
